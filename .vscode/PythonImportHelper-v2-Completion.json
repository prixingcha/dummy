[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_type_hints",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_args",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_origin",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "AssistantMemory",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "AssistantMemory",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "AssistantMemory",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant",
        "description": "phi.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Tool",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Tool",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Tool",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Function",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Tool",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Tool",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools",
        "description": "phi.tools",
        "isExtraImport": true,
        "detail": "phi.tools",
        "documentation": {}
    },
    {
        "label": "ExaTools",
        "importPath": "phi.tools.exa",
        "description": "phi.tools.exa",
        "isExtraImport": true,
        "detail": "phi.tools.exa",
        "documentation": {}
    },
    {
        "label": "ExaTools",
        "importPath": "phi.tools.exa",
        "description": "phi.tools.exa",
        "isExtraImport": true,
        "detail": "phi.tools.exa",
        "documentation": {}
    },
    {
        "label": "ExaTools",
        "importPath": "phi.tools.exa",
        "description": "phi.tools.exa",
        "isExtraImport": true,
        "detail": "phi.tools.exa",
        "documentation": {}
    },
    {
        "label": "ExaTools",
        "importPath": "phi.tools.exa",
        "description": "phi.tools.exa",
        "isExtraImport": true,
        "detail": "phi.tools.exa",
        "documentation": {}
    },
    {
        "label": "ExaTools",
        "importPath": "phi.tools.exa",
        "description": "phi.tools.exa",
        "isExtraImport": true,
        "detail": "phi.tools.exa",
        "documentation": {}
    },
    {
        "label": "ExaTools",
        "importPath": "phi.tools.exa",
        "description": "phi.tools.exa",
        "isExtraImport": true,
        "detail": "phi.tools.exa",
        "documentation": {}
    },
    {
        "label": "ExaTools",
        "importPath": "phi.tools.exa",
        "description": "phi.tools.exa",
        "isExtraImport": true,
        "detail": "phi.tools.exa",
        "documentation": {}
    },
    {
        "label": "ExaTools",
        "importPath": "phi.tools.exa",
        "description": "phi.tools.exa",
        "isExtraImport": true,
        "detail": "phi.tools.exa",
        "documentation": {}
    },
    {
        "label": "ExaTools",
        "importPath": "phi.tools.exa",
        "description": "phi.tools.exa",
        "isExtraImport": true,
        "detail": "phi.tools.exa",
        "documentation": {}
    },
    {
        "label": "ExaTools",
        "importPath": "phi.tools.exa",
        "description": "phi.tools.exa",
        "isExtraImport": true,
        "detail": "phi.tools.exa",
        "documentation": {}
    },
    {
        "label": "ExaTools",
        "importPath": "phi.tools.exa",
        "description": "phi.tools.exa",
        "isExtraImport": true,
        "detail": "phi.tools.exa",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "importPath": "phi.tools.calculator",
        "description": "phi.tools.calculator",
        "isExtraImport": true,
        "detail": "phi.tools.calculator",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "importPath": "phi.tools.calculator",
        "description": "phi.tools.calculator",
        "isExtraImport": true,
        "detail": "phi.tools.calculator",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "importPath": "phi.tools.calculator",
        "description": "phi.tools.calculator",
        "isExtraImport": true,
        "detail": "phi.tools.calculator",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "importPath": "phi.tools.calculator",
        "description": "phi.tools.calculator",
        "isExtraImport": true,
        "detail": "phi.tools.calculator",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "importPath": "phi.tools.duckduckgo",
        "description": "phi.tools.duckduckgo",
        "isExtraImport": true,
        "detail": "phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "importPath": "phi.tools.yfinance",
        "description": "phi.tools.yfinance",
        "isExtraImport": true,
        "detail": "phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "FileTools",
        "importPath": "phi.tools.file",
        "description": "phi.tools.file",
        "isExtraImport": true,
        "detail": "phi.tools.file",
        "documentation": {}
    },
    {
        "label": "FileTools",
        "importPath": "phi.tools.file",
        "description": "phi.tools.file",
        "isExtraImport": true,
        "detail": "phi.tools.file",
        "documentation": {}
    },
    {
        "label": "FileTools",
        "importPath": "phi.tools.file",
        "description": "phi.tools.file",
        "isExtraImport": true,
        "detail": "phi.tools.file",
        "documentation": {}
    },
    {
        "label": "FileTools",
        "importPath": "phi.tools.file",
        "description": "phi.tools.file",
        "isExtraImport": true,
        "detail": "phi.tools.file",
        "documentation": {}
    },
    {
        "label": "FileTools",
        "importPath": "phi.tools.file",
        "description": "phi.tools.file",
        "isExtraImport": true,
        "detail": "phi.tools.file",
        "documentation": {}
    },
    {
        "label": "FileTools",
        "importPath": "phi.tools.file",
        "description": "phi.tools.file",
        "isExtraImport": true,
        "detail": "phi.tools.file",
        "documentation": {}
    },
    {
        "label": "FileTools",
        "importPath": "phi.tools.file",
        "description": "phi.tools.file",
        "isExtraImport": true,
        "detail": "phi.tools.file",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai",
        "description": "phi.llm.openai",
        "isExtraImport": true,
        "detail": "phi.llm.openai",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge",
        "description": "phi.knowledge",
        "isExtraImport": true,
        "detail": "phi.knowledge",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge",
        "description": "phi.knowledge",
        "isExtraImport": true,
        "detail": "phi.knowledge",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge",
        "description": "phi.knowledge",
        "isExtraImport": true,
        "detail": "phi.knowledge",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge",
        "description": "phi.knowledge",
        "isExtraImport": true,
        "detail": "phi.knowledge",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge",
        "description": "phi.knowledge",
        "isExtraImport": true,
        "detail": "phi.knowledge",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge",
        "description": "phi.knowledge",
        "isExtraImport": true,
        "detail": "phi.knowledge",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge",
        "description": "phi.knowledge",
        "isExtraImport": true,
        "detail": "phi.knowledge",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge",
        "description": "phi.knowledge",
        "isExtraImport": true,
        "detail": "phi.knowledge",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge",
        "description": "phi.knowledge",
        "isExtraImport": true,
        "detail": "phi.knowledge",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge",
        "description": "phi.knowledge",
        "isExtraImport": true,
        "detail": "phi.knowledge",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge",
        "description": "phi.knowledge",
        "isExtraImport": true,
        "detail": "phi.knowledge",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge",
        "description": "phi.knowledge",
        "isExtraImport": true,
        "detail": "phi.knowledge",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "importPath": "phi.embedder.openai",
        "description": "phi.embedder.openai",
        "isExtraImport": true,
        "detail": "phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "DuckDbAssistant",
        "importPath": "phi.assistant.duckdb",
        "description": "phi.assistant.duckdb",
        "isExtraImport": true,
        "detail": "phi.assistant.duckdb",
        "documentation": {}
    },
    {
        "label": "DuckDbAssistant",
        "importPath": "phi.assistant.duckdb",
        "description": "phi.assistant.duckdb",
        "isExtraImport": true,
        "detail": "phi.assistant.duckdb",
        "documentation": {}
    },
    {
        "label": "DuckDbAssistant",
        "importPath": "phi.assistant.duckdb",
        "description": "phi.assistant.duckdb",
        "isExtraImport": true,
        "detail": "phi.assistant.duckdb",
        "documentation": {}
    },
    {
        "label": "DuckDbAssistant",
        "importPath": "phi.assistant.duckdb",
        "description": "phi.assistant.duckdb",
        "isExtraImport": true,
        "detail": "phi.assistant.duckdb",
        "documentation": {}
    },
    {
        "label": "DuckDbAssistant",
        "importPath": "phi.assistant.duckdb",
        "description": "phi.assistant.duckdb",
        "isExtraImport": true,
        "detail": "phi.assistant.duckdb",
        "documentation": {}
    },
    {
        "label": "DuckDbAssistant",
        "importPath": "phi.assistant.duckdb",
        "description": "phi.assistant.duckdb",
        "isExtraImport": true,
        "detail": "phi.assistant.duckdb",
        "documentation": {}
    },
    {
        "label": "DuckDbAssistant",
        "importPath": "phi.assistant.duckdb",
        "description": "phi.assistant.duckdb",
        "isExtraImport": true,
        "detail": "phi.assistant.duckdb",
        "documentation": {}
    },
    {
        "label": "DuckDbAssistant",
        "importPath": "phi.assistant.duckdb",
        "description": "phi.assistant.duckdb",
        "isExtraImport": true,
        "detail": "phi.assistant.duckdb",
        "documentation": {}
    },
    {
        "label": "PythonAssistant",
        "importPath": "phi.assistant.python",
        "description": "phi.assistant.python",
        "isExtraImport": true,
        "detail": "phi.assistant.python",
        "documentation": {}
    },
    {
        "label": "PythonAssistant",
        "importPath": "phi.assistant.python",
        "description": "phi.assistant.python",
        "isExtraImport": true,
        "detail": "phi.assistant.python",
        "documentation": {}
    },
    {
        "label": "PythonAssistant",
        "importPath": "phi.assistant.python",
        "description": "phi.assistant.python",
        "isExtraImport": true,
        "detail": "phi.assistant.python",
        "documentation": {}
    },
    {
        "label": "PythonAssistant",
        "importPath": "phi.assistant.python",
        "description": "phi.assistant.python",
        "isExtraImport": true,
        "detail": "phi.assistant.python",
        "documentation": {}
    },
    {
        "label": "PythonAssistant",
        "importPath": "phi.assistant.python",
        "description": "phi.assistant.python",
        "isExtraImport": true,
        "detail": "phi.assistant.python",
        "documentation": {}
    },
    {
        "label": "PythonAssistant",
        "importPath": "phi.assistant.python",
        "description": "phi.assistant.python",
        "isExtraImport": true,
        "detail": "phi.assistant.python",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "importPath": "phi.storage.assistant.postgres",
        "description": "phi.storage.assistant.postgres",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "set_log_level_to_debug",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "set_log_level_to_debug",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "set_log_level_to_debug",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "set_log_level_to_debug",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "set_log_level_to_debug",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "set_log_level_to_debug",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "phi.utils.log",
        "description": "phi.utils.log",
        "isExtraImport": true,
        "detail": "phi.utils.log",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "importPath": "phi.vectordb.pgvector",
        "description": "phi.vectordb.pgvector",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector",
        "documentation": {}
    },
    {
        "label": "nest_asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nest_asyncio",
        "description": "nest_asyncio",
        "detail": "nest_asyncio",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document",
        "description": "phi.document",
        "isExtraImport": true,
        "detail": "phi.document",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFImageReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlImageReader",
        "importPath": "phi.document.reader.pdf",
        "description": "phi.document.reader.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "importPath": "phi.document.reader.website",
        "description": "phi.document.reader.website",
        "isExtraImport": true,
        "detail": "phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "get_agent",
        "importPath": "agent",
        "description": "agent",
        "isExtraImport": true,
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "codes",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "FilePath",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_serializer",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_serializer",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_serializer",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_serializer",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_serializer",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_serializer",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_serializer",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationInfo",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validate_call",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationInfo",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "rich.pretty",
        "description": "rich.pretty",
        "isExtraImport": true,
        "detail": "rich.pretty",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "importPath": "phi.knowledge.pdf",
        "description": "phi.knowledge.pdf",
        "isExtraImport": true,
        "detail": "phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "LangChainKnowledgeBase",
        "importPath": "phi.knowledge.langchain",
        "description": "phi.knowledge.langchain",
        "isExtraImport": true,
        "detail": "phi.knowledge.langchain",
        "documentation": {}
    },
    {
        "label": "LangChainKnowledgeBase",
        "importPath": "phi.knowledge.langchain",
        "description": "phi.knowledge.langchain",
        "isExtraImport": true,
        "detail": "phi.knowledge.langchain",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbeddings",
        "importPath": "langchain.embeddings",
        "description": "langchain.embeddings",
        "isExtraImport": true,
        "detail": "langchain.embeddings",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbeddings",
        "importPath": "langchain.embeddings",
        "description": "langchain.embeddings",
        "isExtraImport": true,
        "detail": "langchain.embeddings",
        "documentation": {}
    },
    {
        "label": "TextLoader",
        "importPath": "langchain.document_loaders",
        "description": "langchain.document_loaders",
        "isExtraImport": true,
        "detail": "langchain.document_loaders",
        "documentation": {}
    },
    {
        "label": "TextLoader",
        "importPath": "langchain.document_loaders",
        "description": "langchain.document_loaders",
        "isExtraImport": true,
        "detail": "langchain.document_loaders",
        "documentation": {}
    },
    {
        "label": "CharacterTextSplitter",
        "importPath": "langchain.text_splitter",
        "description": "langchain.text_splitter",
        "isExtraImport": true,
        "detail": "langchain.text_splitter",
        "documentation": {}
    },
    {
        "label": "CharacterTextSplitter",
        "importPath": "langchain.text_splitter",
        "description": "langchain.text_splitter",
        "isExtraImport": true,
        "detail": "langchain.text_splitter",
        "documentation": {}
    },
    {
        "label": "Chroma",
        "importPath": "langchain.vectorstores",
        "description": "langchain.vectorstores",
        "isExtraImport": true,
        "detail": "langchain.vectorstores",
        "documentation": {}
    },
    {
        "label": "Chroma",
        "importPath": "langchain.vectorstores",
        "description": "langchain.vectorstores",
        "isExtraImport": true,
        "detail": "langchain.vectorstores",
        "documentation": {}
    },
    {
        "label": "typer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typer",
        "description": "typer",
        "detail": "typer",
        "documentation": {}
    },
    {
        "label": "launch",
        "importPath": "typer",
        "description": "typer",
        "isExtraImport": true,
        "detail": "typer",
        "documentation": {}
    },
    {
        "label": "PgMemoryDb",
        "importPath": "phi.memory.db.postgres",
        "description": "phi.memory.db.postgres",
        "isExtraImport": true,
        "detail": "phi.memory.db.postgres",
        "documentation": {}
    },
    {
        "label": "PgMemoryDb",
        "importPath": "phi.memory.db.postgres",
        "description": "phi.memory.db.postgres",
        "isExtraImport": true,
        "detail": "phi.memory.db.postgres",
        "documentation": {}
    },
    {
        "label": "CsvFile",
        "importPath": "phi.file.local.csv",
        "description": "phi.file.local.csv",
        "isExtraImport": true,
        "detail": "phi.file.local.csv",
        "documentation": {}
    },
    {
        "label": "CsvFile",
        "importPath": "phi.file.local.csv",
        "description": "phi.file.local.csv",
        "isExtraImport": true,
        "detail": "phi.file.local.csv",
        "documentation": {}
    },
    {
        "label": "CsvFile",
        "importPath": "phi.file.local.csv",
        "description": "phi.file.local.csv",
        "isExtraImport": true,
        "detail": "phi.file.local.csv",
        "documentation": {}
    },
    {
        "label": "get_auto_rag_assistant",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_personalized_assistant",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_sql_assistant",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "assistant_knowledge",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_world_builder",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_world_explorer",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "World",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_world_builder",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_world_explorer",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "World",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_llm_os",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_auto_rag_assistant",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_groq_assistant",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_research_assistant",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_chunk_summarizer",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_video_summarizer",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_hermes_assistant",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_mistral_assistant",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_auto_rag_assistant",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_rag_assistant",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_function_calling_assistant",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_chunk_summarizer",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_video_summarizer",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "get_auto_rag_assistant",
        "importPath": "assistant",
        "description": "assistant",
        "isExtraImport": true,
        "detail": "assistant",
        "documentation": {}
    },
    {
        "label": "Prompt",
        "importPath": "rich.prompt",
        "description": "rich.prompt",
        "isExtraImport": true,
        "detail": "rich.prompt",
        "documentation": {}
    },
    {
        "label": "Prompt",
        "importPath": "rich.prompt",
        "description": "rich.prompt",
        "isExtraImport": true,
        "detail": "rich.prompt",
        "documentation": {}
    },
    {
        "label": "Prompt",
        "importPath": "rich.prompt",
        "description": "rich.prompt",
        "isExtraImport": true,
        "detail": "rich.prompt",
        "documentation": {}
    },
    {
        "label": "Prompt",
        "importPath": "rich.prompt",
        "description": "rich.prompt",
        "isExtraImport": true,
        "detail": "rich.prompt",
        "documentation": {}
    },
    {
        "label": "vector_db",
        "importPath": "resources",
        "description": "resources",
        "isExtraImport": true,
        "detail": "resources",
        "documentation": {}
    },
    {
        "label": "vector_db",
        "importPath": "resources",
        "description": "resources",
        "isExtraImport": true,
        "detail": "resources",
        "documentation": {}
    },
    {
        "label": "vector_db",
        "importPath": "resources",
        "description": "resources",
        "isExtraImport": true,
        "detail": "resources",
        "documentation": {}
    },
    {
        "label": "vector_db",
        "importPath": "resources",
        "description": "resources",
        "isExtraImport": true,
        "detail": "resources",
        "documentation": {}
    },
    {
        "label": "get_username_sidebar",
        "importPath": "phi.tools.streamlit.components",
        "description": "phi.tools.streamlit.components",
        "isExtraImport": true,
        "detail": "phi.tools.streamlit.components",
        "documentation": {}
    },
    {
        "label": "reload_button_sidebar",
        "importPath": "phi.tools.streamlit.components",
        "description": "phi.tools.streamlit.components",
        "isExtraImport": true,
        "detail": "phi.tools.streamlit.components",
        "documentation": {}
    },
    {
        "label": "reload_button_sidebar",
        "importPath": "phi.tools.streamlit.components",
        "description": "phi.tools.streamlit.components",
        "isExtraImport": true,
        "detail": "phi.tools.streamlit.components",
        "documentation": {}
    },
    {
        "label": "reload_button_sidebar",
        "importPath": "phi.tools.streamlit.components",
        "description": "phi.tools.streamlit.components",
        "isExtraImport": true,
        "detail": "phi.tools.streamlit.components",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "phi.tools.streamlit.components",
        "description": "phi.tools.streamlit.components",
        "isExtraImport": true,
        "detail": "phi.tools.streamlit.components",
        "documentation": {}
    },
    {
        "label": "reload_button_sidebar",
        "importPath": "phi.tools.streamlit.components",
        "description": "phi.tools.streamlit.components",
        "isExtraImport": true,
        "detail": "phi.tools.streamlit.components",
        "documentation": {}
    },
    {
        "label": "get_username_sidebar",
        "importPath": "phi.tools.streamlit.components",
        "description": "phi.tools.streamlit.components",
        "isExtraImport": true,
        "detail": "phi.tools.streamlit.components",
        "documentation": {}
    },
    {
        "label": "reload_button_sidebar",
        "importPath": "phi.tools.streamlit.components",
        "description": "phi.tools.streamlit.components",
        "isExtraImport": true,
        "detail": "phi.tools.streamlit.components",
        "documentation": {}
    },
    {
        "label": "LanceDb",
        "importPath": "phi.vectordb.lancedb.lancedb",
        "description": "phi.vectordb.lancedb.lancedb",
        "isExtraImport": true,
        "detail": "phi.vectordb.lancedb.lancedb",
        "documentation": {}
    },
    {
        "label": "LanceDb",
        "importPath": "phi.vectordb.lancedb.lancedb",
        "description": "phi.vectordb.lancedb.lancedb",
        "isExtraImport": true,
        "detail": "phi.vectordb.lancedb.lancedb",
        "documentation": {}
    },
    {
        "label": "OllamaEmbedder",
        "importPath": "phi.embedder.ollama",
        "description": "phi.embedder.ollama",
        "isExtraImport": true,
        "detail": "phi.embedder.ollama",
        "documentation": {}
    },
    {
        "label": "OllamaEmbedder",
        "importPath": "phi.embedder.ollama",
        "description": "phi.embedder.ollama",
        "isExtraImport": true,
        "detail": "phi.embedder.ollama",
        "documentation": {}
    },
    {
        "label": "OllamaEmbedder",
        "importPath": "phi.embedder.ollama",
        "description": "phi.embedder.ollama",
        "isExtraImport": true,
        "detail": "phi.embedder.ollama",
        "documentation": {}
    },
    {
        "label": "OllamaEmbedder",
        "importPath": "phi.embedder.ollama",
        "description": "phi.embedder.ollama",
        "isExtraImport": true,
        "detail": "phi.embedder.ollama",
        "documentation": {}
    },
    {
        "label": "OllamaEmbedder",
        "importPath": "phi.embedder.ollama",
        "description": "phi.embedder.ollama",
        "isExtraImport": true,
        "detail": "phi.embedder.ollama",
        "documentation": {}
    },
    {
        "label": "OllamaEmbedder",
        "importPath": "phi.embedder.ollama",
        "description": "phi.embedder.ollama",
        "isExtraImport": true,
        "detail": "phi.embedder.ollama",
        "documentation": {}
    },
    {
        "label": "OllamaEmbedder",
        "importPath": "phi.embedder.ollama",
        "description": "phi.embedder.ollama",
        "isExtraImport": true,
        "detail": "phi.embedder.ollama",
        "documentation": {}
    },
    {
        "label": "OllamaEmbedder",
        "importPath": "phi.embedder.ollama",
        "description": "phi.embedder.ollama",
        "isExtraImport": true,
        "detail": "phi.embedder.ollama",
        "documentation": {}
    },
    {
        "label": "OllamaEmbedder",
        "importPath": "phi.embedder.ollama",
        "description": "phi.embedder.ollama",
        "isExtraImport": true,
        "detail": "phi.embedder.ollama",
        "documentation": {}
    },
    {
        "label": "OllamaEmbedder",
        "importPath": "phi.embedder.ollama",
        "description": "phi.embedder.ollama",
        "isExtraImport": true,
        "detail": "phi.embedder.ollama",
        "documentation": {}
    },
    {
        "label": "OllamaEmbedder",
        "importPath": "phi.embedder.ollama",
        "description": "phi.embedder.ollama",
        "isExtraImport": true,
        "detail": "phi.embedder.ollama",
        "documentation": {}
    },
    {
        "label": "SqlAssistantStorage",
        "importPath": "phi.storage.assistant.sqllite",
        "description": "phi.storage.assistant.sqllite",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.sqllite",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Hermes",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Hermes",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Hermes",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Hermes",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Hermes",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Hermes",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Hermes",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "OllamaTools",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "OllamaTools",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "phi.llm.ollama",
        "description": "phi.llm.ollama",
        "isExtraImport": true,
        "detail": "phi.llm.ollama",
        "documentation": {}
    },
    {
        "label": "SearchTerms",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "search_term_generator",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "arxiv_search_assistant",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "exa_search_assistant",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "research_editor",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "arxiv_toolkit",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "SearchTerms",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "ArxivSearchResults",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "search_term_generator",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "arxiv_search_assistant",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "exa_search_assistant",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "research_editor",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "arxiv_toolkit",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "get_research_assistant",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "get_rag_assistant",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "get_rag_research_assistant",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "get_rag_chat_assistant",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "get_invstment_research_assistant",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "get_article_summarizer",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "get_article_writer",
        "importPath": "assistants",
        "description": "assistants",
        "isExtraImport": true,
        "detail": "assistants",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "phi.assistant.team",
        "description": "phi.assistant.team",
        "isExtraImport": true,
        "detail": "phi.assistant.team",
        "documentation": {}
    },
    {
        "label": "ArxivToolkit",
        "importPath": "phi.tools.arxiv_toolkit",
        "description": "phi.tools.arxiv_toolkit",
        "isExtraImport": true,
        "detail": "phi.tools.arxiv_toolkit",
        "documentation": {}
    },
    {
        "label": "ArxivToolkit",
        "importPath": "phi.tools.arxiv_toolkit",
        "description": "phi.tools.arxiv_toolkit",
        "isExtraImport": true,
        "detail": "phi.tools.arxiv_toolkit",
        "documentation": {}
    },
    {
        "label": "SQLTools",
        "importPath": "phi.tools.sql",
        "description": "phi.tools.sql",
        "isExtraImport": true,
        "detail": "phi.tools.sql",
        "documentation": {}
    },
    {
        "label": "SQLTools",
        "importPath": "phi.tools.sql",
        "description": "phi.tools.sql",
        "isExtraImport": true,
        "detail": "phi.tools.sql",
        "documentation": {}
    },
    {
        "label": "JSONKnowledgeBase",
        "importPath": "phi.knowledge.json",
        "description": "phi.knowledge.json",
        "isExtraImport": true,
        "detail": "phi.knowledge.json",
        "documentation": {}
    },
    {
        "label": "JSONKnowledgeBase",
        "importPath": "phi.knowledge.json",
        "description": "phi.knowledge.json",
        "isExtraImport": true,
        "detail": "phi.knowledge.json",
        "documentation": {}
    },
    {
        "label": "TextKnowledgeBase",
        "importPath": "phi.knowledge.text",
        "description": "phi.knowledge.text",
        "isExtraImport": true,
        "detail": "phi.knowledge.text",
        "documentation": {}
    },
    {
        "label": "TextKnowledgeBase",
        "importPath": "phi.knowledge.text",
        "description": "phi.knowledge.text",
        "isExtraImport": true,
        "detail": "phi.knowledge.text",
        "documentation": {}
    },
    {
        "label": "CombinedKnowledgeBase",
        "importPath": "phi.knowledge.combined",
        "description": "phi.knowledge.combined",
        "isExtraImport": true,
        "detail": "phi.knowledge.combined",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "getLogger",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "getLogger",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "PineconeDB",
        "importPath": "phi.vectordb.pineconedb",
        "description": "phi.vectordb.pineconedb",
        "isExtraImport": true,
        "detail": "phi.vectordb.pineconedb",
        "documentation": {}
    },
    {
        "label": "Qdrant",
        "importPath": "phi.vectordb.qdrant",
        "description": "phi.vectordb.qdrant",
        "isExtraImport": true,
        "detail": "phi.vectordb.qdrant",
        "documentation": {}
    },
    {
        "label": "TavilyTools",
        "importPath": "phi.tools.tavily",
        "description": "phi.tools.tavily",
        "isExtraImport": true,
        "detail": "phi.tools.tavily",
        "documentation": {}
    },
    {
        "label": "TavilyTools",
        "importPath": "phi.tools.tavily",
        "description": "phi.tools.tavily",
        "isExtraImport": true,
        "detail": "phi.tools.tavily",
        "documentation": {}
    },
    {
        "label": "TavilyTools",
        "importPath": "phi.tools.tavily",
        "description": "phi.tools.tavily",
        "isExtraImport": true,
        "detail": "phi.tools.tavily",
        "documentation": {}
    },
    {
        "label": "TavilyTools",
        "importPath": "phi.tools.tavily",
        "description": "phi.tools.tavily",
        "isExtraImport": true,
        "detail": "phi.tools.tavily",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm",
        "description": "phi.llm",
        "isExtraImport": true,
        "detail": "phi.llm",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "phi.llm.groq",
        "description": "phi.llm.groq",
        "isExtraImport": true,
        "detail": "phi.llm.groq",
        "documentation": {}
    },
    {
        "label": "S2AssistantStorage",
        "importPath": "phi.storage.assistant.singlestore",
        "description": "phi.storage.assistant.singlestore",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.singlestore",
        "documentation": {}
    },
    {
        "label": "S2VectorDb",
        "importPath": "phi.vectordb.singlestore",
        "description": "phi.vectordb.singlestore",
        "isExtraImport": true,
        "detail": "phi.vectordb.singlestore",
        "documentation": {}
    },
    {
        "label": "S2VectorDb",
        "importPath": "phi.vectordb.singlestore",
        "description": "phi.vectordb.singlestore",
        "isExtraImport": true,
        "detail": "phi.vectordb.singlestore",
        "documentation": {}
    },
    {
        "label": "ArxivKnowledgeBase",
        "importPath": "phi.knowledge.arxiv",
        "description": "phi.knowledge.arxiv",
        "isExtraImport": true,
        "detail": "phi.knowledge.arxiv",
        "documentation": {}
    },
    {
        "label": "rmtree",
        "importPath": "shutil",
        "description": "shutil",
        "isExtraImport": true,
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "rmtree",
        "importPath": "shutil",
        "description": "shutil",
        "isExtraImport": true,
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "rmtree",
        "importPath": "shutil",
        "description": "shutil",
        "isExtraImport": true,
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "rmtree",
        "importPath": "shutil",
        "description": "shutil",
        "isExtraImport": true,
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "LlamaIndexKnowledgeBase",
        "importPath": "phi.knowledge.llamaindex",
        "description": "phi.knowledge.llamaindex",
        "isExtraImport": true,
        "detail": "phi.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "SimpleDirectoryReader",
        "importPath": "llama_index.core",
        "description": "llama_index.core",
        "isExtraImport": true,
        "detail": "llama_index.core",
        "documentation": {}
    },
    {
        "label": "StorageContext",
        "importPath": "llama_index.core",
        "description": "llama_index.core",
        "isExtraImport": true,
        "detail": "llama_index.core",
        "documentation": {}
    },
    {
        "label": "VectorStoreIndex",
        "importPath": "llama_index.core",
        "description": "llama_index.core",
        "isExtraImport": true,
        "detail": "llama_index.core",
        "documentation": {}
    },
    {
        "label": "VectorIndexRetriever",
        "importPath": "llama_index.core.retrievers",
        "description": "llama_index.core.retrievers",
        "isExtraImport": true,
        "detail": "llama_index.core.retrievers",
        "documentation": {}
    },
    {
        "label": "SentenceSplitter",
        "importPath": "llama_index.core.node_parser",
        "description": "llama_index.core.node_parser",
        "isExtraImport": true,
        "detail": "llama_index.core.node_parser",
        "documentation": {}
    },
    {
        "label": "WebsiteKnowledgeBase",
        "importPath": "phi.knowledge.website",
        "description": "phi.knowledge.website",
        "isExtraImport": true,
        "detail": "phi.knowledge.website",
        "documentation": {}
    },
    {
        "label": "WebsiteKnowledgeBase",
        "importPath": "phi.knowledge.website",
        "description": "phi.knowledge.website",
        "isExtraImport": true,
        "detail": "phi.knowledge.website",
        "documentation": {}
    },
    {
        "label": "WikipediaKnowledgeBase",
        "importPath": "phi.knowledge.wikipedia",
        "description": "phi.knowledge.wikipedia",
        "isExtraImport": true,
        "detail": "phi.knowledge.wikipedia",
        "documentation": {}
    },
    {
        "label": "WikipediaKnowledgeBase",
        "importPath": "phi.knowledge.wikipedia",
        "description": "phi.knowledge.wikipedia",
        "isExtraImport": true,
        "detail": "phi.knowledge.wikipedia",
        "documentation": {}
    },
    {
        "label": "ShellTools",
        "importPath": "phi.tools.shell",
        "description": "phi.tools.shell",
        "isExtraImport": true,
        "detail": "phi.tools.shell",
        "documentation": {}
    },
    {
        "label": "ShellTools",
        "importPath": "phi.tools.shell",
        "description": "phi.tools.shell",
        "isExtraImport": true,
        "detail": "phi.tools.shell",
        "documentation": {}
    },
    {
        "label": "Anyscale",
        "importPath": "phi.llm.anyscale",
        "description": "phi.llm.anyscale",
        "isExtraImport": true,
        "detail": "phi.llm.anyscale",
        "documentation": {}
    },
    {
        "label": "Anyscale",
        "importPath": "phi.llm.anyscale",
        "description": "phi.llm.anyscale",
        "isExtraImport": true,
        "detail": "phi.llm.anyscale",
        "documentation": {}
    },
    {
        "label": "Anyscale",
        "importPath": "phi.llm.anyscale",
        "description": "phi.llm.anyscale",
        "isExtraImport": true,
        "detail": "phi.llm.anyscale",
        "documentation": {}
    },
    {
        "label": "Anyscale",
        "importPath": "phi.llm.anyscale",
        "description": "phi.llm.anyscale",
        "isExtraImport": true,
        "detail": "phi.llm.anyscale",
        "documentation": {}
    },
    {
        "label": "Anyscale",
        "importPath": "phi.llm.anyscale",
        "description": "phi.llm.anyscale",
        "isExtraImport": true,
        "detail": "phi.llm.anyscale",
        "documentation": {}
    },
    {
        "label": "AnyscaleEmbedder",
        "importPath": "phi.embedder.anyscale",
        "description": "phi.embedder.anyscale",
        "isExtraImport": true,
        "detail": "phi.embedder.anyscale",
        "documentation": {}
    },
    {
        "label": "AzureOpenAIChat",
        "importPath": "phi.llm.azure",
        "description": "phi.llm.azure",
        "isExtraImport": true,
        "detail": "phi.llm.azure",
        "documentation": {}
    },
    {
        "label": "AzureOpenAIChat",
        "importPath": "phi.llm.azure",
        "description": "phi.llm.azure",
        "isExtraImport": true,
        "detail": "phi.llm.azure",
        "documentation": {}
    },
    {
        "label": "AzureOpenAIChat",
        "importPath": "phi.llm.azure",
        "description": "phi.llm.azure",
        "isExtraImport": true,
        "detail": "phi.llm.azure",
        "documentation": {}
    },
    {
        "label": "AzureOpenAIChat",
        "importPath": "phi.llm.azure",
        "description": "phi.llm.azure",
        "isExtraImport": true,
        "detail": "phi.llm.azure",
        "documentation": {}
    },
    {
        "label": "AzureOpenAIChat",
        "importPath": "phi.llm.azure",
        "description": "phi.llm.azure",
        "isExtraImport": true,
        "detail": "phi.llm.azure",
        "documentation": {}
    },
    {
        "label": "Claude",
        "importPath": "phi.llm.aws.claude",
        "description": "phi.llm.aws.claude",
        "isExtraImport": true,
        "detail": "phi.llm.aws.claude",
        "documentation": {}
    },
    {
        "label": "Claude",
        "importPath": "phi.llm.aws.claude",
        "description": "phi.llm.aws.claude",
        "isExtraImport": true,
        "detail": "phi.llm.aws.claude",
        "documentation": {}
    },
    {
        "label": "Claude",
        "importPath": "phi.llm.anthropic",
        "description": "phi.llm.anthropic",
        "isExtraImport": true,
        "detail": "phi.llm.anthropic",
        "documentation": {}
    },
    {
        "label": "Claude",
        "importPath": "phi.llm.anthropic",
        "description": "phi.llm.anthropic",
        "isExtraImport": true,
        "detail": "phi.llm.anthropic",
        "documentation": {}
    },
    {
        "label": "Claude",
        "importPath": "phi.llm.anthropic",
        "description": "phi.llm.anthropic",
        "isExtraImport": true,
        "detail": "phi.llm.anthropic",
        "documentation": {}
    },
    {
        "label": "Claude",
        "importPath": "phi.llm.anthropic",
        "description": "phi.llm.anthropic",
        "isExtraImport": true,
        "detail": "phi.llm.anthropic",
        "documentation": {}
    },
    {
        "label": "Claude",
        "importPath": "phi.llm.anthropic",
        "description": "phi.llm.anthropic",
        "isExtraImport": true,
        "detail": "phi.llm.anthropic",
        "documentation": {}
    },
    {
        "label": "Claude",
        "importPath": "phi.llm.anthropic",
        "description": "phi.llm.anthropic",
        "isExtraImport": true,
        "detail": "phi.llm.anthropic",
        "documentation": {}
    },
    {
        "label": "Claude",
        "importPath": "phi.llm.anthropic",
        "description": "phi.llm.anthropic",
        "isExtraImport": true,
        "detail": "phi.llm.anthropic",
        "documentation": {}
    },
    {
        "label": "Claude",
        "importPath": "phi.llm.anthropic",
        "description": "phi.llm.anthropic",
        "isExtraImport": true,
        "detail": "phi.llm.anthropic",
        "documentation": {}
    },
    {
        "label": "DuckDbTools",
        "importPath": "phi.tools.duckdb",
        "description": "phi.tools.duckdb",
        "isExtraImport": true,
        "detail": "phi.tools.duckdb",
        "documentation": {}
    },
    {
        "label": "DuckDbTools",
        "importPath": "phi.tools.duckdb",
        "description": "phi.tools.duckdb",
        "isExtraImport": true,
        "detail": "phi.tools.duckdb",
        "documentation": {}
    },
    {
        "label": "DuckDbTools",
        "importPath": "phi.tools.duckdb",
        "description": "phi.tools.duckdb",
        "isExtraImport": true,
        "detail": "phi.tools.duckdb",
        "documentation": {}
    },
    {
        "label": "DuckDbTools",
        "importPath": "phi.tools.duckdb",
        "description": "phi.tools.duckdb",
        "isExtraImport": true,
        "detail": "phi.tools.duckdb",
        "documentation": {}
    },
    {
        "label": "DuckDbTools",
        "importPath": "phi.tools.duckdb",
        "description": "phi.tools.duckdb",
        "isExtraImport": true,
        "detail": "phi.tools.duckdb",
        "documentation": {}
    },
    {
        "label": "DuckDbTools",
        "importPath": "phi.tools.duckdb",
        "description": "phi.tools.duckdb",
        "isExtraImport": true,
        "detail": "phi.tools.duckdb",
        "documentation": {}
    },
    {
        "label": "WebsiteTools",
        "importPath": "phi.tools.website",
        "description": "phi.tools.website",
        "isExtraImport": true,
        "detail": "phi.tools.website",
        "documentation": {}
    },
    {
        "label": "WebsiteTools",
        "importPath": "phi.tools.website",
        "description": "phi.tools.website",
        "isExtraImport": true,
        "detail": "phi.tools.website",
        "documentation": {}
    },
    {
        "label": "WebsiteTools",
        "importPath": "phi.tools.website",
        "description": "phi.tools.website",
        "isExtraImport": true,
        "detail": "phi.tools.website",
        "documentation": {}
    },
    {
        "label": "WebsiteTools",
        "importPath": "phi.tools.website",
        "description": "phi.tools.website",
        "isExtraImport": true,
        "detail": "phi.tools.website",
        "documentation": {}
    },
    {
        "label": "WebsiteTools",
        "importPath": "phi.tools.website",
        "description": "phi.tools.website",
        "isExtraImport": true,
        "detail": "phi.tools.website",
        "documentation": {}
    },
    {
        "label": "CohereChat",
        "importPath": "phi.llm.cohere",
        "description": "phi.llm.cohere",
        "isExtraImport": true,
        "detail": "phi.llm.cohere",
        "documentation": {}
    },
    {
        "label": "CohereChat",
        "importPath": "phi.llm.cohere",
        "description": "phi.llm.cohere",
        "isExtraImport": true,
        "detail": "phi.llm.cohere",
        "documentation": {}
    },
    {
        "label": "CohereChat",
        "importPath": "phi.llm.cohere",
        "description": "phi.llm.cohere",
        "isExtraImport": true,
        "detail": "phi.llm.cohere",
        "documentation": {}
    },
    {
        "label": "CohereChat",
        "importPath": "phi.llm.cohere",
        "description": "phi.llm.cohere",
        "isExtraImport": true,
        "detail": "phi.llm.cohere",
        "documentation": {}
    },
    {
        "label": "CohereChat",
        "importPath": "phi.llm.cohere",
        "description": "phi.llm.cohere",
        "isExtraImport": true,
        "detail": "phi.llm.cohere",
        "documentation": {}
    },
    {
        "label": "CohereChat",
        "importPath": "phi.llm.cohere",
        "description": "phi.llm.cohere",
        "isExtraImport": true,
        "detail": "phi.llm.cohere",
        "documentation": {}
    },
    {
        "label": "CohereChat",
        "importPath": "phi.llm.cohere",
        "description": "phi.llm.cohere",
        "isExtraImport": true,
        "detail": "phi.llm.cohere",
        "documentation": {}
    },
    {
        "label": "CohereChat",
        "importPath": "phi.llm.cohere",
        "description": "phi.llm.cohere",
        "isExtraImport": true,
        "detail": "phi.llm.cohere",
        "documentation": {}
    },
    {
        "label": "Fireworks",
        "importPath": "phi.llm.fireworks",
        "description": "phi.llm.fireworks",
        "isExtraImport": true,
        "detail": "phi.llm.fireworks",
        "documentation": {}
    },
    {
        "label": "Fireworks",
        "importPath": "phi.llm.fireworks",
        "description": "phi.llm.fireworks",
        "isExtraImport": true,
        "detail": "phi.llm.fireworks",
        "documentation": {}
    },
    {
        "label": "Fireworks",
        "importPath": "phi.llm.fireworks",
        "description": "phi.llm.fireworks",
        "isExtraImport": true,
        "detail": "phi.llm.fireworks",
        "documentation": {}
    },
    {
        "label": "Fireworks",
        "importPath": "phi.llm.fireworks",
        "description": "phi.llm.fireworks",
        "isExtraImport": true,
        "detail": "phi.llm.fireworks",
        "documentation": {}
    },
    {
        "label": "Fireworks",
        "importPath": "phi.llm.fireworks",
        "description": "phi.llm.fireworks",
        "isExtraImport": true,
        "detail": "phi.llm.fireworks",
        "documentation": {}
    },
    {
        "label": "Fireworks",
        "importPath": "phi.llm.fireworks",
        "description": "phi.llm.fireworks",
        "isExtraImport": true,
        "detail": "phi.llm.fireworks",
        "documentation": {}
    },
    {
        "label": "Fireworks",
        "importPath": "phi.llm.fireworks",
        "description": "phi.llm.fireworks",
        "isExtraImport": true,
        "detail": "phi.llm.fireworks",
        "documentation": {}
    },
    {
        "label": "Fireworks",
        "importPath": "phi.llm.fireworks",
        "description": "phi.llm.fireworks",
        "isExtraImport": true,
        "detail": "phi.llm.fireworks",
        "documentation": {}
    },
    {
        "label": "FireworksEmbedder",
        "importPath": "phi.embedder.fireworks",
        "description": "phi.embedder.fireworks",
        "isExtraImport": true,
        "detail": "phi.embedder.fireworks",
        "documentation": {}
    },
    {
        "label": "vertexai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "vertexai",
        "description": "vertexai",
        "detail": "vertexai",
        "documentation": {}
    },
    {
        "label": "GenerativeModel",
        "importPath": "vertexai.generative_models",
        "description": "vertexai.generative_models",
        "isExtraImport": true,
        "detail": "vertexai.generative_models",
        "documentation": {}
    },
    {
        "label": "Part",
        "importPath": "vertexai.generative_models",
        "description": "vertexai.generative_models",
        "isExtraImport": true,
        "detail": "vertexai.generative_models",
        "documentation": {}
    },
    {
        "label": "GenerativeModel",
        "importPath": "vertexai.generative_models",
        "description": "vertexai.generative_models",
        "isExtraImport": true,
        "detail": "vertexai.generative_models",
        "documentation": {}
    },
    {
        "label": "GenerationResponse",
        "importPath": "vertexai.generative_models",
        "description": "vertexai.generative_models",
        "isExtraImport": true,
        "detail": "vertexai.generative_models",
        "documentation": {}
    },
    {
        "label": "Gemini",
        "importPath": "phi.llm.gemini",
        "description": "phi.llm.gemini",
        "isExtraImport": true,
        "detail": "phi.llm.gemini",
        "documentation": {}
    },
    {
        "label": "Gemini",
        "importPath": "phi.llm.gemini",
        "description": "phi.llm.gemini",
        "isExtraImport": true,
        "detail": "phi.llm.gemini",
        "documentation": {}
    },
    {
        "label": "Gemini",
        "importPath": "phi.llm.gemini",
        "description": "phi.llm.gemini",
        "isExtraImport": true,
        "detail": "phi.llm.gemini",
        "documentation": {}
    },
    {
        "label": "obb",
        "importPath": "openbb",
        "description": "openbb",
        "isExtraImport": true,
        "detail": "openbb",
        "documentation": {}
    },
    {
        "label": "OpenBBTools",
        "importPath": "phi.tools.openbb_tools",
        "description": "phi.tools.openbb_tools",
        "isExtraImport": true,
        "detail": "phi.tools.openbb_tools",
        "documentation": {}
    },
    {
        "label": "yfinance",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yfinance",
        "description": "yfinance",
        "detail": "yfinance",
        "documentation": {}
    },
    {
        "label": "DDGS",
        "importPath": "duckduckgo_search",
        "description": "duckduckgo_search",
        "isExtraImport": true,
        "detail": "duckduckgo_search",
        "documentation": {}
    },
    {
        "label": "DDGS",
        "importPath": "duckduckgo_search",
        "description": "duckduckgo_search",
        "isExtraImport": true,
        "detail": "duckduckgo_search",
        "documentation": {}
    },
    {
        "label": "Newspaper4k",
        "importPath": "phi.tools.newspaper4k",
        "description": "phi.tools.newspaper4k",
        "isExtraImport": true,
        "detail": "phi.tools.newspaper4k",
        "documentation": {}
    },
    {
        "label": "Newspaper4k",
        "importPath": "phi.tools.newspaper4k",
        "description": "phi.tools.newspaper4k",
        "isExtraImport": true,
        "detail": "phi.tools.newspaper4k",
        "documentation": {}
    },
    {
        "label": "Newspaper4k",
        "importPath": "phi.tools.newspaper4k",
        "description": "phi.tools.newspaper4k",
        "isExtraImport": true,
        "detail": "phi.tools.newspaper4k",
        "documentation": {}
    },
    {
        "label": "Newspaper4k",
        "importPath": "phi.tools.newspaper4k",
        "description": "phi.tools.newspaper4k",
        "isExtraImport": true,
        "detail": "phi.tools.newspaper4k",
        "documentation": {}
    },
    {
        "label": "YouTubeTools",
        "importPath": "phi.tools.youtube_tools",
        "description": "phi.tools.youtube_tools",
        "isExtraImport": true,
        "detail": "phi.tools.youtube_tools",
        "documentation": {}
    },
    {
        "label": "YouTubeTools",
        "importPath": "phi.tools.youtube_tools",
        "description": "phi.tools.youtube_tools",
        "isExtraImport": true,
        "detail": "phi.tools.youtube_tools",
        "documentation": {}
    },
    {
        "label": "YouTubeTools",
        "importPath": "phi.tools.youtube_tools",
        "description": "phi.tools.youtube_tools",
        "isExtraImport": true,
        "detail": "phi.tools.youtube_tools",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "importPath": "phi.llm.openai.like",
        "description": "phi.llm.openai.like",
        "isExtraImport": true,
        "detail": "phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "Mistral",
        "importPath": "phi.llm.mistral",
        "description": "phi.llm.mistral",
        "isExtraImport": true,
        "detail": "phi.llm.mistral",
        "documentation": {}
    },
    {
        "label": "Mistral",
        "importPath": "phi.llm.mistral",
        "description": "phi.llm.mistral",
        "isExtraImport": true,
        "detail": "phi.llm.mistral",
        "documentation": {}
    },
    {
        "label": "Mistral",
        "importPath": "phi.llm.mistral",
        "description": "phi.llm.mistral",
        "isExtraImport": true,
        "detail": "phi.llm.mistral",
        "documentation": {}
    },
    {
        "label": "Mistral",
        "importPath": "phi.llm.mistral",
        "description": "phi.llm.mistral",
        "isExtraImport": true,
        "detail": "phi.llm.mistral",
        "documentation": {}
    },
    {
        "label": "Mistral",
        "importPath": "phi.llm.mistral",
        "description": "phi.llm.mistral",
        "isExtraImport": true,
        "detail": "phi.llm.mistral",
        "documentation": {}
    },
    {
        "label": "MistralEmbedder",
        "importPath": "phi.embedder.mistral",
        "description": "phi.embedder.mistral",
        "isExtraImport": true,
        "detail": "phi.embedder.mistral",
        "documentation": {}
    },
    {
        "label": "MistralClient",
        "importPath": "mistralai.client",
        "description": "mistralai.client",
        "isExtraImport": true,
        "detail": "mistralai.client",
        "documentation": {}
    },
    {
        "label": "OllamaOpenAI",
        "importPath": "phi.llm.ollama.openai",
        "description": "phi.llm.ollama.openai",
        "isExtraImport": true,
        "detail": "phi.llm.ollama.openai",
        "documentation": {}
    },
    {
        "label": "OpenRouter",
        "importPath": "phi.llm.openrouter",
        "description": "phi.llm.openrouter",
        "isExtraImport": true,
        "detail": "phi.llm.openrouter",
        "documentation": {}
    },
    {
        "label": "OpenRouter",
        "importPath": "phi.llm.openrouter",
        "description": "phi.llm.openrouter",
        "isExtraImport": true,
        "detail": "phi.llm.openrouter",
        "documentation": {}
    },
    {
        "label": "OpenRouter",
        "importPath": "phi.llm.openrouter",
        "description": "phi.llm.openrouter",
        "isExtraImport": true,
        "detail": "phi.llm.openrouter",
        "documentation": {}
    },
    {
        "label": "OpenRouter",
        "importPath": "phi.llm.openrouter",
        "description": "phi.llm.openrouter",
        "isExtraImport": true,
        "detail": "phi.llm.openrouter",
        "documentation": {}
    },
    {
        "label": "Together",
        "importPath": "phi.llm.together",
        "description": "phi.llm.together",
        "isExtraImport": true,
        "detail": "phi.llm.together",
        "documentation": {}
    },
    {
        "label": "Together",
        "importPath": "phi.llm.together",
        "description": "phi.llm.together",
        "isExtraImport": true,
        "detail": "phi.llm.together",
        "documentation": {}
    },
    {
        "label": "Together",
        "importPath": "phi.llm.together",
        "description": "phi.llm.together",
        "isExtraImport": true,
        "detail": "phi.llm.together",
        "documentation": {}
    },
    {
        "label": "Together",
        "importPath": "phi.llm.together",
        "description": "phi.llm.together",
        "isExtraImport": true,
        "detail": "phi.llm.together",
        "documentation": {}
    },
    {
        "label": "Together",
        "importPath": "phi.llm.together",
        "description": "phi.llm.together",
        "isExtraImport": true,
        "detail": "phi.llm.together",
        "documentation": {}
    },
    {
        "label": "Together",
        "importPath": "phi.llm.together",
        "description": "phi.llm.together",
        "isExtraImport": true,
        "detail": "phi.llm.together",
        "documentation": {}
    },
    {
        "label": "TogetherEmbedder",
        "importPath": "phi.embedder.together",
        "description": "phi.embedder.together",
        "isExtraImport": true,
        "detail": "phi.embedder.together",
        "documentation": {}
    },
    {
        "label": "SerpApiTools",
        "importPath": "phi.tools.serpapi_tools",
        "description": "phi.tools.serpapi_tools",
        "isExtraImport": true,
        "detail": "phi.tools.serpapi_tools",
        "documentation": {}
    },
    {
        "label": "SerpApiTools",
        "importPath": "phi.tools.serpapi_tools",
        "description": "phi.tools.serpapi_tools",
        "isExtraImport": true,
        "detail": "phi.tools.serpapi_tools",
        "documentation": {}
    },
    {
        "label": "NewspaperToolkit",
        "importPath": "phi.tools.newspaper_toolkit",
        "description": "phi.tools.newspaper_toolkit",
        "isExtraImport": true,
        "detail": "phi.tools.newspaper_toolkit",
        "documentation": {}
    },
    {
        "label": "HackerNews",
        "importPath": "phi.tools.hackernews",
        "description": "phi.tools.hackernews",
        "isExtraImport": true,
        "detail": "phi.tools.hackernews",
        "documentation": {}
    },
    {
        "label": "ApifyTools",
        "importPath": "phi.tools.apify",
        "description": "phi.tools.apify",
        "isExtraImport": true,
        "detail": "phi.tools.apify",
        "documentation": {}
    },
    {
        "label": "CsvTools",
        "importPath": "phi.tools.csv_tools",
        "description": "phi.tools.csv_tools",
        "isExtraImport": true,
        "detail": "phi.tools.csv_tools",
        "documentation": {}
    },
    {
        "label": "EmailTools",
        "importPath": "phi.tools.email",
        "description": "phi.tools.email",
        "isExtraImport": true,
        "detail": "phi.tools.email",
        "documentation": {}
    },
    {
        "label": "PubmedTools",
        "importPath": "phi.tools.pubmed",
        "description": "phi.tools.pubmed",
        "isExtraImport": true,
        "detail": "phi.tools.pubmed",
        "documentation": {}
    },
    {
        "label": "PythonTools",
        "importPath": "phi.tools.python",
        "description": "phi.tools.python",
        "isExtraImport": true,
        "detail": "phi.tools.python",
        "documentation": {}
    },
    {
        "label": "PythonTools",
        "importPath": "phi.tools.python",
        "description": "phi.tools.python",
        "isExtraImport": true,
        "detail": "phi.tools.python",
        "documentation": {}
    },
    {
        "label": "ResendTools",
        "importPath": "phi.tools.resend_tools",
        "description": "phi.tools.resend_tools",
        "isExtraImport": true,
        "detail": "phi.tools.resend_tools",
        "documentation": {}
    },
    {
        "label": "WikipediaTools",
        "importPath": "phi.tools.wikipedia",
        "description": "phi.tools.wikipedia",
        "isExtraImport": true,
        "detail": "phi.tools.wikipedia",
        "documentation": {}
    },
    {
        "label": "ZendeskTools",
        "importPath": "phi.tools.zendesk",
        "description": "phi.tools.zendesk",
        "isExtraImport": true,
        "detail": "phi.tools.zendesk",
        "documentation": {}
    },
    {
        "label": "Workflow",
        "importPath": "phi.workflow",
        "description": "phi.workflow",
        "isExtraImport": true,
        "detail": "phi.workflow",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "phi.workflow",
        "description": "phi.workflow",
        "isExtraImport": true,
        "detail": "phi.workflow",
        "documentation": {}
    },
    {
        "label": "Workflow",
        "importPath": "phi.workflow",
        "description": "phi.workflow",
        "isExtraImport": true,
        "detail": "phi.workflow",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "phi.workflow",
        "description": "phi.workflow",
        "isExtraImport": true,
        "detail": "phi.workflow",
        "documentation": {}
    },
    {
        "label": "Workflow",
        "importPath": "phi.workflow",
        "description": "phi.workflow",
        "isExtraImport": true,
        "detail": "phi.workflow",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "phi.workflow",
        "description": "phi.workflow",
        "isExtraImport": true,
        "detail": "phi.workflow",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "phi_cli_settings",
        "importPath": "phi.cli.settings",
        "description": "phi.cli.settings",
        "isExtraImport": true,
        "detail": "phi.cli.settings",
        "documentation": {}
    },
    {
        "label": "phi_cli_settings",
        "importPath": "phi.cli.settings",
        "description": "phi.cli.settings",
        "isExtraImport": true,
        "detail": "phi.cli.settings",
        "documentation": {}
    },
    {
        "label": "phi_cli_settings",
        "importPath": "phi.cli.settings",
        "description": "phi.cli.settings",
        "isExtraImport": true,
        "detail": "phi.cli.settings",
        "documentation": {}
    },
    {
        "label": "phi_cli_settings",
        "importPath": "phi.cli.settings",
        "description": "phi.cli.settings",
        "isExtraImport": true,
        "detail": "phi.cli.settings",
        "documentation": {}
    },
    {
        "label": "phi_cli_settings",
        "importPath": "phi.cli.settings",
        "description": "phi.cli.settings",
        "isExtraImport": true,
        "detail": "phi.cli.settings",
        "documentation": {}
    },
    {
        "label": "phi_cli_settings",
        "importPath": "phi.cli.settings",
        "description": "phi.cli.settings",
        "isExtraImport": true,
        "detail": "phi.cli.settings",
        "documentation": {}
    },
    {
        "label": "phi_cli_settings",
        "importPath": "phi.cli.settings",
        "description": "phi.cli.settings",
        "isExtraImport": true,
        "detail": "phi.cli.settings",
        "documentation": {}
    },
    {
        "label": "phi_cli_settings",
        "importPath": "phi.cli.settings",
        "description": "phi.cli.settings",
        "isExtraImport": true,
        "detail": "phi.cli.settings",
        "documentation": {}
    },
    {
        "label": "phi_cli_settings",
        "importPath": "phi.cli.settings",
        "description": "phi.cli.settings",
        "isExtraImport": true,
        "detail": "phi.cli.settings",
        "documentation": {}
    },
    {
        "label": "PHI_CLI_DIR",
        "importPath": "phi.cli.settings",
        "description": "phi.cli.settings",
        "isExtraImport": true,
        "detail": "phi.cli.settings",
        "documentation": {}
    },
    {
        "label": "phi_cli_settings",
        "importPath": "phi.cli.settings",
        "description": "phi.cli.settings",
        "isExtraImport": true,
        "detail": "phi.cli.settings",
        "documentation": {}
    },
    {
        "label": "read_auth_token",
        "importPath": "phi.cli.credentials",
        "description": "phi.cli.credentials",
        "isExtraImport": true,
        "detail": "phi.cli.credentials",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "phi.api.api",
        "description": "phi.api.api",
        "isExtraImport": true,
        "detail": "phi.api.api",
        "documentation": {}
    },
    {
        "label": "invalid_response",
        "importPath": "phi.api.api",
        "description": "phi.api.api",
        "isExtraImport": true,
        "detail": "phi.api.api",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "phi.api.api",
        "description": "phi.api.api",
        "isExtraImport": true,
        "detail": "phi.api.api",
        "documentation": {}
    },
    {
        "label": "invalid_response",
        "importPath": "phi.api.api",
        "description": "phi.api.api",
        "isExtraImport": true,
        "detail": "phi.api.api",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "phi.api.api",
        "description": "phi.api.api",
        "isExtraImport": true,
        "detail": "phi.api.api",
        "documentation": {}
    },
    {
        "label": "invalid_response",
        "importPath": "phi.api.api",
        "description": "phi.api.api",
        "isExtraImport": true,
        "detail": "phi.api.api",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "phi.api.api",
        "description": "phi.api.api",
        "isExtraImport": true,
        "detail": "phi.api.api",
        "documentation": {}
    },
    {
        "label": "invalid_response",
        "importPath": "phi.api.api",
        "description": "phi.api.api",
        "isExtraImport": true,
        "detail": "phi.api.api",
        "documentation": {}
    },
    {
        "label": "ApiRoutes",
        "importPath": "phi.api.routes",
        "description": "phi.api.routes",
        "isExtraImport": true,
        "detail": "phi.api.routes",
        "documentation": {}
    },
    {
        "label": "ApiRoutes",
        "importPath": "phi.api.routes",
        "description": "phi.api.routes",
        "isExtraImport": true,
        "detail": "phi.api.routes",
        "documentation": {}
    },
    {
        "label": "ApiRoutes",
        "importPath": "phi.api.routes",
        "description": "phi.api.routes",
        "isExtraImport": true,
        "detail": "phi.api.routes",
        "documentation": {}
    },
    {
        "label": "ApiRoutes",
        "importPath": "phi.api.routes",
        "description": "phi.api.routes",
        "isExtraImport": true,
        "detail": "phi.api.routes",
        "documentation": {}
    },
    {
        "label": "AssistantEventCreate",
        "importPath": "phi.api.schemas.assistant",
        "description": "phi.api.schemas.assistant",
        "isExtraImport": true,
        "detail": "phi.api.schemas.assistant",
        "documentation": {}
    },
    {
        "label": "AssistantRunCreate",
        "importPath": "phi.api.schemas.assistant",
        "description": "phi.api.schemas.assistant",
        "isExtraImport": true,
        "detail": "phi.api.schemas.assistant",
        "documentation": {}
    },
    {
        "label": "PHI_API_KEY_ENV_VAR",
        "importPath": "phi.constants",
        "description": "phi.constants",
        "isExtraImport": true,
        "detail": "phi.constants",
        "documentation": {}
    },
    {
        "label": "PHI_WS_KEY_ENV_VAR",
        "importPath": "phi.constants",
        "description": "phi.constants",
        "isExtraImport": true,
        "detail": "phi.constants",
        "documentation": {}
    },
    {
        "label": "WORKSPACE_ID_ENV_VAR",
        "importPath": "phi.constants",
        "description": "phi.constants",
        "isExtraImport": true,
        "detail": "phi.constants",
        "documentation": {}
    },
    {
        "label": "WORKSPACE_HASH_ENV_VAR",
        "importPath": "phi.constants",
        "description": "phi.constants",
        "isExtraImport": true,
        "detail": "phi.constants",
        "documentation": {}
    },
    {
        "label": "WORKSPACE_KEY_ENV_VAR",
        "importPath": "phi.constants",
        "description": "phi.constants",
        "isExtraImport": true,
        "detail": "phi.constants",
        "documentation": {}
    },
    {
        "label": "PromptRegistrySync",
        "importPath": "phi.api.schemas.prompt",
        "description": "phi.api.schemas.prompt",
        "isExtraImport": true,
        "detail": "phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "PromptTemplatesSync",
        "importPath": "phi.api.schemas.prompt",
        "description": "phi.api.schemas.prompt",
        "isExtraImport": true,
        "detail": "phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "PromptRegistrySchema",
        "importPath": "phi.api.schemas.prompt",
        "description": "phi.api.schemas.prompt",
        "isExtraImport": true,
        "detail": "phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "PromptTemplateSync",
        "importPath": "phi.api.schemas.prompt",
        "description": "phi.api.schemas.prompt",
        "isExtraImport": true,
        "detail": "phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "PromptTemplateSchema",
        "importPath": "phi.api.schemas.prompt",
        "description": "phi.api.schemas.prompt",
        "isExtraImport": true,
        "detail": "phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "PromptRegistrySync",
        "importPath": "phi.api.schemas.prompt",
        "description": "phi.api.schemas.prompt",
        "isExtraImport": true,
        "detail": "phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "PromptTemplatesSync",
        "importPath": "phi.api.schemas.prompt",
        "description": "phi.api.schemas.prompt",
        "isExtraImport": true,
        "detail": "phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "PromptTemplateSync",
        "importPath": "phi.api.schemas.prompt",
        "description": "phi.api.schemas.prompt",
        "isExtraImport": true,
        "detail": "phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "PromptRegistrySchema",
        "importPath": "phi.api.schemas.prompt",
        "description": "phi.api.schemas.prompt",
        "isExtraImport": true,
        "detail": "phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "PromptTemplateSchema",
        "importPath": "phi.api.schemas.prompt",
        "description": "phi.api.schemas.prompt",
        "isExtraImport": true,
        "detail": "phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "WorkspaceIdentifier",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceSchema",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceCreate",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceUpdate",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceDelete",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceEvent",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "UpdatePrimaryWorkspace",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceSchema",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceSchema",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceDelete",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceSchema",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceSchema",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceCreate",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceUpdate",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceEvent",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "UpdatePrimaryWorkspace",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceSchema",
        "importPath": "phi.api.schemas.workspace",
        "description": "phi.api.schemas.workspace",
        "isExtraImport": true,
        "detail": "phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "str_to_int",
        "importPath": "phi.utils.common",
        "description": "phi.utils.common",
        "isExtraImport": true,
        "detail": "phi.utils.common",
        "documentation": {}
    },
    {
        "label": "str_to_int",
        "importPath": "phi.utils.common",
        "description": "phi.utils.common",
        "isExtraImport": true,
        "detail": "phi.utils.common",
        "documentation": {}
    },
    {
        "label": "str_to_int",
        "importPath": "phi.utils.common",
        "description": "phi.utils.common",
        "isExtraImport": true,
        "detail": "phi.utils.common",
        "documentation": {}
    },
    {
        "label": "str_to_int",
        "importPath": "phi.utils.common",
        "description": "phi.utils.common",
        "isExtraImport": true,
        "detail": "phi.utils.common",
        "documentation": {}
    },
    {
        "label": "str_to_int",
        "importPath": "phi.utils.common",
        "description": "phi.utils.common",
        "isExtraImport": true,
        "detail": "phi.utils.common",
        "documentation": {}
    },
    {
        "label": "get_image_str",
        "importPath": "phi.utils.common",
        "description": "phi.utils.common",
        "isExtraImport": true,
        "detail": "phi.utils.common",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "phi.api.schemas.user",
        "description": "phi.api.schemas.user",
        "isExtraImport": true,
        "detail": "phi.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "EmailPasswordAuthSchema",
        "importPath": "phi.api.schemas.user",
        "description": "phi.api.schemas.user",
        "isExtraImport": true,
        "detail": "phi.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "phi.api.schemas.user",
        "description": "phi.api.schemas.user",
        "isExtraImport": true,
        "detail": "phi.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "phi.api.schemas.user",
        "description": "phi.api.schemas.user",
        "isExtraImport": true,
        "detail": "phi.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "PhiCliConfig",
        "importPath": "phi.cli.config",
        "description": "phi.cli.config",
        "isExtraImport": true,
        "detail": "phi.cli.config",
        "documentation": {}
    },
    {
        "label": "PhiCliConfig",
        "importPath": "phi.cli.config",
        "description": "phi.cli.config",
        "isExtraImport": true,
        "detail": "phi.cli.config",
        "documentation": {}
    },
    {
        "label": "PhiCliConfig",
        "importPath": "phi.cli.config",
        "description": "phi.cli.config",
        "isExtraImport": true,
        "detail": "phi.cli.config",
        "documentation": {}
    },
    {
        "label": "PhiCliConfig",
        "importPath": "phi.cli.config",
        "description": "phi.cli.config",
        "isExtraImport": true,
        "detail": "phi.cli.config",
        "documentation": {}
    },
    {
        "label": "FieldValidationInfo",
        "importPath": "pydantic_core.core_schema",
        "description": "pydantic_core.core_schema",
        "isExtraImport": true,
        "detail": "pydantic_core.core_schema",
        "documentation": {}
    },
    {
        "label": "FieldValidationInfo",
        "importPath": "pydantic_core.core_schema",
        "description": "pydantic_core.core_schema",
        "isExtraImport": true,
        "detail": "pydantic_core.core_schema",
        "documentation": {}
    },
    {
        "label": "FieldValidationInfo",
        "importPath": "pydantic_core.core_schema",
        "description": "pydantic_core.core_schema",
        "isExtraImport": true,
        "detail": "pydantic_core.core_schema",
        "documentation": {}
    },
    {
        "label": "FieldValidationInfo",
        "importPath": "pydantic_core.core_schema",
        "description": "pydantic_core.core_schema",
        "isExtraImport": true,
        "detail": "pydantic_core.core_schema",
        "documentation": {}
    },
    {
        "label": "PhiBase",
        "importPath": "phi.base",
        "description": "phi.base",
        "isExtraImport": true,
        "detail": "phi.base",
        "documentation": {}
    },
    {
        "label": "PhiBase",
        "importPath": "phi.base",
        "description": "phi.base",
        "isExtraImport": true,
        "detail": "phi.base",
        "documentation": {}
    },
    {
        "label": "PhiBase",
        "importPath": "phi.base",
        "description": "phi.base",
        "isExtraImport": true,
        "detail": "phi.base",
        "documentation": {}
    },
    {
        "label": "PhiBase",
        "importPath": "phi.base",
        "description": "phi.base",
        "isExtraImport": true,
        "detail": "phi.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.app.context",
        "description": "phi.app.context",
        "isExtraImport": true,
        "detail": "phi.app.context",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.app.context",
        "description": "phi.app.context",
        "isExtraImport": true,
        "detail": "phi.app.context",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.app.context",
        "description": "phi.app.context",
        "isExtraImport": true,
        "detail": "phi.app.context",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.app.context",
        "description": "phi.app.context",
        "isExtraImport": true,
        "detail": "phi.app.context",
        "documentation": {}
    },
    {
        "label": "ResourceBase",
        "importPath": "phi.resource.base",
        "description": "phi.resource.base",
        "isExtraImport": true,
        "detail": "phi.resource.base",
        "documentation": {}
    },
    {
        "label": "ResourceBase",
        "importPath": "phi.resource.base",
        "description": "phi.resource.base",
        "isExtraImport": true,
        "detail": "phi.resource.base",
        "documentation": {}
    },
    {
        "label": "ResourceBase",
        "importPath": "phi.resource.base",
        "description": "phi.resource.base",
        "isExtraImport": true,
        "detail": "phi.resource.base",
        "documentation": {}
    },
    {
        "label": "ResourceBase",
        "importPath": "phi.resource.base",
        "description": "phi.resource.base",
        "isExtraImport": true,
        "detail": "phi.resource.base",
        "documentation": {}
    },
    {
        "label": "ResourceBase",
        "importPath": "phi.resource.base",
        "description": "phi.resource.base",
        "isExtraImport": true,
        "detail": "phi.resource.base",
        "documentation": {}
    },
    {
        "label": "ResourceBase",
        "importPath": "phi.resource.base",
        "description": "phi.resource.base",
        "isExtraImport": true,
        "detail": "phi.resource.base",
        "documentation": {}
    },
    {
        "label": "AppBase",
        "importPath": "phi.app.base",
        "description": "phi.app.base",
        "isExtraImport": true,
        "detail": "phi.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.app.base",
        "description": "phi.app.base",
        "isExtraImport": true,
        "detail": "phi.app.base",
        "documentation": {}
    },
    {
        "label": "ResourceBase",
        "importPath": "phi.app.base",
        "description": "phi.app.base",
        "isExtraImport": true,
        "detail": "phi.app.base",
        "documentation": {}
    },
    {
        "label": "AppBase",
        "importPath": "phi.app.base",
        "description": "phi.app.base",
        "isExtraImport": true,
        "detail": "phi.app.base",
        "documentation": {}
    },
    {
        "label": "AppBase",
        "importPath": "phi.app.base",
        "description": "phi.app.base",
        "isExtraImport": true,
        "detail": "phi.app.base",
        "documentation": {}
    },
    {
        "label": "AppBase",
        "importPath": "phi.app.base",
        "description": "phi.app.base",
        "isExtraImport": true,
        "detail": "phi.app.base",
        "documentation": {}
    },
    {
        "label": "AppBase",
        "importPath": "phi.app.base",
        "description": "phi.app.base",
        "isExtraImport": true,
        "detail": "phi.app.base",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "FileIdNotSet",
        "importPath": "phi.assistant.openai.exceptions",
        "description": "phi.assistant.openai.exceptions",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.exceptions",
        "documentation": {}
    },
    {
        "label": "AssistantIdNotSet",
        "importPath": "phi.assistant.openai.exceptions",
        "description": "phi.assistant.openai.exceptions",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.exceptions",
        "documentation": {}
    },
    {
        "label": "ThreadIdNotSet",
        "importPath": "phi.assistant.openai.exceptions",
        "description": "phi.assistant.openai.exceptions",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.exceptions",
        "documentation": {}
    },
    {
        "label": "MessageIdNotSet",
        "importPath": "phi.assistant.openai.exceptions",
        "description": "phi.assistant.openai.exceptions",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.exceptions",
        "documentation": {}
    },
    {
        "label": "ThreadIdNotSet",
        "importPath": "phi.assistant.openai.exceptions",
        "description": "phi.assistant.openai.exceptions",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.exceptions",
        "documentation": {}
    },
    {
        "label": "AssistantIdNotSet",
        "importPath": "phi.assistant.openai.exceptions",
        "description": "phi.assistant.openai.exceptions",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.exceptions",
        "documentation": {}
    },
    {
        "label": "RunIdNotSet",
        "importPath": "phi.assistant.openai.exceptions",
        "description": "phi.assistant.openai.exceptions",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.exceptions",
        "documentation": {}
    },
    {
        "label": "ThreadIdNotSet",
        "importPath": "phi.assistant.openai.exceptions",
        "description": "phi.assistant.openai.exceptions",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.exceptions",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "phi.assistant.openai.file",
        "description": "phi.assistant.openai.file",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.file",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "phi.assistant.openai.file",
        "description": "phi.assistant.openai.file",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.file",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "phi.assistant.openai.file",
        "description": "phi.assistant.openai.file",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.file",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "phi.assistant.openai.file",
        "description": "phi.assistant.openai.file",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.file",
        "documentation": {}
    },
    {
        "label": "Function",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "Function",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "Function",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "Function",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "Function",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "Function",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "Function",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "importPath": "phi.tools.function",
        "description": "phi.tools.function",
        "isExtraImport": true,
        "detail": "phi.tools.function",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "OpenAIAssistant",
        "importPath": "phi.assistant.openai.assistant",
        "description": "phi.assistant.openai.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.assistant",
        "documentation": {}
    },
    {
        "label": "OpenAIAssistant",
        "importPath": "phi.assistant.openai.assistant",
        "description": "phi.assistant.openai.assistant",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.assistant",
        "documentation": {}
    },
    {
        "label": "get_function_call",
        "importPath": "phi.utils.functions",
        "description": "phi.utils.functions",
        "isExtraImport": true,
        "detail": "phi.utils.functions",
        "documentation": {}
    },
    {
        "label": "get_function_call",
        "importPath": "phi.utils.functions",
        "description": "phi.utils.functions",
        "isExtraImport": true,
        "detail": "phi.utils.functions",
        "documentation": {}
    },
    {
        "label": "get_function_call",
        "importPath": "phi.utils.functions",
        "description": "phi.utils.functions",
        "isExtraImport": true,
        "detail": "phi.utils.functions",
        "documentation": {}
    },
    {
        "label": "Run",
        "importPath": "phi.assistant.openai.run",
        "description": "phi.assistant.openai.run",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.run",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.assistant.openai.message",
        "description": "phi.assistant.openai.message",
        "isExtraImport": true,
        "detail": "phi.assistant.openai.message",
        "documentation": {}
    },
    {
        "label": "AssistantRun",
        "importPath": "phi.assistant.run",
        "description": "phi.assistant.run",
        "isExtraImport": true,
        "detail": "phi.assistant.run",
        "documentation": {}
    },
    {
        "label": "AssistantRun",
        "importPath": "phi.assistant.run",
        "description": "phi.assistant.run",
        "isExtraImport": true,
        "detail": "phi.assistant.run",
        "documentation": {}
    },
    {
        "label": "AssistantRun",
        "importPath": "phi.assistant.run",
        "description": "phi.assistant.run",
        "isExtraImport": true,
        "detail": "phi.assistant.run",
        "documentation": {}
    },
    {
        "label": "AssistantRun",
        "importPath": "phi.assistant.run",
        "description": "phi.assistant.run",
        "isExtraImport": true,
        "detail": "phi.assistant.run",
        "documentation": {}
    },
    {
        "label": "AssistantRun",
        "importPath": "phi.assistant.run",
        "description": "phi.assistant.run",
        "isExtraImport": true,
        "detail": "phi.assistant.run",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge.base",
        "description": "phi.knowledge.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge.base",
        "description": "phi.knowledge.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge.base",
        "description": "phi.knowledge.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge.base",
        "description": "phi.knowledge.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge.base",
        "description": "phi.knowledge.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge.base",
        "description": "phi.knowledge.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge.base",
        "description": "phi.knowledge.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge.base",
        "description": "phi.knowledge.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge.base",
        "description": "phi.knowledge.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge.base",
        "description": "phi.knowledge.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge.base",
        "description": "phi.knowledge.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge.base",
        "description": "phi.knowledge.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "importPath": "phi.knowledge.base",
        "description": "phi.knowledge.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "phi.llm.base",
        "description": "phi.llm.base",
        "isExtraImport": true,
        "detail": "phi.llm.base",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "phi.llm.message",
        "description": "phi.llm.message",
        "isExtraImport": true,
        "detail": "phi.llm.message",
        "documentation": {}
    },
    {
        "label": "References",
        "importPath": "phi.llm.references",
        "description": "phi.llm.references",
        "isExtraImport": true,
        "detail": "phi.llm.references",
        "documentation": {}
    },
    {
        "label": "References",
        "importPath": "phi.llm.references",
        "description": "phi.llm.references",
        "isExtraImport": true,
        "detail": "phi.llm.references",
        "documentation": {}
    },
    {
        "label": "AssistantMemory",
        "importPath": "phi.memory.assistant",
        "description": "phi.memory.assistant",
        "isExtraImport": true,
        "detail": "phi.memory.assistant",
        "documentation": {}
    },
    {
        "label": "MemoryRetrieval",
        "importPath": "phi.memory.assistant",
        "description": "phi.memory.assistant",
        "isExtraImport": true,
        "detail": "phi.memory.assistant",
        "documentation": {}
    },
    {
        "label": "Memory",
        "importPath": "phi.memory.assistant",
        "description": "phi.memory.assistant",
        "isExtraImport": true,
        "detail": "phi.memory.assistant",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "phi.prompt.template",
        "description": "phi.prompt.template",
        "isExtraImport": true,
        "detail": "phi.prompt.template",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "phi.prompt.template",
        "description": "phi.prompt.template",
        "isExtraImport": true,
        "detail": "phi.prompt.template",
        "documentation": {}
    },
    {
        "label": "AssistantStorage",
        "importPath": "phi.storage.assistant",
        "description": "phi.storage.assistant",
        "isExtraImport": true,
        "detail": "phi.storage.assistant",
        "documentation": {}
    },
    {
        "label": "remove_indent",
        "importPath": "phi.utils.format_str",
        "description": "phi.utils.format_str",
        "isExtraImport": true,
        "detail": "phi.utils.format_str",
        "documentation": {}
    },
    {
        "label": "get_text_from_message",
        "importPath": "phi.utils.message",
        "description": "phi.utils.message",
        "isExtraImport": true,
        "detail": "phi.utils.message",
        "documentation": {}
    },
    {
        "label": "get_text_from_message",
        "importPath": "phi.utils.message",
        "description": "phi.utils.message",
        "isExtraImport": true,
        "detail": "phi.utils.message",
        "documentation": {}
    },
    {
        "label": "merge_dictionaries",
        "importPath": "phi.utils.merge_dict",
        "description": "phi.utils.merge_dict",
        "isExtraImport": true,
        "detail": "phi.utils.merge_dict",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "phi.utils.timer",
        "description": "phi.utils.timer",
        "isExtraImport": true,
        "detail": "phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "phi.file",
        "description": "phi.file",
        "isExtraImport": true,
        "detail": "phi.file",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "phi.file",
        "description": "phi.file",
        "isExtraImport": true,
        "detail": "phi.file",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "phi.file",
        "description": "phi.file",
        "isExtraImport": true,
        "detail": "phi.file",
        "documentation": {}
    },
    {
        "label": "AwsApp",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "AwsApp",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "AwsBuildContext",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "AwsApp",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "AwsBuildContext",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "AwsApp",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "AwsApp",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "AwsBuildContext",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "AwsApp",
        "importPath": "phi.aws.app.base",
        "description": "phi.aws.app.base",
        "isExtraImport": true,
        "detail": "phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "AwsBuildContext",
        "importPath": "phi.aws.app.context",
        "description": "phi.aws.app.context",
        "isExtraImport": true,
        "detail": "phi.aws.app.context",
        "documentation": {}
    },
    {
        "label": "AwsBuildContext",
        "importPath": "phi.aws.app.context",
        "description": "phi.aws.app.context",
        "isExtraImport": true,
        "detail": "phi.aws.app.context",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "importPath": "phi.aws.api_client",
        "description": "phi.aws.api_client",
        "isExtraImport": true,
        "detail": "phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "importPath": "phi.aws.resource.base",
        "description": "phi.aws.resource.base",
        "isExtraImport": true,
        "detail": "phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_subheading",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "log_config_not_available_msg",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "log_active_workspace_not_available",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_available_workspaces",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_heading",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "log_config_not_available_msg",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "log_active_workspace_not_available",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_available_workspaces",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_heading",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_heading",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "console",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_heading",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "console",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_heading",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_subheading",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "log_config_not_available_msg",
        "importPath": "phi.cli.console",
        "description": "phi.cli.console",
        "isExtraImport": true,
        "detail": "phi.cli.console",
        "documentation": {}
    },
    {
        "label": "Subnet",
        "importPath": "phi.aws.resource.ec2.subnet",
        "description": "phi.aws.resource.ec2.subnet",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.subnet",
        "documentation": {}
    },
    {
        "label": "Subnet",
        "importPath": "phi.aws.resource.ec2.subnet",
        "description": "phi.aws.resource.ec2.subnet",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.subnet",
        "documentation": {}
    },
    {
        "label": "Subnet",
        "importPath": "phi.aws.resource.ec2.subnet",
        "description": "phi.aws.resource.ec2.subnet",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.subnet",
        "documentation": {}
    },
    {
        "label": "Subnet",
        "importPath": "phi.aws.resource.ec2.subnet",
        "description": "phi.aws.resource.ec2.subnet",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.subnet",
        "documentation": {}
    },
    {
        "label": "Subnet",
        "importPath": "phi.aws.resource.ec2.subnet",
        "description": "phi.aws.resource.ec2.subnet",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.subnet",
        "documentation": {}
    },
    {
        "label": "Subnet",
        "importPath": "phi.aws.resource.ec2.subnet",
        "description": "phi.aws.resource.ec2.subnet",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.subnet",
        "documentation": {}
    },
    {
        "label": "Subnet",
        "importPath": "phi.aws.resource.ec2.subnet",
        "description": "phi.aws.resource.ec2.subnet",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.subnet",
        "documentation": {}
    },
    {
        "label": "AwsReference",
        "importPath": "phi.aws.resource.reference",
        "description": "phi.aws.resource.reference",
        "isExtraImport": true,
        "detail": "phi.aws.resource.reference",
        "documentation": {}
    },
    {
        "label": "AwsReference",
        "importPath": "phi.aws.resource.reference",
        "description": "phi.aws.resource.reference",
        "isExtraImport": true,
        "detail": "phi.aws.resource.reference",
        "documentation": {}
    },
    {
        "label": "AwsReference",
        "importPath": "phi.aws.resource.reference",
        "description": "phi.aws.resource.reference",
        "isExtraImport": true,
        "detail": "phi.aws.resource.reference",
        "documentation": {}
    },
    {
        "label": "SecretsManager",
        "importPath": "phi.aws.resource.secret.manager",
        "description": "phi.aws.resource.secret.manager",
        "isExtraImport": true,
        "detail": "phi.aws.resource.secret.manager",
        "documentation": {}
    },
    {
        "label": "SecretsManager",
        "importPath": "phi.aws.resource.secret.manager",
        "description": "phi.aws.resource.secret.manager",
        "isExtraImport": true,
        "detail": "phi.aws.resource.secret.manager",
        "documentation": {}
    },
    {
        "label": "SecretsManager",
        "importPath": "phi.aws.resource.secret.manager",
        "description": "phi.aws.resource.secret.manager",
        "isExtraImport": true,
        "detail": "phi.aws.resource.secret.manager",
        "documentation": {}
    },
    {
        "label": "SecretsManager",
        "importPath": "phi.aws.resource.secret.manager",
        "description": "phi.aws.resource.secret.manager",
        "isExtraImport": true,
        "detail": "phi.aws.resource.secret.manager",
        "documentation": {}
    },
    {
        "label": "SecretsManager",
        "importPath": "phi.aws.resource.secret.manager",
        "description": "phi.aws.resource.secret.manager",
        "isExtraImport": true,
        "detail": "phi.aws.resource.secret.manager",
        "documentation": {}
    },
    {
        "label": "read_secrets",
        "importPath": "phi.aws.resource.secret.reader",
        "description": "phi.aws.resource.secret.reader",
        "isExtraImport": true,
        "detail": "phi.aws.resource.secret.reader",
        "documentation": {}
    },
    {
        "label": "SecurityGroup",
        "importPath": "phi.aws.resource.ec2.security_group",
        "description": "phi.aws.resource.ec2.security_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.security_group",
        "documentation": {}
    },
    {
        "label": "SecurityGroup",
        "importPath": "phi.aws.resource.ec2.security_group",
        "description": "phi.aws.resource.ec2.security_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.security_group",
        "documentation": {}
    },
    {
        "label": "SecurityGroup",
        "importPath": "phi.aws.resource.ec2.security_group",
        "description": "phi.aws.resource.ec2.security_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.security_group",
        "documentation": {}
    },
    {
        "label": "SecurityGroup",
        "importPath": "phi.aws.resource.ec2.security_group",
        "description": "phi.aws.resource.ec2.security_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.security_group",
        "documentation": {}
    },
    {
        "label": "SecurityGroup",
        "importPath": "phi.aws.resource.ec2.security_group",
        "description": "phi.aws.resource.ec2.security_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.security_group",
        "documentation": {}
    },
    {
        "label": "SecurityGroup",
        "importPath": "phi.aws.resource.ec2.security_group",
        "description": "phi.aws.resource.ec2.security_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.security_group",
        "documentation": {}
    },
    {
        "label": "EcsCluster",
        "importPath": "phi.aws.resource.ecs.cluster",
        "description": "phi.aws.resource.ecs.cluster",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ecs.cluster",
        "documentation": {}
    },
    {
        "label": "EcsCluster",
        "importPath": "phi.aws.resource.ecs.cluster",
        "description": "phi.aws.resource.ecs.cluster",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ecs.cluster",
        "documentation": {}
    },
    {
        "label": "EcsTaskDefinition",
        "importPath": "phi.aws.resource.ecs.task_definition",
        "description": "phi.aws.resource.ecs.task_definition",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ecs.task_definition",
        "documentation": {}
    },
    {
        "label": "EcsTaskDefinition",
        "importPath": "phi.aws.resource.ecs.task_definition",
        "description": "phi.aws.resource.ecs.task_definition",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ecs.task_definition",
        "documentation": {}
    },
    {
        "label": "TargetGroup",
        "importPath": "phi.aws.resource.elb.target_group",
        "description": "phi.aws.resource.elb.target_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.elb.target_group",
        "documentation": {}
    },
    {
        "label": "TargetGroup",
        "importPath": "phi.aws.resource.elb.target_group",
        "description": "phi.aws.resource.elb.target_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.elb.target_group",
        "documentation": {}
    },
    {
        "label": "TargetGroup",
        "importPath": "phi.aws.resource.elb.target_group",
        "description": "phi.aws.resource.elb.target_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.elb.target_group",
        "documentation": {}
    },
    {
        "label": "EcsContainer",
        "importPath": "phi.aws.resource.ecs.container",
        "description": "phi.aws.resource.ecs.container",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ecs.container",
        "documentation": {}
    },
    {
        "label": "EcsVolume",
        "importPath": "phi.aws.resource.ecs.volume",
        "description": "phi.aws.resource.ecs.volume",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ecs.volume",
        "documentation": {}
    },
    {
        "label": "IamRole",
        "importPath": "phi.aws.resource.iam.role",
        "description": "phi.aws.resource.iam.role",
        "isExtraImport": true,
        "detail": "phi.aws.resource.iam.role",
        "documentation": {}
    },
    {
        "label": "IamRole",
        "importPath": "phi.aws.resource.iam.role",
        "description": "phi.aws.resource.iam.role",
        "isExtraImport": true,
        "detail": "phi.aws.resource.iam.role",
        "documentation": {}
    },
    {
        "label": "IamRole",
        "importPath": "phi.aws.resource.iam.role",
        "description": "phi.aws.resource.iam.role",
        "isExtraImport": true,
        "detail": "phi.aws.resource.iam.role",
        "documentation": {}
    },
    {
        "label": "IamRole",
        "importPath": "phi.aws.resource.iam.role",
        "description": "phi.aws.resource.iam.role",
        "isExtraImport": true,
        "detail": "phi.aws.resource.iam.role",
        "documentation": {}
    },
    {
        "label": "IamRole",
        "importPath": "phi.aws.resource.iam.role",
        "description": "phi.aws.resource.iam.role",
        "isExtraImport": true,
        "detail": "phi.aws.resource.iam.role",
        "documentation": {}
    },
    {
        "label": "IamRole",
        "importPath": "phi.aws.resource.iam.role",
        "description": "phi.aws.resource.iam.role",
        "isExtraImport": true,
        "detail": "phi.aws.resource.iam.role",
        "documentation": {}
    },
    {
        "label": "IamRole",
        "importPath": "phi.aws.resource.iam.role",
        "description": "phi.aws.resource.iam.role",
        "isExtraImport": true,
        "detail": "phi.aws.resource.iam.role",
        "documentation": {}
    },
    {
        "label": "IamPolicy",
        "importPath": "phi.aws.resource.iam.policy",
        "description": "phi.aws.resource.iam.policy",
        "isExtraImport": true,
        "detail": "phi.aws.resource.iam.policy",
        "documentation": {}
    },
    {
        "label": "IamPolicy",
        "importPath": "phi.aws.resource.iam.policy",
        "description": "phi.aws.resource.iam.policy",
        "isExtraImport": true,
        "detail": "phi.aws.resource.iam.policy",
        "documentation": {}
    },
    {
        "label": "IamPolicy",
        "importPath": "phi.aws.resource.iam.policy",
        "description": "phi.aws.resource.iam.policy",
        "isExtraImport": true,
        "detail": "phi.aws.resource.iam.policy",
        "documentation": {}
    },
    {
        "label": "CloudFormationStack",
        "importPath": "phi.aws.resource.cloudformation.stack",
        "description": "phi.aws.resource.cloudformation.stack",
        "isExtraImport": true,
        "detail": "phi.aws.resource.cloudformation.stack",
        "documentation": {}
    },
    {
        "label": "CloudFormationStack",
        "importPath": "phi.aws.resource.cloudformation.stack",
        "description": "phi.aws.resource.cloudformation.stack",
        "isExtraImport": true,
        "detail": "phi.aws.resource.cloudformation.stack",
        "documentation": {}
    },
    {
        "label": "CloudFormationStack",
        "importPath": "phi.aws.resource.cloudformation.stack",
        "description": "phi.aws.resource.cloudformation.stack",
        "isExtraImport": true,
        "detail": "phi.aws.resource.cloudformation.stack",
        "documentation": {}
    },
    {
        "label": "CloudFormationStack",
        "importPath": "phi.aws.resource.cloudformation.stack",
        "description": "phi.aws.resource.cloudformation.stack",
        "isExtraImport": true,
        "detail": "phi.aws.resource.cloudformation.stack",
        "documentation": {}
    },
    {
        "label": "CloudFormationStack",
        "importPath": "phi.aws.resource.cloudformation.stack",
        "description": "phi.aws.resource.cloudformation.stack",
        "isExtraImport": true,
        "detail": "phi.aws.resource.cloudformation.stack",
        "documentation": {}
    },
    {
        "label": "CloudFormationStack",
        "importPath": "phi.aws.resource.cloudformation.stack",
        "description": "phi.aws.resource.cloudformation.stack",
        "isExtraImport": true,
        "detail": "phi.aws.resource.cloudformation.stack",
        "documentation": {}
    },
    {
        "label": "CloudFormationStack",
        "importPath": "phi.aws.resource.cloudformation.stack",
        "description": "phi.aws.resource.cloudformation.stack",
        "isExtraImport": true,
        "detail": "phi.aws.resource.cloudformation.stack",
        "documentation": {}
    },
    {
        "label": "EksAddon",
        "importPath": "phi.aws.resource.eks.addon",
        "description": "phi.aws.resource.eks.addon",
        "isExtraImport": true,
        "detail": "phi.aws.resource.eks.addon",
        "documentation": {}
    },
    {
        "label": "EksCluster",
        "importPath": "phi.aws.resource.eks.cluster",
        "description": "phi.aws.resource.eks.cluster",
        "isExtraImport": true,
        "detail": "phi.aws.resource.eks.cluster",
        "documentation": {}
    },
    {
        "label": "EksCluster",
        "importPath": "phi.aws.resource.eks.cluster",
        "description": "phi.aws.resource.eks.cluster",
        "isExtraImport": true,
        "detail": "phi.aws.resource.eks.cluster",
        "documentation": {}
    },
    {
        "label": "EksCluster",
        "importPath": "phi.aws.resource.eks.cluster",
        "description": "phi.aws.resource.eks.cluster",
        "isExtraImport": true,
        "detail": "phi.aws.resource.eks.cluster",
        "documentation": {}
    },
    {
        "label": "EksCluster",
        "importPath": "phi.aws.resource.eks.cluster",
        "description": "phi.aws.resource.eks.cluster",
        "isExtraImport": true,
        "detail": "phi.aws.resource.eks.cluster",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "importPath": "phi.k8s.enums.api_version",
        "description": "phi.k8s.enums.api_version",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "Kubeconfig",
        "importPath": "phi.k8s.resource.kubeconfig",
        "description": "phi.k8s.resource.kubeconfig",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.kubeconfig",
        "documentation": {}
    },
    {
        "label": "KubeconfigCluster",
        "importPath": "phi.k8s.resource.kubeconfig",
        "description": "phi.k8s.resource.kubeconfig",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.kubeconfig",
        "documentation": {}
    },
    {
        "label": "KubeconfigClusterConfig",
        "importPath": "phi.k8s.resource.kubeconfig",
        "description": "phi.k8s.resource.kubeconfig",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.kubeconfig",
        "documentation": {}
    },
    {
        "label": "KubeconfigContext",
        "importPath": "phi.k8s.resource.kubeconfig",
        "description": "phi.k8s.resource.kubeconfig",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.kubeconfig",
        "documentation": {}
    },
    {
        "label": "KubeconfigContextSpec",
        "importPath": "phi.k8s.resource.kubeconfig",
        "description": "phi.k8s.resource.kubeconfig",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.kubeconfig",
        "documentation": {}
    },
    {
        "label": "KubeconfigUser",
        "importPath": "phi.k8s.resource.kubeconfig",
        "description": "phi.k8s.resource.kubeconfig",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.kubeconfig",
        "documentation": {}
    },
    {
        "label": "CacheSubnetGroup",
        "importPath": "phi.aws.resource.elasticache.subnet_group",
        "description": "phi.aws.resource.elasticache.subnet_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.elasticache.subnet_group",
        "documentation": {}
    },
    {
        "label": "CacheSubnetGroup",
        "importPath": "phi.aws.resource.elasticache.subnet_group",
        "description": "phi.aws.resource.elasticache.subnet_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.elasticache.subnet_group",
        "documentation": {}
    },
    {
        "label": "AcmCertificate",
        "importPath": "phi.aws.resource.acm.certificate",
        "description": "phi.aws.resource.acm.certificate",
        "isExtraImport": true,
        "detail": "phi.aws.resource.acm.certificate",
        "documentation": {}
    },
    {
        "label": "AcmCertificate",
        "importPath": "phi.aws.resource.acm.certificate",
        "description": "phi.aws.resource.acm.certificate",
        "isExtraImport": true,
        "detail": "phi.aws.resource.acm.certificate",
        "documentation": {}
    },
    {
        "label": "LoadBalancer",
        "importPath": "phi.aws.resource.elb.load_balancer",
        "description": "phi.aws.resource.elb.load_balancer",
        "isExtraImport": true,
        "detail": "phi.aws.resource.elb.load_balancer",
        "documentation": {}
    },
    {
        "label": "LoadBalancer",
        "importPath": "phi.aws.resource.elb.load_balancer",
        "description": "phi.aws.resource.elb.load_balancer",
        "isExtraImport": true,
        "detail": "phi.aws.resource.elb.load_balancer",
        "documentation": {}
    },
    {
        "label": "S3Bucket",
        "importPath": "phi.aws.resource.s3.bucket",
        "description": "phi.aws.resource.s3.bucket",
        "isExtraImport": true,
        "detail": "phi.aws.resource.s3.bucket",
        "documentation": {}
    },
    {
        "label": "S3Bucket",
        "importPath": "phi.aws.resource.s3.bucket",
        "description": "phi.aws.resource.s3.bucket",
        "isExtraImport": true,
        "detail": "phi.aws.resource.s3.bucket",
        "documentation": {}
    },
    {
        "label": "S3Bucket",
        "importPath": "phi.aws.resource.s3.bucket",
        "description": "phi.aws.resource.s3.bucket",
        "isExtraImport": true,
        "detail": "phi.aws.resource.s3.bucket",
        "documentation": {}
    },
    {
        "label": "DbInstance",
        "importPath": "phi.aws.resource.rds.db_instance",
        "description": "phi.aws.resource.rds.db_instance",
        "isExtraImport": true,
        "detail": "phi.aws.resource.rds.db_instance",
        "documentation": {}
    },
    {
        "label": "DbInstance",
        "importPath": "phi.aws.resource.rds.db_instance",
        "description": "phi.aws.resource.rds.db_instance",
        "isExtraImport": true,
        "detail": "phi.aws.resource.rds.db_instance",
        "documentation": {}
    },
    {
        "label": "DbSubnetGroup",
        "importPath": "phi.aws.resource.rds.db_subnet_group",
        "description": "phi.aws.resource.rds.db_subnet_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.rds.db_subnet_group",
        "documentation": {}
    },
    {
        "label": "DbSubnetGroup",
        "importPath": "phi.aws.resource.rds.db_subnet_group",
        "description": "phi.aws.resource.rds.db_subnet_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.rds.db_subnet_group",
        "documentation": {}
    },
    {
        "label": "DbSubnetGroup",
        "importPath": "phi.aws.resource.rds.db_subnet_group",
        "description": "phi.aws.resource.rds.db_subnet_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.rds.db_subnet_group",
        "documentation": {}
    },
    {
        "label": "S3Object",
        "importPath": "phi.aws.resource.s3.object",
        "description": "phi.aws.resource.s3.object",
        "isExtraImport": true,
        "detail": "phi.aws.resource.s3.object",
        "documentation": {}
    },
    {
        "label": "S3Object",
        "importPath": "phi.aws.resource.s3.object",
        "description": "phi.aws.resource.s3.object",
        "isExtraImport": true,
        "detail": "phi.aws.resource.s3.object",
        "documentation": {}
    },
    {
        "label": "S3Object",
        "importPath": "phi.aws.resource.s3.object",
        "description": "phi.aws.resource.s3.object",
        "isExtraImport": true,
        "detail": "phi.aws.resource.s3.object",
        "documentation": {}
    },
    {
        "label": "S3Object",
        "importPath": "phi.aws.resource.s3.object",
        "description": "phi.aws.resource.s3.object",
        "isExtraImport": true,
        "detail": "phi.aws.resource.s3.object",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "EbsVolume",
        "importPath": "phi.aws.resource.ec2.volume",
        "description": "phi.aws.resource.ec2.volume",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ec2.volume",
        "documentation": {}
    },
    {
        "label": "EcsService",
        "importPath": "phi.aws.resource.ecs.service",
        "description": "phi.aws.resource.ecs.service",
        "isExtraImport": true,
        "detail": "phi.aws.resource.ecs.service",
        "documentation": {}
    },
    {
        "label": "EksFargateProfile",
        "importPath": "phi.aws.resource.eks.fargate_profile",
        "description": "phi.aws.resource.eks.fargate_profile",
        "isExtraImport": true,
        "detail": "phi.aws.resource.eks.fargate_profile",
        "documentation": {}
    },
    {
        "label": "EksNodeGroup",
        "importPath": "phi.aws.resource.eks.node_group",
        "description": "phi.aws.resource.eks.node_group",
        "isExtraImport": true,
        "detail": "phi.aws.resource.eks.node_group",
        "documentation": {}
    },
    {
        "label": "EksKubeconfig",
        "importPath": "phi.aws.resource.eks.kubeconfig",
        "description": "phi.aws.resource.eks.kubeconfig",
        "isExtraImport": true,
        "detail": "phi.aws.resource.eks.kubeconfig",
        "documentation": {}
    },
    {
        "label": "Listener",
        "importPath": "phi.aws.resource.elb.listener",
        "description": "phi.aws.resource.elb.listener",
        "isExtraImport": true,
        "detail": "phi.aws.resource.elb.listener",
        "documentation": {}
    },
    {
        "label": "GlueCrawler",
        "importPath": "phi.aws.resource.glue.crawler",
        "description": "phi.aws.resource.glue.crawler",
        "isExtraImport": true,
        "detail": "phi.aws.resource.glue.crawler",
        "documentation": {}
    },
    {
        "label": "EmrCluster",
        "importPath": "phi.aws.resource.emr.cluster",
        "description": "phi.aws.resource.emr.cluster",
        "isExtraImport": true,
        "detail": "phi.aws.resource.emr.cluster",
        "documentation": {}
    },
    {
        "label": "DbCluster",
        "importPath": "phi.aws.resource.rds.db_cluster",
        "description": "phi.aws.resource.rds.db_cluster",
        "isExtraImport": true,
        "detail": "phi.aws.resource.rds.db_cluster",
        "documentation": {}
    },
    {
        "label": "CacheCluster",
        "importPath": "phi.aws.resource.elasticache.cluster",
        "description": "phi.aws.resource.elasticache.cluster",
        "isExtraImport": true,
        "detail": "phi.aws.resource.elasticache.cluster",
        "documentation": {}
    },
    {
        "label": "AppGroup",
        "importPath": "phi.app.group",
        "description": "phi.app.group",
        "isExtraImport": true,
        "detail": "phi.app.group",
        "documentation": {}
    },
    {
        "label": "AppGroup",
        "importPath": "phi.app.group",
        "description": "phi.app.group",
        "isExtraImport": true,
        "detail": "phi.app.group",
        "documentation": {}
    },
    {
        "label": "AppGroup",
        "importPath": "phi.app.group",
        "description": "phi.app.group",
        "isExtraImport": true,
        "detail": "phi.app.group",
        "documentation": {}
    },
    {
        "label": "ResourceGroup",
        "importPath": "phi.resource.group",
        "description": "phi.resource.group",
        "isExtraImport": true,
        "detail": "phi.resource.group",
        "documentation": {}
    },
    {
        "label": "ResourceGroup",
        "importPath": "phi.resource.group",
        "description": "phi.resource.group",
        "isExtraImport": true,
        "detail": "phi.resource.group",
        "documentation": {}
    },
    {
        "label": "ResourceGroup",
        "importPath": "phi.resource.group",
        "description": "phi.resource.group",
        "isExtraImport": true,
        "detail": "phi.resource.group",
        "documentation": {}
    },
    {
        "label": "InfraResources",
        "importPath": "phi.infra.resources",
        "description": "phi.infra.resources",
        "isExtraImport": true,
        "detail": "phi.infra.resources",
        "documentation": {}
    },
    {
        "label": "InfraResources",
        "importPath": "phi.infra.resources",
        "description": "phi.infra.resources",
        "isExtraImport": true,
        "detail": "phi.infra.resources",
        "documentation": {}
    },
    {
        "label": "InfraResources",
        "importPath": "phi.infra.resources",
        "description": "phi.infra.resources",
        "isExtraImport": true,
        "detail": "phi.infra.resources",
        "documentation": {}
    },
    {
        "label": "InfraResources",
        "importPath": "phi.infra.resources",
        "description": "phi.infra.resources",
        "isExtraImport": true,
        "detail": "phi.infra.resources",
        "documentation": {}
    },
    {
        "label": "InfraResources",
        "importPath": "phi.infra.resources",
        "description": "phi.infra.resources",
        "isExtraImport": true,
        "detail": "phi.infra.resources",
        "documentation": {}
    },
    {
        "label": "InfraResources",
        "importPath": "phi.infra.resources",
        "description": "phi.infra.resources",
        "isExtraImport": true,
        "detail": "phi.infra.resources",
        "documentation": {}
    },
    {
        "label": "InfraResources",
        "importPath": "phi.infra.resources",
        "description": "phi.infra.resources",
        "isExtraImport": true,
        "detail": "phi.infra.resources",
        "documentation": {}
    },
    {
        "label": "InfraType",
        "importPath": "phi.infra.type",
        "description": "phi.infra.type",
        "isExtraImport": true,
        "detail": "phi.infra.type",
        "documentation": {}
    },
    {
        "label": "InfraType",
        "importPath": "phi.infra.type",
        "description": "phi.infra.type",
        "isExtraImport": true,
        "detail": "phi.infra.type",
        "documentation": {}
    },
    {
        "label": "InfraType",
        "importPath": "phi.infra.type",
        "description": "phi.infra.type",
        "isExtraImport": true,
        "detail": "phi.infra.type",
        "documentation": {}
    },
    {
        "label": "InfraType",
        "importPath": "phi.infra.type",
        "description": "phi.infra.type",
        "isExtraImport": true,
        "detail": "phi.infra.type",
        "documentation": {}
    },
    {
        "label": "InfraType",
        "importPath": "phi.infra.type",
        "description": "phi.infra.type",
        "isExtraImport": true,
        "detail": "phi.infra.type",
        "documentation": {}
    },
    {
        "label": "BaseHTTPRequestHandler",
        "importPath": "http.server",
        "description": "http.server",
        "isExtraImport": true,
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "HTTPServer",
        "importPath": "http.server",
        "description": "http.server",
        "isExtraImport": true,
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "read_json_file",
        "importPath": "phi.utils.json_io",
        "description": "phi.utils.json_io",
        "isExtraImport": true,
        "detail": "phi.utils.json_io",
        "documentation": {}
    },
    {
        "label": "write_json_file",
        "importPath": "phi.utils.json_io",
        "description": "phi.utils.json_io",
        "isExtraImport": true,
        "detail": "phi.utils.json_io",
        "documentation": {}
    },
    {
        "label": "read_json_file",
        "importPath": "phi.utils.json_io",
        "description": "phi.utils.json_io",
        "isExtraImport": true,
        "detail": "phi.utils.json_io",
        "documentation": {}
    },
    {
        "label": "write_json_file",
        "importPath": "phi.utils.json_io",
        "description": "phi.utils.json_io",
        "isExtraImport": true,
        "detail": "phi.utils.json_io",
        "documentation": {}
    },
    {
        "label": "WorkspaceConfig",
        "importPath": "phi.workspace.config",
        "description": "phi.workspace.config",
        "isExtraImport": true,
        "detail": "phi.workspace.config",
        "documentation": {}
    },
    {
        "label": "WorkspaceConfig",
        "importPath": "phi.workspace.config",
        "description": "phi.workspace.config",
        "isExtraImport": true,
        "detail": "phi.workspace.config",
        "documentation": {}
    },
    {
        "label": "WorkspaceConfig",
        "importPath": "phi.workspace.config",
        "description": "phi.workspace.config",
        "isExtraImport": true,
        "detail": "phi.workspace.config",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "rich.style",
        "description": "rich.style",
        "isExtraImport": true,
        "detail": "rich.style",
        "documentation": {}
    },
    {
        "label": "ws_cli",
        "importPath": "phi.cli.ws.ws_cli",
        "description": "phi.cli.ws.ws_cli",
        "isExtraImport": true,
        "detail": "phi.cli.ws.ws_cli",
        "documentation": {}
    },
    {
        "label": "k_cli",
        "importPath": "phi.cli.k.k_cli",
        "description": "phi.cli.k.k_cli",
        "isExtraImport": true,
        "detail": "phi.cli.k.k_cli",
        "documentation": {}
    },
    {
        "label": "metadata",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "importPath": "phi.docker.app.base",
        "description": "phi.docker.app.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DbApp",
        "importPath": "phi.app.db_app",
        "description": "phi.app.db_app",
        "isExtraImport": true,
        "detail": "phi.app.db_app",
        "documentation": {}
    },
    {
        "label": "DbApp",
        "importPath": "phi.app.db_app",
        "description": "phi.app.db_app",
        "isExtraImport": true,
        "detail": "phi.app.db_app",
        "documentation": {}
    },
    {
        "label": "DbApp",
        "importPath": "phi.app.db_app",
        "description": "phi.app.db_app",
        "isExtraImport": true,
        "detail": "phi.app.db_app",
        "documentation": {}
    },
    {
        "label": "DbApp",
        "importPath": "phi.app.db_app",
        "description": "phi.app.db_app",
        "isExtraImport": true,
        "detail": "phi.app.db_app",
        "documentation": {}
    },
    {
        "label": "DbApp",
        "importPath": "phi.app.db_app",
        "description": "phi.app.db_app",
        "isExtraImport": true,
        "detail": "phi.app.db_app",
        "documentation": {}
    },
    {
        "label": "DbApp",
        "importPath": "phi.app.db_app",
        "description": "phi.app.db_app",
        "isExtraImport": true,
        "detail": "phi.app.db_app",
        "documentation": {}
    },
    {
        "label": "DbApp",
        "importPath": "phi.app.db_app",
        "description": "phi.app.db_app",
        "isExtraImport": true,
        "detail": "phi.app.db_app",
        "documentation": {}
    },
    {
        "label": "DbApp",
        "importPath": "phi.app.db_app",
        "description": "phi.app.db_app",
        "isExtraImport": true,
        "detail": "phi.app.db_app",
        "documentation": {}
    },
    {
        "label": "DbApp",
        "importPath": "phi.app.db_app",
        "description": "phi.app.db_app",
        "isExtraImport": true,
        "detail": "phi.app.db_app",
        "documentation": {}
    },
    {
        "label": "AirflowBase",
        "importPath": "phi.docker.app.airflow.base",
        "description": "phi.docker.app.airflow.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.airflow.base",
        "documentation": {}
    },
    {
        "label": "AirflowBase",
        "importPath": "phi.docker.app.airflow.base",
        "description": "phi.docker.app.airflow.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.airflow.base",
        "documentation": {}
    },
    {
        "label": "AirflowBase",
        "importPath": "phi.docker.app.airflow.base",
        "description": "phi.docker.app.airflow.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.airflow.base",
        "documentation": {}
    },
    {
        "label": "AirflowBase",
        "importPath": "phi.docker.app.airflow.base",
        "description": "phi.docker.app.airflow.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.airflow.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.docker.app.airflow.base",
        "description": "phi.docker.app.airflow.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.airflow.base",
        "documentation": {}
    },
    {
        "label": "PostgresDb",
        "importPath": "phi.docker.app.postgres.postgres",
        "description": "phi.docker.app.postgres.postgres",
        "isExtraImport": true,
        "detail": "phi.docker.app.postgres.postgres",
        "documentation": {}
    },
    {
        "label": "SupersetBase",
        "importPath": "phi.docker.app.superset.base",
        "description": "phi.docker.app.superset.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.superset.base",
        "documentation": {}
    },
    {
        "label": "SupersetBase",
        "importPath": "phi.docker.app.superset.base",
        "description": "phi.docker.app.superset.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.superset.base",
        "documentation": {}
    },
    {
        "label": "SupersetBase",
        "importPath": "phi.docker.app.superset.base",
        "description": "phi.docker.app.superset.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.superset.base",
        "documentation": {}
    },
    {
        "label": "SupersetBase",
        "importPath": "phi.docker.app.superset.base",
        "description": "phi.docker.app.superset.base",
        "isExtraImport": true,
        "detail": "phi.docker.app.superset.base",
        "documentation": {}
    },
    {
        "label": "DockerBuildContext",
        "importPath": "phi.docker.app.context",
        "description": "phi.docker.app.context",
        "isExtraImport": true,
        "detail": "phi.docker.app.context",
        "documentation": {}
    },
    {
        "label": "DockerBuildContext",
        "importPath": "phi.docker.app.context",
        "description": "phi.docker.app.context",
        "isExtraImport": true,
        "detail": "phi.docker.app.context",
        "documentation": {}
    },
    {
        "label": "DockerApiClient",
        "importPath": "phi.docker.api_client",
        "description": "phi.docker.api_client",
        "isExtraImport": true,
        "detail": "phi.docker.api_client",
        "documentation": {}
    },
    {
        "label": "DockerApiClient",
        "importPath": "phi.docker.api_client",
        "description": "phi.docker.api_client",
        "isExtraImport": true,
        "detail": "phi.docker.api_client",
        "documentation": {}
    },
    {
        "label": "DockerApiClient",
        "importPath": "phi.docker.api_client",
        "description": "phi.docker.api_client",
        "isExtraImport": true,
        "detail": "phi.docker.api_client",
        "documentation": {}
    },
    {
        "label": "DockerApiClient",
        "importPath": "phi.docker.api_client",
        "description": "phi.docker.api_client",
        "isExtraImport": true,
        "detail": "phi.docker.api_client",
        "documentation": {}
    },
    {
        "label": "DockerApiClient",
        "importPath": "phi.docker.api_client",
        "description": "phi.docker.api_client",
        "isExtraImport": true,
        "detail": "phi.docker.api_client",
        "documentation": {}
    },
    {
        "label": "DockerApiClient",
        "importPath": "phi.docker.api_client",
        "description": "phi.docker.api_client",
        "isExtraImport": true,
        "detail": "phi.docker.api_client",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "perf_counter",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "DockerResource",
        "importPath": "phi.docker.resource.base",
        "description": "phi.docker.resource.base",
        "isExtraImport": true,
        "detail": "phi.docker.resource.base",
        "documentation": {}
    },
    {
        "label": "DockerResource",
        "importPath": "phi.docker.resource.base",
        "description": "phi.docker.resource.base",
        "isExtraImport": true,
        "detail": "phi.docker.resource.base",
        "documentation": {}
    },
    {
        "label": "DockerResource",
        "importPath": "phi.docker.resource.base",
        "description": "phi.docker.resource.base",
        "isExtraImport": true,
        "detail": "phi.docker.resource.base",
        "documentation": {}
    },
    {
        "label": "DockerResource",
        "importPath": "phi.docker.resource.base",
        "description": "phi.docker.resource.base",
        "isExtraImport": true,
        "detail": "phi.docker.resource.base",
        "documentation": {}
    },
    {
        "label": "DockerResource",
        "importPath": "phi.docker.resource.base",
        "description": "phi.docker.resource.base",
        "isExtraImport": true,
        "detail": "phi.docker.resource.base",
        "documentation": {}
    },
    {
        "label": "DockerResource",
        "importPath": "phi.docker.resource.base",
        "description": "phi.docker.resource.base",
        "isExtraImport": true,
        "detail": "phi.docker.resource.base",
        "documentation": {}
    },
    {
        "label": "DockerNetwork",
        "importPath": "phi.docker.resource.network",
        "description": "phi.docker.resource.network",
        "isExtraImport": true,
        "detail": "phi.docker.resource.network",
        "documentation": {}
    },
    {
        "label": "DockerImage",
        "importPath": "phi.docker.resource.image",
        "description": "phi.docker.resource.image",
        "isExtraImport": true,
        "detail": "phi.docker.resource.image",
        "documentation": {}
    },
    {
        "label": "DockerContainer",
        "importPath": "phi.docker.resource.container",
        "description": "phi.docker.resource.container",
        "isExtraImport": true,
        "detail": "phi.docker.resource.container",
        "documentation": {}
    },
    {
        "label": "DockerVolume",
        "importPath": "phi.docker.resource.volume",
        "description": "phi.docker.resource.volume",
        "isExtraImport": true,
        "detail": "phi.docker.resource.volume",
        "documentation": {}
    },
    {
        "label": "WorkspaceSettings",
        "importPath": "phi.workspace.settings",
        "description": "phi.workspace.settings",
        "isExtraImport": true,
        "detail": "phi.workspace.settings",
        "documentation": {}
    },
    {
        "label": "WorkspaceSettings",
        "importPath": "phi.workspace.settings",
        "description": "phi.workspace.settings",
        "isExtraImport": true,
        "detail": "phi.workspace.settings",
        "documentation": {}
    },
    {
        "label": "WorkspaceSettings",
        "importPath": "phi.workspace.settings",
        "description": "phi.workspace.settings",
        "isExtraImport": true,
        "detail": "phi.workspace.settings",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document.base",
        "description": "phi.document.base",
        "isExtraImport": true,
        "detail": "phi.document.base",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document.base",
        "description": "phi.document.base",
        "isExtraImport": true,
        "detail": "phi.document.base",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document.base",
        "description": "phi.document.base",
        "isExtraImport": true,
        "detail": "phi.document.base",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document.base",
        "description": "phi.document.base",
        "isExtraImport": true,
        "detail": "phi.document.base",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document.base",
        "description": "phi.document.base",
        "isExtraImport": true,
        "detail": "phi.document.base",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document.base",
        "description": "phi.document.base",
        "isExtraImport": true,
        "detail": "phi.document.base",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document.base",
        "description": "phi.document.base",
        "isExtraImport": true,
        "detail": "phi.document.base",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document.base",
        "description": "phi.document.base",
        "isExtraImport": true,
        "detail": "phi.document.base",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document.base",
        "description": "phi.document.base",
        "isExtraImport": true,
        "detail": "phi.document.base",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "phi.document.base",
        "description": "phi.document.base",
        "isExtraImport": true,
        "detail": "phi.document.base",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "phi.document.reader.base",
        "description": "phi.document.reader.base",
        "isExtraImport": true,
        "detail": "phi.document.reader.base",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "phi.document.reader.base",
        "description": "phi.document.reader.base",
        "isExtraImport": true,
        "detail": "phi.document.reader.base",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "phi.document.reader.base",
        "description": "phi.document.reader.base",
        "isExtraImport": true,
        "detail": "phi.document.reader.base",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "phi.document.reader.base",
        "description": "phi.document.reader.base",
        "isExtraImport": true,
        "detail": "phi.document.reader.base",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "phi.document.reader.base",
        "description": "phi.document.reader.base",
        "isExtraImport": true,
        "detail": "phi.document.reader.base",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "phi.document.reader.base",
        "description": "phi.document.reader.base",
        "isExtraImport": true,
        "detail": "phi.document.reader.base",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "phi.document.reader.base",
        "description": "phi.document.reader.base",
        "isExtraImport": true,
        "detail": "phi.document.reader.base",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "phi.document.reader.base",
        "description": "phi.document.reader.base",
        "isExtraImport": true,
        "detail": "phi.document.reader.base",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "phi.document.reader.base",
        "description": "phi.document.reader.base",
        "isExtraImport": true,
        "detail": "phi.document.reader.base",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "phi.document.reader.base",
        "description": "phi.document.reader.base",
        "isExtraImport": true,
        "detail": "phi.document.reader.base",
        "documentation": {}
    },
    {
        "label": "FirecrawlApp",
        "importPath": "firecrawl",
        "description": "firecrawl",
        "isExtraImport": true,
        "detail": "firecrawl",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "urllib.parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "Embedder",
        "importPath": "phi.embedder",
        "description": "phi.embedder",
        "isExtraImport": true,
        "detail": "phi.embedder",
        "documentation": {}
    },
    {
        "label": "Embedder",
        "importPath": "phi.embedder",
        "description": "phi.embedder",
        "isExtraImport": true,
        "detail": "phi.embedder",
        "documentation": {}
    },
    {
        "label": "Embedder",
        "importPath": "phi.embedder",
        "description": "phi.embedder",
        "isExtraImport": true,
        "detail": "phi.embedder",
        "documentation": {}
    },
    {
        "label": "Embedder",
        "importPath": "phi.embedder",
        "description": "phi.embedder",
        "isExtraImport": true,
        "detail": "phi.embedder",
        "documentation": {}
    },
    {
        "label": "Embedder",
        "importPath": "phi.embedder",
        "description": "phi.embedder",
        "isExtraImport": true,
        "detail": "phi.embedder",
        "documentation": {}
    },
    {
        "label": "Embedder",
        "importPath": "phi.embedder",
        "description": "phi.embedder",
        "isExtraImport": true,
        "detail": "phi.embedder",
        "documentation": {}
    },
    {
        "label": "Embedder",
        "importPath": "phi.embedder",
        "description": "phi.embedder",
        "isExtraImport": true,
        "detail": "phi.embedder",
        "documentation": {}
    },
    {
        "label": "Embedder",
        "importPath": "phi.embedder.base",
        "description": "phi.embedder.base",
        "isExtraImport": true,
        "detail": "phi.embedder.base",
        "documentation": {}
    },
    {
        "label": "Embedder",
        "importPath": "phi.embedder.base",
        "description": "phi.embedder.base",
        "isExtraImport": true,
        "detail": "phi.embedder.base",
        "documentation": {}
    },
    {
        "label": "Embedder",
        "importPath": "phi.embedder.base",
        "description": "phi.embedder.base",
        "isExtraImport": true,
        "detail": "phi.embedder.base",
        "documentation": {}
    },
    {
        "label": "Embedder",
        "importPath": "phi.embedder.base",
        "description": "phi.embedder.base",
        "isExtraImport": true,
        "detail": "phi.embedder.base",
        "documentation": {}
    },
    {
        "label": "K8sApp",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "AppVolumeType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ContainerContext",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "ServiceType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    RestartPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ImagePullPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "K8sApp",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "AppVolumeType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ContainerContext",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "ServiceType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    RestartPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ImagePullPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "K8sApp",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "AppVolumeType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "ServiceType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    RestartPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ImagePullPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "K8sApp",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "AppVolumeType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "ServiceType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    RestartPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ImagePullPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "K8sApp",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "AppVolumeType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "ServiceType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    RestartPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ImagePullPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "K8sApp",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "AppVolumeType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ContainerContext",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "ServiceType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    RestartPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ImagePullPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "K8sApp",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "AppVolumeType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ContainerContext",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "ServiceType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    RestartPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ImagePullPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "K8sApp",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "AppVolumeType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ContainerContext",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ServiceType",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "RestartPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ImagePullPolicy",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    LoadBalancerProvider",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "# noqa: F401",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "K8sApp",
        "importPath": "phi.k8s.app.base",
        "description": "phi.k8s.app.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "AirflowBase",
        "importPath": "phi.k8s.app.airflow.base",
        "description": "phi.k8s.app.airflow.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.airflow.base",
        "documentation": {}
    },
    {
        "label": "AirflowBase",
        "importPath": "phi.k8s.app.airflow.base",
        "description": "phi.k8s.app.airflow.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.airflow.base",
        "documentation": {}
    },
    {
        "label": "AirflowBase",
        "importPath": "phi.k8s.app.airflow.base",
        "description": "phi.k8s.app.airflow.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.airflow.base",
        "documentation": {}
    },
    {
        "label": "AirflowBase",
        "importPath": "phi.k8s.app.airflow.base",
        "description": "phi.k8s.app.airflow.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.airflow.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "importPath": "phi.k8s.app.airflow.base",
        "description": "phi.k8s.app.airflow.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.airflow.base",
        "documentation": {}
    },
    {
        "label": "PostgresDb",
        "importPath": "phi.k8s.app.postgres.postgres",
        "description": "phi.k8s.app.postgres.postgres",
        "isExtraImport": true,
        "detail": "phi.k8s.app.postgres.postgres",
        "documentation": {}
    },
    {
        "label": "SupersetBase",
        "importPath": "phi.k8s.app.superset.base",
        "description": "phi.k8s.app.superset.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.superset.base",
        "documentation": {}
    },
    {
        "label": "SupersetBase",
        "importPath": "phi.k8s.app.superset.base",
        "description": "phi.k8s.app.superset.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.superset.base",
        "documentation": {}
    },
    {
        "label": "SupersetBase",
        "importPath": "phi.k8s.app.superset.base",
        "description": "phi.k8s.app.superset.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.superset.base",
        "documentation": {}
    },
    {
        "label": "SupersetBase",
        "importPath": "phi.k8s.app.superset.base",
        "description": "phi.k8s.app.superset.base",
        "isExtraImport": true,
        "detail": "phi.k8s.app.superset.base",
        "documentation": {}
    },
    {
        "label": "CreateCustomResourceDefinition",
        "importPath": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "isExtraImport": true,
        "detail": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "CustomResourceDefinitionNames",
        "importPath": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "isExtraImport": true,
        "detail": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "CustomResourceDefinitionVersion",
        "importPath": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "isExtraImport": true,
        "detail": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "V1JSONSchemaProps",
        "importPath": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "isExtraImport": true,
        "detail": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "CreateCustomResourceDefinition",
        "importPath": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "isExtraImport": true,
        "detail": "phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "ingressroute_crd",
        "importPath": "phi.k8s.app.traefik.crds",
        "description": "phi.k8s.app.traefik.crds",
        "isExtraImport": true,
        "detail": "phi.k8s.app.traefik.crds",
        "documentation": {}
    },
    {
        "label": "middleware_crd",
        "importPath": "phi.k8s.app.traefik.crds",
        "description": "phi.k8s.app.traefik.crds",
        "isExtraImport": true,
        "detail": "phi.k8s.app.traefik.crds",
        "documentation": {}
    },
    {
        "label": "K8sBuildContext",
        "importPath": "phi.k8s.app.context",
        "description": "phi.k8s.app.context",
        "isExtraImport": true,
        "detail": "phi.k8s.app.context",
        "documentation": {}
    },
    {
        "label": "K8sBuildContext",
        "importPath": "phi.k8s.app.context",
        "description": "phi.k8s.app.context",
        "isExtraImport": true,
        "detail": "phi.k8s.app.context",
        "documentation": {}
    },
    {
        "label": "RestartPolicy",
        "importPath": "phi.k8s.enums.restart_policy",
        "description": "phi.k8s.enums.restart_policy",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.restart_policy",
        "documentation": {}
    },
    {
        "label": "RestartPolicy",
        "importPath": "phi.k8s.enums.restart_policy",
        "description": "phi.k8s.enums.restart_policy",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.restart_policy",
        "documentation": {}
    },
    {
        "label": "RestartPolicy",
        "importPath": "phi.k8s.enums.restart_policy",
        "description": "phi.k8s.enums.restart_policy",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.restart_policy",
        "documentation": {}
    },
    {
        "label": "ImagePullPolicy",
        "importPath": "phi.k8s.enums.image_pull_policy",
        "description": "phi.k8s.enums.image_pull_policy",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.image_pull_policy",
        "documentation": {}
    },
    {
        "label": "ImagePullPolicy",
        "importPath": "phi.k8s.enums.image_pull_policy",
        "description": "phi.k8s.enums.image_pull_policy",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.image_pull_policy",
        "documentation": {}
    },
    {
        "label": "ImagePullPolicy",
        "importPath": "phi.k8s.enums.image_pull_policy",
        "description": "phi.k8s.enums.image_pull_policy",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.image_pull_policy",
        "documentation": {}
    },
    {
        "label": "ServiceType",
        "importPath": "phi.k8s.enums.service_type",
        "description": "phi.k8s.enums.service_type",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.service_type",
        "documentation": {}
    },
    {
        "label": "ServiceType",
        "importPath": "phi.k8s.enums.service_type",
        "description": "phi.k8s.enums.service_type",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.service_type",
        "documentation": {}
    },
    {
        "label": "ServiceType",
        "importPath": "phi.k8s.enums.service_type",
        "description": "phi.k8s.enums.service_type",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.service_type",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sObject",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sObject",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "importPath": "phi.k8s.create.base",
        "description": "phi.k8s.create.base",
        "isExtraImport": true,
        "detail": "phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Kind",
        "importPath": "phi.k8s.enums.kind",
        "description": "phi.k8s.enums.kind",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "CustomObject",
        "importPath": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_object",
        "description": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_object",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_object",
        "documentation": {}
    },
    {
        "label": "CustomObject",
        "importPath": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_object",
        "description": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_object",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_object",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "importPath": "phi.k8s.create.common.labels",
        "description": "phi.k8s.create.common.labels",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "importPath": "phi.k8s.resource.meta.v1.object_meta",
        "description": "phi.k8s.resource.meta.v1.object_meta",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "CustomResourceDefinition",
        "importPath": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "CustomResourceDefinitionSpec",
        "importPath": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "CustomResourceDefinitionNames",
        "importPath": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "CustomResourceDefinitionVersion",
        "importPath": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "V1JSONSchemaProps",
        "importPath": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "# noqa: F401",
        "importPath": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "CustomResourceDefinition",
        "importPath": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "CreateContainer",
        "importPath": "phi.k8s.create.core.v1.container",
        "description": "phi.k8s.create.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.create.core.v1.container",
        "documentation": {}
    },
    {
        "label": "CreateVolume",
        "importPath": "phi.k8s.create.core.v1.volume",
        "description": "phi.k8s.create.core.v1.volume",
        "isExtraImport": true,
        "detail": "phi.k8s.create.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "CreateVolume",
        "importPath": "phi.k8s.create.core.v1.volume",
        "description": "phi.k8s.create.core.v1.volume",
        "isExtraImport": true,
        "detail": "phi.k8s.create.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "Deployment",
        "importPath": "phi.k8s.resource.apps.v1.deployment",
        "description": "phi.k8s.resource.apps.v1.deployment",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apps.v1.deployment",
        "documentation": {}
    },
    {
        "label": "DeploymentSpec",
        "importPath": "phi.k8s.resource.apps.v1.deployment",
        "description": "phi.k8s.resource.apps.v1.deployment",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apps.v1.deployment",
        "documentation": {}
    },
    {
        "label": "LabelSelector",
        "importPath": "phi.k8s.resource.apps.v1.deployment",
        "description": "phi.k8s.resource.apps.v1.deployment",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apps.v1.deployment",
        "documentation": {}
    },
    {
        "label": "PodTemplateSpec",
        "importPath": "phi.k8s.resource.apps.v1.deployment",
        "description": "phi.k8s.resource.apps.v1.deployment",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apps.v1.deployment",
        "documentation": {}
    },
    {
        "label": "Deployment",
        "importPath": "phi.k8s.resource.apps.v1.deployment",
        "description": "phi.k8s.resource.apps.v1.deployment",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apps.v1.deployment",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "phi.k8s.resource.core.v1.container",
        "description": "phi.k8s.resource.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "phi.k8s.resource.core.v1.container",
        "description": "phi.k8s.resource.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "ContainerPort",
        "importPath": "phi.k8s.resource.core.v1.container",
        "description": "phi.k8s.resource.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "EnvFromSource",
        "importPath": "phi.k8s.resource.core.v1.container",
        "description": "phi.k8s.resource.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "VolumeMount",
        "importPath": "phi.k8s.resource.core.v1.container",
        "description": "phi.k8s.resource.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "ConfigMapEnvSource",
        "importPath": "phi.k8s.resource.core.v1.container",
        "description": "phi.k8s.resource.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "SecretEnvSource",
        "importPath": "phi.k8s.resource.core.v1.container",
        "description": "phi.k8s.resource.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "EnvVar",
        "importPath": "phi.k8s.resource.core.v1.container",
        "description": "phi.k8s.resource.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "EnvVarSource",
        "importPath": "phi.k8s.resource.core.v1.container",
        "description": "phi.k8s.resource.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "ConfigMapKeySelector",
        "importPath": "phi.k8s.resource.core.v1.container",
        "description": "phi.k8s.resource.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "SecretKeySelector",
        "importPath": "phi.k8s.resource.core.v1.container",
        "description": "phi.k8s.resource.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "phi.k8s.resource.core.v1.container",
        "description": "phi.k8s.resource.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "phi.k8s.resource.core.v1.container",
        "description": "phi.k8s.resource.core.v1.container",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "PodSpec",
        "importPath": "phi.k8s.resource.core.v1.pod_spec",
        "description": "phi.k8s.resource.core.v1.pod_spec",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.pod_spec",
        "documentation": {}
    },
    {
        "label": "PodSpec",
        "importPath": "phi.k8s.resource.core.v1.pod_spec",
        "description": "phi.k8s.resource.core.v1.pod_spec",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.pod_spec",
        "documentation": {}
    },
    {
        "label": "Volume",
        "importPath": "phi.k8s.resource.core.v1.volume",
        "description": "phi.k8s.resource.core.v1.volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "Volume",
        "importPath": "phi.k8s.resource.core.v1.volume",
        "description": "phi.k8s.resource.core.v1.volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "AwsElasticBlockStoreVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume",
        "description": "phi.k8s.resource.core.v1.volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "PersistentVolumeClaimVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume",
        "description": "phi.k8s.resource.core.v1.volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "GcePersistentDiskVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume",
        "description": "phi.k8s.resource.core.v1.volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "SecretVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume",
        "description": "phi.k8s.resource.core.v1.volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "EmptyDirVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume",
        "description": "phi.k8s.resource.core.v1.volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "ConfigMapVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume",
        "description": "phi.k8s.resource.core.v1.volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "GitRepoVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume",
        "description": "phi.k8s.resource.core.v1.volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "HostPathVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume",
        "description": "phi.k8s.resource.core.v1.volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "Volume",
        "importPath": "phi.k8s.resource.core.v1.volume",
        "description": "phi.k8s.resource.core.v1.volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "TopologySpreadConstraint",
        "importPath": "phi.k8s.resource.core.v1.topology_spread_constraints",
        "description": "phi.k8s.resource.core.v1.topology_spread_constraints",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.topology_spread_constraints",
        "documentation": {}
    },
    {
        "label": "TopologySpreadConstraint",
        "importPath": "phi.k8s.resource.core.v1.topology_spread_constraints",
        "description": "phi.k8s.resource.core.v1.topology_spread_constraints",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.topology_spread_constraints",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "phi.k8s.enums.protocol",
        "description": "phi.k8s.enums.protocol",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.protocol",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "phi.k8s.enums.protocol",
        "description": "phi.k8s.enums.protocol",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.protocol",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "phi.k8s.enums.protocol",
        "description": "phi.k8s.enums.protocol",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.protocol",
        "documentation": {}
    },
    {
        "label": "ConfigMap",
        "importPath": "phi.k8s.resource.core.v1.config_map",
        "description": "phi.k8s.resource.core.v1.config_map",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.config_map",
        "documentation": {}
    },
    {
        "label": "ConfigMap",
        "importPath": "phi.k8s.resource.core.v1.config_map",
        "description": "phi.k8s.resource.core.v1.config_map",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.config_map",
        "documentation": {}
    },
    {
        "label": "CreatePort",
        "importPath": "phi.k8s.create.common.port",
        "description": "phi.k8s.create.common.port",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.port",
        "documentation": {}
    },
    {
        "label": "CreatePort",
        "importPath": "phi.k8s.create.common.port",
        "description": "phi.k8s.create.common.port",
        "isExtraImport": true,
        "detail": "phi.k8s.create.common.port",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "phi.k8s.resource.core.v1.namespace",
        "description": "phi.k8s.resource.core.v1.namespace",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.namespace",
        "documentation": {}
    },
    {
        "label": "NamespaceSpec",
        "importPath": "phi.k8s.resource.core.v1.namespace",
        "description": "phi.k8s.resource.core.v1.namespace",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.namespace",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "phi.k8s.resource.core.v1.namespace",
        "description": "phi.k8s.resource.core.v1.namespace",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.namespace",
        "documentation": {}
    },
    {
        "label": "get_default_ns_name",
        "importPath": "phi.utils.defaults",
        "description": "phi.utils.defaults",
        "isExtraImport": true,
        "detail": "phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_sa_name",
        "importPath": "phi.utils.defaults",
        "description": "phi.utils.defaults",
        "isExtraImport": true,
        "detail": "phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "PVAccessMode",
        "importPath": "phi.k8s.enums.pv",
        "description": "phi.k8s.enums.pv",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.pv",
        "documentation": {}
    },
    {
        "label": "PVAccessMode",
        "importPath": "phi.k8s.enums.pv",
        "description": "phi.k8s.enums.pv",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.pv",
        "documentation": {}
    },
    {
        "label": "PVAccessMode",
        "importPath": "phi.k8s.enums.pv",
        "description": "phi.k8s.enums.pv",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.pv",
        "documentation": {}
    },
    {
        "label": "PVAccessMode",
        "importPath": "phi.k8s.enums.pv",
        "description": "phi.k8s.enums.pv",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.pv",
        "documentation": {}
    },
    {
        "label": "VolumeType",
        "importPath": "phi.k8s.enums.volume_type",
        "description": "phi.k8s.enums.volume_type",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.volume_type",
        "documentation": {}
    },
    {
        "label": "VolumeType",
        "importPath": "phi.k8s.enums.volume_type",
        "description": "phi.k8s.enums.volume_type",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.volume_type",
        "documentation": {}
    },
    {
        "label": "PersistentVolume",
        "importPath": "phi.k8s.resource.core.v1.persistent_volume",
        "description": "phi.k8s.resource.core.v1.persistent_volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.persistent_volume",
        "documentation": {}
    },
    {
        "label": "PersistentVolumeSpec",
        "importPath": "phi.k8s.resource.core.v1.persistent_volume",
        "description": "phi.k8s.resource.core.v1.persistent_volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.persistent_volume",
        "documentation": {}
    },
    {
        "label": "VolumeNodeAffinity",
        "importPath": "phi.k8s.resource.core.v1.persistent_volume",
        "description": "phi.k8s.resource.core.v1.persistent_volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.persistent_volume",
        "documentation": {}
    },
    {
        "label": "GcePersistentDiskVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.persistent_volume",
        "description": "phi.k8s.resource.core.v1.persistent_volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.persistent_volume",
        "documentation": {}
    },
    {
        "label": "LocalVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.persistent_volume",
        "description": "phi.k8s.resource.core.v1.persistent_volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.persistent_volume",
        "documentation": {}
    },
    {
        "label": "HostPathVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.persistent_volume",
        "description": "phi.k8s.resource.core.v1.persistent_volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.persistent_volume",
        "documentation": {}
    },
    {
        "label": "NFSVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.persistent_volume",
        "description": "phi.k8s.resource.core.v1.persistent_volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.persistent_volume",
        "documentation": {}
    },
    {
        "label": "ClaimRef",
        "importPath": "phi.k8s.resource.core.v1.persistent_volume",
        "description": "phi.k8s.resource.core.v1.persistent_volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.persistent_volume",
        "documentation": {}
    },
    {
        "label": "PersistentVolume",
        "importPath": "phi.k8s.resource.core.v1.persistent_volume",
        "description": "phi.k8s.resource.core.v1.persistent_volume",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.persistent_volume",
        "documentation": {}
    },
    {
        "label": "PersistentVolumeClaim",
        "importPath": "phi.k8s.resource.core.v1.persistent_volume_claim",
        "description": "phi.k8s.resource.core.v1.persistent_volume_claim",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.persistent_volume_claim",
        "documentation": {}
    },
    {
        "label": "PersistentVolumeClaimSpec",
        "importPath": "phi.k8s.resource.core.v1.persistent_volume_claim",
        "description": "phi.k8s.resource.core.v1.persistent_volume_claim",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.persistent_volume_claim",
        "documentation": {}
    },
    {
        "label": "PersistentVolumeClaim",
        "importPath": "phi.k8s.resource.core.v1.persistent_volume_claim",
        "description": "phi.k8s.resource.core.v1.persistent_volume_claim",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.persistent_volume_claim",
        "documentation": {}
    },
    {
        "label": "ResourceRequirements",
        "importPath": "phi.k8s.resource.core.v1.resource_requirements",
        "description": "phi.k8s.resource.core.v1.resource_requirements",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.resource_requirements",
        "documentation": {}
    },
    {
        "label": "ResourceRequirements",
        "importPath": "phi.k8s.resource.core.v1.resource_requirements",
        "description": "phi.k8s.resource.core.v1.resource_requirements",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.resource_requirements",
        "documentation": {}
    },
    {
        "label": "ResourceRequirements",
        "importPath": "phi.k8s.resource.core.v1.resource_requirements",
        "description": "phi.k8s.resource.core.v1.resource_requirements",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.resource_requirements",
        "documentation": {}
    },
    {
        "label": "Secret",
        "importPath": "phi.k8s.resource.core.v1.secret",
        "description": "phi.k8s.resource.core.v1.secret",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.secret",
        "documentation": {}
    },
    {
        "label": "Secret",
        "importPath": "phi.k8s.resource.core.v1.secret",
        "description": "phi.k8s.resource.core.v1.secret",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.secret",
        "documentation": {}
    },
    {
        "label": "CreateDeployment",
        "importPath": "phi.k8s.create.apps.v1.deployment",
        "description": "phi.k8s.create.apps.v1.deployment",
        "isExtraImport": true,
        "detail": "phi.k8s.create.apps.v1.deployment",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "phi.k8s.resource.core.v1.service",
        "description": "phi.k8s.resource.core.v1.service",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.service",
        "documentation": {}
    },
    {
        "label": "ServicePort",
        "importPath": "phi.k8s.resource.core.v1.service",
        "description": "phi.k8s.resource.core.v1.service",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.service",
        "documentation": {}
    },
    {
        "label": "ServiceSpec",
        "importPath": "phi.k8s.resource.core.v1.service",
        "description": "phi.k8s.resource.core.v1.service",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "phi.k8s.resource.core.v1.service",
        "description": "phi.k8s.resource.core.v1.service",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.service",
        "documentation": {}
    },
    {
        "label": "ServiceAccount",
        "importPath": "phi.k8s.resource.core.v1.service_account",
        "description": "phi.k8s.resource.core.v1.service_account",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.service_account",
        "documentation": {}
    },
    {
        "label": "LocalObjectReference",
        "importPath": "phi.k8s.resource.core.v1.service_account",
        "description": "phi.k8s.resource.core.v1.service_account",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.service_account",
        "documentation": {}
    },
    {
        "label": "ObjectReference",
        "importPath": "phi.k8s.resource.core.v1.service_account",
        "description": "phi.k8s.resource.core.v1.service_account",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.service_account",
        "documentation": {}
    },
    {
        "label": "ServiceAccount",
        "importPath": "phi.k8s.resource.core.v1.service_account",
        "description": "phi.k8s.resource.core.v1.service_account",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.service_account",
        "documentation": {}
    },
    {
        "label": "ApiGroup",
        "importPath": "phi.k8s.enums.api_group",
        "description": "phi.k8s.enums.api_group",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_group",
        "documentation": {}
    },
    {
        "label": "ApiGroup",
        "importPath": "phi.k8s.enums.api_group",
        "description": "phi.k8s.enums.api_group",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_group",
        "documentation": {}
    },
    {
        "label": "ApiGroup",
        "importPath": "phi.k8s.enums.api_group",
        "description": "phi.k8s.enums.api_group",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.api_group",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "description": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "documentation": {}
    },
    {
        "label": "RoleRef",
        "importPath": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "description": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "documentation": {}
    },
    {
        "label": "ClusterRoleBinding",
        "importPath": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "description": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "description": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "documentation": {}
    },
    {
        "label": "RoleRef",
        "importPath": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "description": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "documentation": {}
    },
    {
        "label": "ClusterRoleBinding",
        "importPath": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "description": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "documentation": {}
    },
    {
        "label": "ClusterRoleBinding",
        "importPath": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "description": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "documentation": {}
    },
    {
        "label": "Ingress",
        "importPath": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "description": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "IngressSpec",
        "importPath": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "description": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "V1IngressBackend",
        "importPath": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "description": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "V1IngressTLS",
        "importPath": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "description": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "V1IngressRule",
        "importPath": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "description": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "ClusterRole",
        "importPath": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "description": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "documentation": {}
    },
    {
        "label": "PolicyRule",
        "importPath": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "description": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "documentation": {}
    },
    {
        "label": "ClusterRole",
        "importPath": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "description": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "documentation": {}
    },
    {
        "label": "StorageClassType",
        "importPath": "phi.k8s.enums.storage_class",
        "description": "phi.k8s.enums.storage_class",
        "isExtraImport": true,
        "detail": "phi.k8s.enums.storage_class",
        "documentation": {}
    },
    {
        "label": "StorageClass",
        "importPath": "phi.k8s.resource.storage_k8s_io.v1.storage_class",
        "description": "phi.k8s.resource.storage_k8s_io.v1.storage_class",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.storage_k8s_io.v1.storage_class",
        "documentation": {}
    },
    {
        "label": "StorageClass",
        "importPath": "phi.k8s.resource.storage_k8s_io.v1.storage_class",
        "description": "phi.k8s.resource.storage_k8s_io.v1.storage_class",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.storage_k8s_io.v1.storage_class",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "importPath": "phi.k8s.resource.base",
        "description": "phi.k8s.resource.base",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "ExtendedEnum",
        "importPath": "phi.utils.enum",
        "description": "phi.utils.enum",
        "isExtraImport": true,
        "detail": "phi.utils.enum",
        "documentation": {}
    },
    {
        "label": "ExtendedEnum",
        "importPath": "phi.utils.enum",
        "description": "phi.utils.enum",
        "isExtraImport": true,
        "detail": "phi.utils.enum",
        "documentation": {}
    },
    {
        "label": "ExtendedEnum",
        "importPath": "phi.utils.enum",
        "description": "phi.utils.enum",
        "isExtraImport": true,
        "detail": "phi.utils.enum",
        "documentation": {}
    },
    {
        "label": "ExtendedEnum",
        "importPath": "phi.utils.enum",
        "description": "phi.utils.enum",
        "isExtraImport": true,
        "detail": "phi.utils.enum",
        "documentation": {}
    },
    {
        "label": "ExtendedEnum",
        "importPath": "phi.utils.enum",
        "description": "phi.utils.enum",
        "isExtraImport": true,
        "detail": "phi.utils.enum",
        "documentation": {}
    },
    {
        "label": "ExtendedEnum",
        "importPath": "phi.utils.enum",
        "description": "phi.utils.enum",
        "isExtraImport": true,
        "detail": "phi.utils.enum",
        "documentation": {}
    },
    {
        "label": "ExtendedEnum",
        "importPath": "phi.utils.enum",
        "description": "phi.utils.enum",
        "isExtraImport": true,
        "detail": "phi.utils.enum",
        "documentation": {}
    },
    {
        "label": "ExtendedEnum",
        "importPath": "phi.utils.enum",
        "description": "phi.utils.enum",
        "isExtraImport": true,
        "detail": "phi.utils.enum",
        "documentation": {}
    },
    {
        "label": "ExtendedEnum",
        "importPath": "phi.utils.enum",
        "description": "phi.utils.enum",
        "isExtraImport": true,
        "detail": "phi.utils.enum",
        "documentation": {}
    },
    {
        "label": "ExtendedEnum",
        "importPath": "phi.utils.enum",
        "description": "phi.utils.enum",
        "isExtraImport": true,
        "detail": "phi.utils.enum",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "importPath": "phi.k8s.api_client",
        "description": "phi.k8s.api_client",
        "isExtraImport": true,
        "detail": "phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "DEFAULT_K8S_NAMESPACE",
        "importPath": "phi.k8s.constants",
        "description": "phi.k8s.constants",
        "isExtraImport": true,
        "detail": "phi.k8s.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_K8S_NAMESPACE",
        "importPath": "phi.k8s.constants",
        "description": "phi.k8s.constants",
        "isExtraImport": true,
        "detail": "phi.k8s.constants",
        "documentation": {}
    },
    {
        "label": "run_shell_command",
        "importPath": "phi.k8s.helm.cli",
        "description": "phi.k8s.helm.cli",
        "isExtraImport": true,
        "detail": "phi.k8s.helm.cli",
        "documentation": {}
    },
    {
        "label": "run",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "CompletedProcess",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "CustomObjectsApi",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "ApiextensionsV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "AppsV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "CoreV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "CoreV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "CoreV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "CoreV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "CoreV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "CoreV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "CoreV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "CoreV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "NetworkingV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "RbacAuthorizationV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "RbacAuthorizationV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "StorageV1Api",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "V1DeleteOptions",
        "importPath": "kubernetes.client.models.v1_delete_options",
        "description": "kubernetes.client.models.v1_delete_options",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_delete_options",
        "documentation": {}
    },
    {
        "label": "V1CustomResourceDefinition",
        "importPath": "kubernetes.client.models.v1_custom_resource_definition",
        "description": "kubernetes.client.models.v1_custom_resource_definition",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "V1CustomResourceDefinitionList",
        "importPath": "kubernetes.client.models.v1_custom_resource_definition_list",
        "description": "kubernetes.client.models.v1_custom_resource_definition_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_custom_resource_definition_list",
        "documentation": {}
    },
    {
        "label": "V1CustomResourceDefinitionNames",
        "importPath": "kubernetes.client.models.v1_custom_resource_definition_names",
        "description": "kubernetes.client.models.v1_custom_resource_definition_names",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_custom_resource_definition_names",
        "documentation": {}
    },
    {
        "label": "V1CustomResourceDefinitionSpec",
        "importPath": "kubernetes.client.models.v1_custom_resource_definition_spec",
        "description": "kubernetes.client.models.v1_custom_resource_definition_spec",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_custom_resource_definition_spec",
        "documentation": {}
    },
    {
        "label": "V1CustomResourceDefinitionVersion",
        "importPath": "kubernetes.client.models.v1_custom_resource_definition_version",
        "description": "kubernetes.client.models.v1_custom_resource_definition_version",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_custom_resource_definition_version",
        "documentation": {}
    },
    {
        "label": "V1CustomResourceValidation",
        "importPath": "kubernetes.client.models.v1_custom_resource_validation",
        "description": "kubernetes.client.models.v1_custom_resource_validation",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_custom_resource_validation",
        "documentation": {}
    },
    {
        "label": "V1JSONSchemaProps",
        "importPath": "kubernetes.client.models.v1_json_schema_props",
        "description": "kubernetes.client.models.v1_json_schema_props",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_json_schema_props",
        "documentation": {}
    },
    {
        "label": "V1Status",
        "importPath": "kubernetes.client.models.v1_status",
        "description": "kubernetes.client.models.v1_status",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_status",
        "documentation": {}
    },
    {
        "label": "V1Status",
        "importPath": "kubernetes.client.models.v1_status",
        "description": "kubernetes.client.models.v1_status",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_status",
        "documentation": {}
    },
    {
        "label": "V1Status",
        "importPath": "kubernetes.client.models.v1_status",
        "description": "kubernetes.client.models.v1_status",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_status",
        "documentation": {}
    },
    {
        "label": "V1Status",
        "importPath": "kubernetes.client.models.v1_status",
        "description": "kubernetes.client.models.v1_status",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_status",
        "documentation": {}
    },
    {
        "label": "V1Status",
        "importPath": "kubernetes.client.models.v1_status",
        "description": "kubernetes.client.models.v1_status",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_status",
        "documentation": {}
    },
    {
        "label": "V1Status",
        "importPath": "kubernetes.client.models.v1_status",
        "description": "kubernetes.client.models.v1_status",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_status",
        "documentation": {}
    },
    {
        "label": "V1Status",
        "importPath": "kubernetes.client.models.v1_status",
        "description": "kubernetes.client.models.v1_status",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_status",
        "documentation": {}
    },
    {
        "label": "V1Status",
        "importPath": "kubernetes.client.models.v1_status",
        "description": "kubernetes.client.models.v1_status",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_status",
        "documentation": {}
    },
    {
        "label": "V1Status",
        "importPath": "kubernetes.client.models.v1_status",
        "description": "kubernetes.client.models.v1_status",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_status",
        "documentation": {}
    },
    {
        "label": "V1Status",
        "importPath": "kubernetes.client.models.v1_status",
        "description": "kubernetes.client.models.v1_status",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_status",
        "documentation": {}
    },
    {
        "label": "V1Status",
        "importPath": "kubernetes.client.models.v1_status",
        "description": "kubernetes.client.models.v1_status",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_status",
        "documentation": {}
    },
    {
        "label": "V1Status",
        "importPath": "kubernetes.client.models.v1_status",
        "description": "kubernetes.client.models.v1_status",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_status",
        "documentation": {}
    },
    {
        "label": "V1Deployment",
        "importPath": "kubernetes.client.models.v1_deployment",
        "description": "kubernetes.client.models.v1_deployment",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_deployment",
        "documentation": {}
    },
    {
        "label": "V1DeploymentList",
        "importPath": "kubernetes.client.models.v1_deployment_list",
        "description": "kubernetes.client.models.v1_deployment_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_deployment_list",
        "documentation": {}
    },
    {
        "label": "V1DeploymentSpec",
        "importPath": "kubernetes.client.models.v1_deployment_spec",
        "description": "kubernetes.client.models.v1_deployment_spec",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_deployment_spec",
        "documentation": {}
    },
    {
        "label": "DeploymentStrategy",
        "importPath": "phi.k8s.resource.apps.v1.deployment_strategy",
        "description": "phi.k8s.resource.apps.v1.deployment_strategy",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.apps.v1.deployment_strategy",
        "documentation": {}
    },
    {
        "label": "PodTemplateSpec",
        "importPath": "phi.k8s.resource.core.v1.pod_template_spec",
        "description": "phi.k8s.resource.core.v1.pod_template_spec",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.pod_template_spec",
        "documentation": {}
    },
    {
        "label": "LabelSelector",
        "importPath": "phi.k8s.resource.meta.v1.label_selector",
        "description": "phi.k8s.resource.meta.v1.label_selector",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.label_selector",
        "documentation": {}
    },
    {
        "label": "LabelSelector",
        "importPath": "phi.k8s.resource.meta.v1.label_selector",
        "description": "phi.k8s.resource.meta.v1.label_selector",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.meta.v1.label_selector",
        "documentation": {}
    },
    {
        "label": "current_datetime_utc_str",
        "importPath": "phi.utils.dttm",
        "description": "phi.utils.dttm",
        "isExtraImport": true,
        "detail": "phi.utils.dttm",
        "documentation": {}
    },
    {
        "label": "current_datetime",
        "importPath": "phi.utils.dttm",
        "description": "phi.utils.dttm",
        "isExtraImport": true,
        "detail": "phi.utils.dttm",
        "documentation": {}
    },
    {
        "label": "V1DeploymentStrategy",
        "importPath": "kubernetes.client.models.v1_deployment_strategy",
        "description": "kubernetes.client.models.v1_deployment_strategy",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_deployment_strategy",
        "documentation": {}
    },
    {
        "label": "V1RollingUpdateDeployment",
        "importPath": "kubernetes.client.models.v1_rolling_update_deployment",
        "description": "kubernetes.client.models.v1_rolling_update_deployment",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_rolling_update_deployment",
        "documentation": {}
    },
    {
        "label": "V1ConfigMap",
        "importPath": "kubernetes.client.models.v1_config_map",
        "description": "kubernetes.client.models.v1_config_map",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_config_map",
        "documentation": {}
    },
    {
        "label": "V1ConfigMapList",
        "importPath": "kubernetes.client.models.v1_config_map_list",
        "description": "kubernetes.client.models.v1_config_map_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_config_map_list",
        "documentation": {}
    },
    {
        "label": "V1ConfigMapEnvSource",
        "importPath": "kubernetes.client.models.v1_config_map_env_source",
        "description": "kubernetes.client.models.v1_config_map_env_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_config_map_env_source",
        "documentation": {}
    },
    {
        "label": "V1ConfigMapKeySelector",
        "importPath": "kubernetes.client.models.v1_config_map_key_selector",
        "description": "kubernetes.client.models.v1_config_map_key_selector",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_config_map_key_selector",
        "documentation": {}
    },
    {
        "label": "V1Container",
        "importPath": "kubernetes.client.models.v1_container",
        "description": "kubernetes.client.models.v1_container",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_container",
        "documentation": {}
    },
    {
        "label": "V1Container",
        "importPath": "kubernetes.client.models.v1_container",
        "description": "kubernetes.client.models.v1_container",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_container",
        "documentation": {}
    },
    {
        "label": "V1ContainerPort",
        "importPath": "kubernetes.client.models.v1_container_port",
        "description": "kubernetes.client.models.v1_container_port",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_container_port",
        "documentation": {}
    },
    {
        "label": "V1EnvFromSource",
        "importPath": "kubernetes.client.models.v1_env_from_source",
        "description": "kubernetes.client.models.v1_env_from_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_env_from_source",
        "documentation": {}
    },
    {
        "label": "V1EnvVar",
        "importPath": "kubernetes.client.models.v1_env_var",
        "description": "kubernetes.client.models.v1_env_var",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_env_var",
        "documentation": {}
    },
    {
        "label": "V1EnvVarSource",
        "importPath": "kubernetes.client.models.v1_env_var_source",
        "description": "kubernetes.client.models.v1_env_var_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_env_var_source",
        "documentation": {}
    },
    {
        "label": "V1ObjectFieldSelector",
        "importPath": "kubernetes.client.models.v1_object_field_selector",
        "description": "kubernetes.client.models.v1_object_field_selector",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_object_field_selector",
        "documentation": {}
    },
    {
        "label": "V1Probe",
        "importPath": "kubernetes.client.models.v1_probe",
        "description": "kubernetes.client.models.v1_probe",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_probe",
        "documentation": {}
    },
    {
        "label": "V1ResourceFieldSelector",
        "importPath": "kubernetes.client.models.v1_resource_field_selector",
        "description": "kubernetes.client.models.v1_resource_field_selector",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_resource_field_selector",
        "documentation": {}
    },
    {
        "label": "V1SecretEnvSource",
        "importPath": "kubernetes.client.models.v1_secret_env_source",
        "description": "kubernetes.client.models.v1_secret_env_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_secret_env_source",
        "documentation": {}
    },
    {
        "label": "V1SecretKeySelector",
        "importPath": "kubernetes.client.models.v1_secret_key_selector",
        "description": "kubernetes.client.models.v1_secret_key_selector",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_secret_key_selector",
        "documentation": {}
    },
    {
        "label": "V1VolumeMount",
        "importPath": "kubernetes.client.models.v1_volume_mount",
        "description": "kubernetes.client.models.v1_volume_mount",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_volume_mount",
        "documentation": {}
    },
    {
        "label": "V1LocalObjectReference",
        "importPath": "kubernetes.client.models.v1_local_object_reference",
        "description": "kubernetes.client.models.v1_local_object_reference",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_local_object_reference",
        "documentation": {}
    },
    {
        "label": "V1Namespace",
        "importPath": "kubernetes.client.models.v1_namespace",
        "description": "kubernetes.client.models.v1_namespace",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_namespace",
        "documentation": {}
    },
    {
        "label": "V1NamespaceSpec",
        "importPath": "kubernetes.client.models.v1_namespace_spec",
        "description": "kubernetes.client.models.v1_namespace_spec",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_namespace_spec",
        "documentation": {}
    },
    {
        "label": "V1NamespaceList",
        "importPath": "kubernetes.client.models.v1_namespace_list",
        "description": "kubernetes.client.models.v1_namespace_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_namespace_list",
        "documentation": {}
    },
    {
        "label": "V1NodeSelector",
        "importPath": "kubernetes.client.models.v1_node_selector",
        "description": "kubernetes.client.models.v1_node_selector",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_node_selector",
        "documentation": {}
    },
    {
        "label": "V1NodeSelectorTerm",
        "importPath": "kubernetes.client.models.v1_node_selector_term",
        "description": "kubernetes.client.models.v1_node_selector_term",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_node_selector_term",
        "documentation": {}
    },
    {
        "label": "V1NodeSelectorRequirement",
        "importPath": "kubernetes.client.models.v1_node_selector_requirement",
        "description": "kubernetes.client.models.v1_node_selector_requirement",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_node_selector_requirement",
        "documentation": {}
    },
    {
        "label": "V1ObjectReference",
        "importPath": "kubernetes.client.models.v1_object_reference",
        "description": "kubernetes.client.models.v1_object_reference",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_object_reference",
        "documentation": {}
    },
    {
        "label": "V1ObjectReference",
        "importPath": "kubernetes.client.models.v1_object_reference",
        "description": "kubernetes.client.models.v1_object_reference",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_object_reference",
        "documentation": {}
    },
    {
        "label": "V1PersistentVolume",
        "importPath": "kubernetes.client.models.v1_persistent_volume",
        "description": "kubernetes.client.models.v1_persistent_volume",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_persistent_volume",
        "documentation": {}
    },
    {
        "label": "V1PersistentVolumeList",
        "importPath": "kubernetes.client.models.v1_persistent_volume_list",
        "description": "kubernetes.client.models.v1_persistent_volume_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_persistent_volume_list",
        "documentation": {}
    },
    {
        "label": "V1PersistentVolumeSpec",
        "importPath": "kubernetes.client.models.v1_persistent_volume_spec",
        "description": "kubernetes.client.models.v1_persistent_volume_spec",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_persistent_volume_spec",
        "documentation": {}
    },
    {
        "label": "GcePersistentDiskVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume_source",
        "description": "phi.k8s.resource.core.v1.volume_source",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "LocalVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume_source",
        "description": "phi.k8s.resource.core.v1.volume_source",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "HostPathVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume_source",
        "description": "phi.k8s.resource.core.v1.volume_source",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "NFSVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume_source",
        "description": "phi.k8s.resource.core.v1.volume_source",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "ClaimRef",
        "importPath": "phi.k8s.resource.core.v1.volume_source",
        "description": "phi.k8s.resource.core.v1.volume_source",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "AwsElasticBlockStoreVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume_source",
        "description": "phi.k8s.resource.core.v1.volume_source",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "ConfigMapVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume_source",
        "description": "phi.k8s.resource.core.v1.volume_source",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "EmptyDirVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume_source",
        "description": "phi.k8s.resource.core.v1.volume_source",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "GcePersistentDiskVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume_source",
        "description": "phi.k8s.resource.core.v1.volume_source",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "GitRepoVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume_source",
        "description": "phi.k8s.resource.core.v1.volume_source",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "PersistentVolumeClaimVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume_source",
        "description": "phi.k8s.resource.core.v1.volume_source",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "SecretVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume_source",
        "description": "phi.k8s.resource.core.v1.volume_source",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "HostPathVolumeSource",
        "importPath": "phi.k8s.resource.core.v1.volume_source",
        "description": "phi.k8s.resource.core.v1.volume_source",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "VolumeNodeAffinity",
        "importPath": "phi.k8s.resource.core.v1.volume_node_affinity",
        "description": "phi.k8s.resource.core.v1.volume_node_affinity",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.volume_node_affinity",
        "documentation": {}
    },
    {
        "label": "V1PersistentVolumeClaim",
        "importPath": "kubernetes.client.models.v1_persistent_volume_claim",
        "description": "kubernetes.client.models.v1_persistent_volume_claim",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_persistent_volume_claim",
        "documentation": {}
    },
    {
        "label": "V1PersistentVolumeClaimList",
        "importPath": "kubernetes.client.models.v1_persistent_volume_claim_list",
        "description": "kubernetes.client.models.v1_persistent_volume_claim_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_persistent_volume_claim_list",
        "documentation": {}
    },
    {
        "label": "V1PersistentVolumeClaimSpec",
        "importPath": "kubernetes.client.models.v1_persistent_volume_claim_spec",
        "description": "kubernetes.client.models.v1_persistent_volume_claim_spec",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_persistent_volume_claim_spec",
        "documentation": {}
    },
    {
        "label": "V1Pod",
        "importPath": "kubernetes.client.models.v1_pod",
        "description": "kubernetes.client.models.v1_pod",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_pod",
        "documentation": {}
    },
    {
        "label": "V1PodList",
        "importPath": "kubernetes.client.models.v1_pod_list",
        "description": "kubernetes.client.models.v1_pod_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_pod_list",
        "documentation": {}
    },
    {
        "label": "V1PodSpec",
        "importPath": "kubernetes.client.models.v1_pod_spec",
        "description": "kubernetes.client.models.v1_pod_spec",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_pod_spec",
        "documentation": {}
    },
    {
        "label": "V1Volume",
        "importPath": "kubernetes.client.models.v1_volume",
        "description": "kubernetes.client.models.v1_volume",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_volume",
        "documentation": {}
    },
    {
        "label": "V1Volume",
        "importPath": "kubernetes.client.models.v1_volume",
        "description": "kubernetes.client.models.v1_volume",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_volume",
        "documentation": {}
    },
    {
        "label": "Toleration",
        "importPath": "phi.k8s.resource.core.v1.toleration",
        "description": "phi.k8s.resource.core.v1.toleration",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.toleration",
        "documentation": {}
    },
    {
        "label": "LocalObjectReference",
        "importPath": "phi.k8s.resource.core.v1.local_object_reference",
        "description": "phi.k8s.resource.core.v1.local_object_reference",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.local_object_reference",
        "documentation": {}
    },
    {
        "label": "LocalObjectReference",
        "importPath": "phi.k8s.resource.core.v1.local_object_reference",
        "description": "phi.k8s.resource.core.v1.local_object_reference",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.local_object_reference",
        "documentation": {}
    },
    {
        "label": "V1PodTemplateSpec",
        "importPath": "kubernetes.client.models.v1_pod_template_spec",
        "description": "kubernetes.client.models.v1_pod_template_spec",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_pod_template_spec",
        "documentation": {}
    },
    {
        "label": "V1ResourceRequirements",
        "importPath": "kubernetes.client.models.v1_resource_requirements",
        "description": "kubernetes.client.models.v1_resource_requirements",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_resource_requirements",
        "documentation": {}
    },
    {
        "label": "V1Secret",
        "importPath": "kubernetes.client.models.v1_secret",
        "description": "kubernetes.client.models.v1_secret",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_secret",
        "documentation": {}
    },
    {
        "label": "V1SecretList",
        "importPath": "kubernetes.client.models.v1_secret_list",
        "description": "kubernetes.client.models.v1_secret_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_secret_list",
        "documentation": {}
    },
    {
        "label": "V1Service",
        "importPath": "kubernetes.client.models.v1_service",
        "description": "kubernetes.client.models.v1_service",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_service",
        "documentation": {}
    },
    {
        "label": "V1ServiceList",
        "importPath": "kubernetes.client.models.v1_service_list",
        "description": "kubernetes.client.models.v1_service_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_service_list",
        "documentation": {}
    },
    {
        "label": "V1ServicePort",
        "importPath": "kubernetes.client.models.v1_service_port",
        "description": "kubernetes.client.models.v1_service_port",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_service_port",
        "documentation": {}
    },
    {
        "label": "V1ServiceSpec",
        "importPath": "kubernetes.client.models.v1_service_spec",
        "description": "kubernetes.client.models.v1_service_spec",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_service_spec",
        "documentation": {}
    },
    {
        "label": "V1ServiceStatus",
        "importPath": "kubernetes.client.models.v1_service_status",
        "description": "kubernetes.client.models.v1_service_status",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_service_status",
        "documentation": {}
    },
    {
        "label": "V1ServiceAccount",
        "importPath": "kubernetes.client.models.v1_service_account",
        "description": "kubernetes.client.models.v1_service_account",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_service_account",
        "documentation": {}
    },
    {
        "label": "V1ServiceAccountList",
        "importPath": "kubernetes.client.models.v1_service_account_list",
        "description": "kubernetes.client.models.v1_service_account_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_service_account_list",
        "documentation": {}
    },
    {
        "label": "ObjectReference",
        "importPath": "phi.k8s.resource.core.v1.object_reference",
        "description": "phi.k8s.resource.core.v1.object_reference",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.object_reference",
        "documentation": {}
    },
    {
        "label": "V1Toleration",
        "importPath": "kubernetes.client.models.v1_toleration",
        "description": "kubernetes.client.models.v1_toleration",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_toleration",
        "documentation": {}
    },
    {
        "label": "V1TopologySpreadConstraint",
        "importPath": "kubernetes.client.models.v1_topology_spread_constraint",
        "description": "kubernetes.client.models.v1_topology_spread_constraint",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_topology_spread_constraint",
        "documentation": {}
    },
    {
        "label": "V1VolumeNodeAffinity",
        "importPath": "kubernetes.client.models.v1_volume_node_affinity",
        "description": "kubernetes.client.models.v1_volume_node_affinity",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_volume_node_affinity",
        "documentation": {}
    },
    {
        "label": "NodeSelector",
        "importPath": "phi.k8s.resource.core.v1.node_selector",
        "description": "phi.k8s.resource.core.v1.node_selector",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.node_selector",
        "documentation": {}
    },
    {
        "label": "V1AWSElasticBlockStoreVolumeSource",
        "importPath": "kubernetes.client.models.v1_aws_elastic_block_store_volume_source",
        "description": "kubernetes.client.models.v1_aws_elastic_block_store_volume_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_aws_elastic_block_store_volume_source",
        "documentation": {}
    },
    {
        "label": "V1LocalVolumeSource",
        "importPath": "kubernetes.client.models.v1_local_volume_source",
        "description": "kubernetes.client.models.v1_local_volume_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_local_volume_source",
        "documentation": {}
    },
    {
        "label": "V1NFSVolumeSource",
        "importPath": "kubernetes.client.models.v1_nfs_volume_source",
        "description": "kubernetes.client.models.v1_nfs_volume_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_nfs_volume_source",
        "documentation": {}
    },
    {
        "label": "V1HostPathVolumeSource",
        "importPath": "kubernetes.client.models.v1_host_path_volume_source",
        "description": "kubernetes.client.models.v1_host_path_volume_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_host_path_volume_source",
        "documentation": {}
    },
    {
        "label": "V1ConfigMapVolumeSource",
        "importPath": "kubernetes.client.models.v1_config_map_volume_source",
        "description": "kubernetes.client.models.v1_config_map_volume_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_config_map_volume_source",
        "documentation": {}
    },
    {
        "label": "V1EmptyDirVolumeSource",
        "importPath": "kubernetes.client.models.v1_empty_dir_volume_source",
        "description": "kubernetes.client.models.v1_empty_dir_volume_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_empty_dir_volume_source",
        "documentation": {}
    },
    {
        "label": "V1GCEPersistentDiskVolumeSource",
        "importPath": "kubernetes.client.models.v1_gce_persistent_disk_volume_source",
        "description": "kubernetes.client.models.v1_gce_persistent_disk_volume_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_gce_persistent_disk_volume_source",
        "documentation": {}
    },
    {
        "label": "V1GitRepoVolumeSource",
        "importPath": "kubernetes.client.models.v1_git_repo_volume_source",
        "description": "kubernetes.client.models.v1_git_repo_volume_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_git_repo_volume_source",
        "documentation": {}
    },
    {
        "label": "V1KeyToPath",
        "importPath": "kubernetes.client.models.v1_key_to_path",
        "description": "kubernetes.client.models.v1_key_to_path",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_key_to_path",
        "documentation": {}
    },
    {
        "label": "V1PersistentVolumeClaimVolumeSource",
        "importPath": "kubernetes.client.models.v1_persistent_volume_claim_volume_source",
        "description": "kubernetes.client.models.v1_persistent_volume_claim_volume_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_persistent_volume_claim_volume_source",
        "documentation": {}
    },
    {
        "label": "V1SecretVolumeSource",
        "importPath": "kubernetes.client.models.v1_secret_volume_source",
        "description": "kubernetes.client.models.v1_secret_volume_source",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_secret_volume_source",
        "documentation": {}
    },
    {
        "label": "V1LabelSelector",
        "importPath": "kubernetes.client.models.v1_label_selector",
        "description": "kubernetes.client.models.v1_label_selector",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_label_selector",
        "documentation": {}
    },
    {
        "label": "V1ObjectMeta",
        "importPath": "kubernetes.client.models.v1_object_meta",
        "description": "kubernetes.client.models.v1_object_meta",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_object_meta",
        "documentation": {}
    },
    {
        "label": "V1Ingress",
        "importPath": "kubernetes.client.models.v1_ingress",
        "description": "kubernetes.client.models.v1_ingress",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_ingress",
        "documentation": {}
    },
    {
        "label": "V1IngressBackend",
        "importPath": "kubernetes.client.models.v1_ingress_backend",
        "description": "kubernetes.client.models.v1_ingress_backend",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_ingress_backend",
        "documentation": {}
    },
    {
        "label": "V1IngressList",
        "importPath": "kubernetes.client.models.v1_ingress_list",
        "description": "kubernetes.client.models.v1_ingress_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_ingress_list",
        "documentation": {}
    },
    {
        "label": "V1IngressRule",
        "importPath": "kubernetes.client.models.v1_ingress_rule",
        "description": "kubernetes.client.models.v1_ingress_rule",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_ingress_rule",
        "documentation": {}
    },
    {
        "label": "V1IngressSpec",
        "importPath": "kubernetes.client.models.v1_ingress_spec",
        "description": "kubernetes.client.models.v1_ingress_spec",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_ingress_spec",
        "documentation": {}
    },
    {
        "label": "V1IngressTLS",
        "importPath": "kubernetes.client.models.v1_ingress_tls",
        "description": "kubernetes.client.models.v1_ingress_tls",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_ingress_tls",
        "documentation": {}
    },
    {
        "label": "V1ClusterRoleBinding",
        "importPath": "kubernetes.client.models.v1_cluster_role_binding",
        "description": "kubernetes.client.models.v1_cluster_role_binding",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_cluster_role_binding",
        "documentation": {}
    },
    {
        "label": "V1ClusterRoleBindingList",
        "importPath": "kubernetes.client.models.v1_cluster_role_binding_list",
        "description": "kubernetes.client.models.v1_cluster_role_binding_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_cluster_role_binding_list",
        "documentation": {}
    },
    {
        "label": "V1RoleRef",
        "importPath": "kubernetes.client.models.v1_role_ref",
        "description": "kubernetes.client.models.v1_role_ref",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_role_ref",
        "documentation": {}
    },
    {
        "label": "RbacV1Subject",
        "importPath": "kubernetes.client.models.rbac_v1_subject",
        "description": "kubernetes.client.models.rbac_v1_subject",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.rbac_v1_subject",
        "documentation": {}
    },
    {
        "label": "V1ClusterRole",
        "importPath": "kubernetes.client.models.v1_cluster_role",
        "description": "kubernetes.client.models.v1_cluster_role",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_cluster_role",
        "documentation": {}
    },
    {
        "label": "V1ClusterRoleList",
        "importPath": "kubernetes.client.models.v1_cluster_role_list",
        "description": "kubernetes.client.models.v1_cluster_role_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_cluster_role_list",
        "documentation": {}
    },
    {
        "label": "V1PolicyRule",
        "importPath": "kubernetes.client.models.v1_policy_rule",
        "description": "kubernetes.client.models.v1_policy_rule",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_policy_rule",
        "documentation": {}
    },
    {
        "label": "V1StorageClass",
        "importPath": "kubernetes.client.models.v1_storage_class",
        "description": "kubernetes.client.models.v1_storage_class",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_storage_class",
        "documentation": {}
    },
    {
        "label": "V1StorageClassList",
        "importPath": "kubernetes.client.models.v1_storage_class_list",
        "description": "kubernetes.client.models.v1_storage_class_list",
        "isExtraImport": true,
        "detail": "kubernetes.client.models.v1_storage_class_list",
        "documentation": {}
    },
    {
        "label": "Pod",
        "importPath": "phi.k8s.resource.core.v1.pod",
        "description": "phi.k8s.resource.core.v1.pod",
        "isExtraImport": true,
        "detail": "phi.k8s.resource.core.v1.pod",
        "documentation": {}
    },
    {
        "label": "HelmChart",
        "importPath": "phi.k8s.helm.chart",
        "description": "phi.k8s.helm.chart",
        "isExtraImport": true,
        "detail": "phi.k8s.helm.chart",
        "documentation": {}
    },
    {
        "label": "S3PDFReader",
        "importPath": "phi.document.reader.s3.pdf",
        "description": "phi.document.reader.s3.pdf",
        "isExtraImport": true,
        "detail": "phi.document.reader.s3.pdf",
        "documentation": {}
    },
    {
        "label": "S3KnowledgeBase",
        "importPath": "phi.knowledge.s3.base",
        "description": "phi.knowledge.s3.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.s3.base",
        "documentation": {}
    },
    {
        "label": "S3KnowledgeBase",
        "importPath": "phi.knowledge.s3.base",
        "description": "phi.knowledge.s3.base",
        "isExtraImport": true,
        "detail": "phi.knowledge.s3.base",
        "documentation": {}
    },
    {
        "label": "S3TextReader",
        "importPath": "phi.document.reader.s3.text",
        "description": "phi.document.reader.s3.text",
        "isExtraImport": true,
        "detail": "phi.document.reader.s3.text",
        "documentation": {}
    },
    {
        "label": "ArxivReader",
        "importPath": "phi.document.reader.arxiv",
        "description": "phi.document.reader.arxiv",
        "isExtraImport": true,
        "detail": "phi.document.reader.arxiv",
        "documentation": {}
    },
    {
        "label": "VectorDb",
        "importPath": "phi.vectordb",
        "description": "phi.vectordb",
        "isExtraImport": true,
        "detail": "phi.vectordb",
        "documentation": {}
    },
    {
        "label": "DocxReader",
        "importPath": "phi.document.reader.docx",
        "description": "phi.document.reader.docx",
        "isExtraImport": true,
        "detail": "phi.document.reader.docx",
        "documentation": {}
    },
    {
        "label": "JSONReader",
        "importPath": "phi.document.reader.json",
        "description": "phi.document.reader.json",
        "isExtraImport": true,
        "detail": "phi.document.reader.json",
        "documentation": {}
    },
    {
        "label": "TextReader",
        "importPath": "phi.document.reader.text",
        "description": "phi.document.reader.text",
        "isExtraImport": true,
        "detail": "phi.document.reader.text",
        "documentation": {}
    },
    {
        "label": "get_function_call_for_tool_call",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "extract_tool_from_xml",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "remove_function_calls_from_string",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_function_call_for_tool_call",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_function_call_for_tool_call",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_function_call_for_tool_call",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_function_call_for_tool_call",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_function_call_for_tool_call",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_function_call_for_tool_call",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "extract_tool_call_from_string",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "remove_tool_calls_from_string",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_function_call_for_tool_call",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "extract_tool_call_from_string",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "remove_tool_calls_from_string",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_function_call_for_tool_call",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_function_call_for_tool_call",
        "importPath": "phi.utils.tools",
        "description": "phi.utils.tools",
        "isExtraImport": true,
        "detail": "phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "AwsBedrock",
        "importPath": "phi.llm.aws.bedrock",
        "description": "phi.llm.aws.bedrock",
        "isExtraImport": true,
        "detail": "phi.llm.aws.bedrock",
        "documentation": {}
    },
    {
        "label": "InvalidToolCallException",
        "importPath": "phi.llm.exceptions",
        "description": "phi.llm.exceptions",
        "isExtraImport": true,
        "detail": "phi.llm.exceptions",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "phi.llm.openai.chat",
        "description": "phi.llm.openai.chat",
        "isExtraImport": true,
        "detail": "phi.llm.openai.chat",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "MemoryRow",
        "importPath": "phi.memory.row",
        "description": "phi.memory.row",
        "isExtraImport": true,
        "detail": "phi.memory.row",
        "documentation": {}
    },
    {
        "label": "MemoryRow",
        "importPath": "phi.memory.row",
        "description": "phi.memory.row",
        "isExtraImport": true,
        "detail": "phi.memory.row",
        "documentation": {}
    },
    {
        "label": "MemoryRow",
        "importPath": "phi.memory.row",
        "description": "phi.memory.row",
        "isExtraImport": true,
        "detail": "phi.memory.row",
        "documentation": {}
    },
    {
        "label": "MemoryDb",
        "importPath": "phi.memory.db",
        "description": "phi.memory.db",
        "isExtraImport": true,
        "detail": "phi.memory.db",
        "documentation": {}
    },
    {
        "label": "MemoryDb",
        "importPath": "phi.memory.db",
        "description": "phi.memory.db",
        "isExtraImport": true,
        "detail": "phi.memory.db",
        "documentation": {}
    },
    {
        "label": "MemoryDb",
        "importPath": "phi.memory.db",
        "description": "phi.memory.db",
        "isExtraImport": true,
        "detail": "phi.memory.db",
        "documentation": {}
    },
    {
        "label": "Memory",
        "importPath": "phi.memory.memory",
        "description": "phi.memory.memory",
        "isExtraImport": true,
        "detail": "phi.memory.memory",
        "documentation": {}
    },
    {
        "label": "Memory",
        "importPath": "phi.memory.memory",
        "description": "phi.memory.memory",
        "isExtraImport": true,
        "detail": "phi.memory.memory",
        "documentation": {}
    },
    {
        "label": "Memory",
        "importPath": "phi.memory.memory",
        "description": "phi.memory.memory",
        "isExtraImport": true,
        "detail": "phi.memory.memory",
        "documentation": {}
    },
    {
        "label": "MemoryManager",
        "importPath": "phi.memory.manager",
        "description": "phi.memory.manager",
        "isExtraImport": true,
        "detail": "phi.memory.manager",
        "documentation": {}
    },
    {
        "label": "MemoryClassifier",
        "importPath": "phi.memory.classifier",
        "description": "phi.memory.classifier",
        "isExtraImport": true,
        "detail": "phi.memory.classifier",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "sync_prompt_registry_api",
        "importPath": "phi.api.prompt",
        "description": "phi.api.prompt",
        "isExtraImport": true,
        "detail": "phi.api.prompt",
        "documentation": {}
    },
    {
        "label": "sync_prompt_template_api",
        "importPath": "phi.api.prompt",
        "description": "phi.api.prompt",
        "isExtraImport": true,
        "detail": "phi.api.prompt",
        "documentation": {}
    },
    {
        "label": "PromptUpdateException",
        "importPath": "phi.prompt.exceptions",
        "description": "phi.prompt.exceptions",
        "isExtraImport": true,
        "detail": "phi.prompt.exceptions",
        "documentation": {}
    },
    {
        "label": "PromptNotFoundException",
        "importPath": "phi.prompt.exceptions",
        "description": "phi.prompt.exceptions",
        "isExtraImport": true,
        "detail": "phi.prompt.exceptions",
        "documentation": {}
    },
    {
        "label": "AssistantStorage",
        "importPath": "phi.storage.assistant.base",
        "description": "phi.storage.assistant.base",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.base",
        "documentation": {}
    },
    {
        "label": "AssistantStorage",
        "importPath": "phi.storage.assistant.base",
        "description": "phi.storage.assistant.base",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.base",
        "documentation": {}
    },
    {
        "label": "AssistantStorage",
        "importPath": "phi.storage.assistant.base",
        "description": "phi.storage.assistant.base",
        "isExtraImport": true,
        "detail": "phi.storage.assistant.base",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools.toolkit",
        "description": "phi.tools.toolkit",
        "isExtraImport": true,
        "detail": "phi.tools.toolkit",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "phi.tools.toolkit",
        "description": "phi.tools.toolkit",
        "isExtraImport": true,
        "detail": "phi.tools.toolkit",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "git",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "git",
        "description": "git",
        "detail": "git",
        "documentation": {}
    },
    {
        "label": "RichHandler",
        "importPath": "rich.logging",
        "description": "rich.logging",
        "isExtraImport": true,
        "detail": "rich.logging",
        "documentation": {}
    },
    {
        "label": "VectorDb",
        "importPath": "phi.vectordb.base",
        "description": "phi.vectordb.base",
        "isExtraImport": true,
        "detail": "phi.vectordb.base",
        "documentation": {}
    },
    {
        "label": "VectorDb",
        "importPath": "phi.vectordb.base",
        "description": "phi.vectordb.base",
        "isExtraImport": true,
        "detail": "phi.vectordb.base",
        "documentation": {}
    },
    {
        "label": "VectorDb",
        "importPath": "phi.vectordb.base",
        "description": "phi.vectordb.base",
        "isExtraImport": true,
        "detail": "phi.vectordb.base",
        "documentation": {}
    },
    {
        "label": "VectorDb",
        "importPath": "phi.vectordb.base",
        "description": "phi.vectordb.base",
        "isExtraImport": true,
        "detail": "phi.vectordb.base",
        "documentation": {}
    },
    {
        "label": "VectorDb",
        "importPath": "phi.vectordb.base",
        "description": "phi.vectordb.base",
        "isExtraImport": true,
        "detail": "phi.vectordb.base",
        "documentation": {}
    },
    {
        "label": "VectorDb",
        "importPath": "phi.vectordb.base",
        "description": "phi.vectordb.base",
        "isExtraImport": true,
        "detail": "phi.vectordb.base",
        "documentation": {}
    },
    {
        "label": "Distance",
        "importPath": "phi.vectordb.distance",
        "description": "phi.vectordb.distance",
        "isExtraImport": true,
        "detail": "phi.vectordb.distance",
        "documentation": {}
    },
    {
        "label": "Distance",
        "importPath": "phi.vectordb.distance",
        "description": "phi.vectordb.distance",
        "isExtraImport": true,
        "detail": "phi.vectordb.distance",
        "documentation": {}
    },
    {
        "label": "Distance",
        "importPath": "phi.vectordb.distance",
        "description": "phi.vectordb.distance",
        "isExtraImport": true,
        "detail": "phi.vectordb.distance",
        "documentation": {}
    },
    {
        "label": "Distance",
        "importPath": "phi.vectordb.distance",
        "description": "phi.vectordb.distance",
        "isExtraImport": true,
        "detail": "phi.vectordb.distance",
        "documentation": {}
    },
    {
        "label": "Distance",
        "importPath": "phi.vectordb.distance",
        "description": "phi.vectordb.distance",
        "isExtraImport": true,
        "detail": "phi.vectordb.distance",
        "documentation": {}
    },
    {
        "label": "Ivfflat",
        "importPath": "phi.vectordb.pgvector.index",
        "description": "phi.vectordb.pgvector.index",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector.index",
        "documentation": {}
    },
    {
        "label": "HNSW",
        "importPath": "phi.vectordb.pgvector.index",
        "description": "phi.vectordb.pgvector.index",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector.index",
        "documentation": {}
    },
    {
        "label": "Ivfflat",
        "importPath": "phi.vectordb.pgvector.index",
        "description": "phi.vectordb.pgvector.index",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector.index",
        "documentation": {}
    },
    {
        "label": "HNSW",
        "importPath": "phi.vectordb.pgvector.index",
        "description": "phi.vectordb.pgvector.index",
        "isExtraImport": true,
        "detail": "phi.vectordb.pgvector.index",
        "documentation": {}
    },
    {
        "label": "ManageIndexesApi",
        "importPath": "pinecone.core.client.api.manage_indexes_api",
        "description": "pinecone.core.client.api.manage_indexes_api",
        "isExtraImport": true,
        "detail": "pinecone.core.client.api.manage_indexes_api",
        "documentation": {}
    },
    {
        "label": "ServerlessSpec",
        "importPath": "pinecone.models",
        "description": "pinecone.models",
        "isExtraImport": true,
        "detail": "pinecone.models",
        "documentation": {}
    },
    {
        "label": "PodSpec",
        "importPath": "pinecone.models",
        "description": "pinecone.models",
        "isExtraImport": true,
        "detail": "pinecone.models",
        "documentation": {}
    },
    {
        "label": "Vector",
        "importPath": "pinecone.core.client.models",
        "description": "pinecone.core.client.models",
        "isExtraImport": true,
        "detail": "pinecone.core.client.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "phi.task.task",
        "description": "phi.task.task",
        "isExtraImport": true,
        "detail": "phi.task.task",
        "documentation": {}
    },
    {
        "label": "get_python_objects_from_module",
        "importPath": "phi.utils.py_io",
        "description": "phi.utils.py_io",
        "isExtraImport": true,
        "detail": "phi.utils.py_io",
        "documentation": {}
    },
    {
        "label": "log_workspace_event",
        "importPath": "phi.api.workspace",
        "description": "phi.api.workspace",
        "isExtraImport": true,
        "detail": "phi.api.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceStarterTemplate",
        "importPath": "phi.workspace.enums",
        "description": "phi.workspace.enums",
        "isExtraImport": true,
        "detail": "phi.workspace.enums",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "common_modules.all_in_one_module",
        "description": "common_modules.all_in_one_module",
        "isExtraImport": true,
        "detail": "common_modules.all_in_one_module",
        "documentation": {}
    },
    {
        "label": "os",
        "importPath": "common_modules.all_in_one_module",
        "description": "common_modules.all_in_one_module",
        "isExtraImport": true,
        "detail": "common_modules.all_in_one_module",
        "documentation": {}
    },
    {
        "label": "sys",
        "importPath": "common_modules.all_in_one_module",
        "description": "common_modules.all_in_one_module",
        "isExtraImport": true,
        "detail": "common_modules.all_in_one_module",
        "documentation": {}
    },
    {
        "label": "LLMSelector",
        "importPath": "common_modules.all_in_one_module",
        "description": "common_modules.all_in_one_module",
        "isExtraImport": true,
        "detail": "common_modules.all_in_one_module",
        "documentation": {}
    },
    {
        "label": "ModelConfigurator",
        "importPath": "common_modules.all_in_one_module",
        "description": "common_modules.all_in_one_module",
        "isExtraImport": true,
        "detail": "common_modules.all_in_one_module",
        "documentation": {}
    },
    {
        "label": "model_choices",
        "importPath": "common_modules.all_in_one_module",
        "description": "common_modules.all_in_one_module",
        "isExtraImport": true,
        "detail": "common_modules.all_in_one_module",
        "documentation": {}
    },
    {
        "label": "pdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdb",
        "description": "pdb",
        "detail": "pdb",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "groq",
        "description": "groq",
        "isExtraImport": true,
        "detail": "groq",
        "documentation": {}
    },
    {
        "label": "get_agent",
        "kind": 2,
        "importPath": "phidata.cookbook.agents.agent",
        "description": "phidata.cookbook.agents.agent",
        "peekOfCode": "def get_agent(\n    llm_id: str = \"gpt-4o\",\n    calculator: bool = False,\n    ddg_search: bool = False,\n    file_tools: bool = False,\n    finance_tools: bool = False,\n    data_analyst: bool = False,\n    python_assistant: bool = False,\n    research_assistant: bool = False,\n    investment_assistant: bool = False,",
        "detail": "phidata.cookbook.agents.agent",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.agents.agent",
        "description": "phidata.cookbook.agents.agent",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\ncwd = Path(__file__).parent.resolve()\nscratch_dir = cwd.joinpath(\"scratch\")\nif not scratch_dir.exists():\n    scratch_dir.mkdir(exist_ok=True, parents=True)\ndef get_agent(\n    llm_id: str = \"gpt-4o\",\n    calculator: bool = False,\n    ddg_search: bool = False,\n    file_tools: bool = False,",
        "detail": "phidata.cookbook.agents.agent",
        "documentation": {}
    },
    {
        "label": "cwd",
        "kind": 5,
        "importPath": "phidata.cookbook.agents.agent",
        "description": "phidata.cookbook.agents.agent",
        "peekOfCode": "cwd = Path(__file__).parent.resolve()\nscratch_dir = cwd.joinpath(\"scratch\")\nif not scratch_dir.exists():\n    scratch_dir.mkdir(exist_ok=True, parents=True)\ndef get_agent(\n    llm_id: str = \"gpt-4o\",\n    calculator: bool = False,\n    ddg_search: bool = False,\n    file_tools: bool = False,\n    finance_tools: bool = False,",
        "detail": "phidata.cookbook.agents.agent",
        "documentation": {}
    },
    {
        "label": "scratch_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.agents.agent",
        "description": "phidata.cookbook.agents.agent",
        "peekOfCode": "scratch_dir = cwd.joinpath(\"scratch\")\nif not scratch_dir.exists():\n    scratch_dir.mkdir(exist_ok=True, parents=True)\ndef get_agent(\n    llm_id: str = \"gpt-4o\",\n    calculator: bool = False,\n    ddg_search: bool = False,\n    file_tools: bool = False,\n    finance_tools: bool = False,\n    data_analyst: bool = False,",
        "detail": "phidata.cookbook.agents.agent",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.agents.app",
        "description": "phidata.cookbook.agents.app",
        "peekOfCode": "def main() -> None:\n    # Get LLM Model\n    llm_id = st.sidebar.selectbox(\"Select LLM\", options=[\"gpt-4o\", \"gpt-4-turbo\"]) or \"gpt-4o\"\n    # Set llm_id in session state\n    if \"llm_id\" not in st.session_state:\n        st.session_state[\"llm_id\"] = llm_id\n    # Restart the assistant if llm_id changes\n    elif st.session_state[\"llm_id\"] != llm_id:\n        st.session_state[\"llm_id\"] = llm_id\n        restart_assistant()",
        "detail": "phidata.cookbook.agents.app",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.agents.app",
        "description": "phidata.cookbook.agents.app",
        "peekOfCode": "def restart_assistant():\n    logger.debug(\"---*--- Restarting Assistant ---*---\")\n    st.session_state[\"agent\"] = None\n    st.session_state[\"agent_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\nmain()",
        "detail": "phidata.cookbook.agents.app",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.agents.finance",
        "description": "phidata.cookbook.agents.finance",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-4o\"),\n    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, company_info=True, company_news=True)],\n    show_tool_calls=True,\n)\nassistant.print_response(\"Compare NVDA to TSLA. Use every tool you have\", markdown=True)",
        "detail": "phidata.cookbook.agents.finance",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.agents.web_search",
        "description": "phidata.cookbook.agents.web_search",
        "peekOfCode": "assistant = Assistant(llm=OpenAIChat(model=\"gpt-4o\"), tools=[DuckDuckGo()], show_tool_calls=True)\nassistant.print_response(\"Share 3 news stories from France\", markdown=True)",
        "detail": "phidata.cookbook.agents.web_search",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.async.basic",
        "description": "phidata.cookbook.assistants.async.basic",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-3.5-turbo\"),\n    description=\"You help people with their health and fitness goals.\",\n    instructions=[\"Recipes should be under 5 ingredients\"],\n)\n# -*- Print a response to the cli\nasyncio.run(assistant.async_print_response(\"Share a breakfast recipe.\", markdown=True))",
        "detail": "phidata.cookbook.assistants.async.basic",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.async.basic_stream_off",
        "description": "phidata.cookbook.assistants.async.basic_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-3.5-turbo\"),\n    description=\"You help people with their health and fitness goals.\",\n    instructions=[\"Recipes should be under 5 ingredients\"],\n)\n# -*- Print a response to the cli\nasyncio.run(assistant.async_print_response(\"Share a breakfast recipe.\", markdown=True, stream=False))",
        "detail": "phidata.cookbook.assistants.async.basic_stream_off",
        "documentation": {}
    },
    {
        "label": "data_analyst",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.async.data_analyst",
        "description": "phidata.cookbook.assistants.async.data_analyst",
        "peekOfCode": "data_analyst = DuckDbAssistant(\n    semantic_model=json.dumps(\n        {\n            \"tables\": [\n                {\n                    \"name\": \"movies\",\n                    \"description\": \"Contains information about movies from IMDB.\",\n                    \"path\": \"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\",\n                }\n            ]",
        "detail": "phidata.cookbook.assistants.async.data_analyst",
        "documentation": {}
    },
    {
        "label": "get_top_hackernews_stories",
        "kind": 2,
        "importPath": "phidata.cookbook.assistants.async.hackernews",
        "description": "phidata.cookbook.assistants.async.hackernews",
        "peekOfCode": "def get_top_hackernews_stories(num_stories: int = 10) -> str:\n    \"\"\"Use this function to get top stories from Hacker News.\n    Args:\n        num_stories (int): Number of stories to return. Defaults to 10.\n    Returns:\n        str: JSON string of top stories.\n    \"\"\"\n    # Fetch top story IDs\n    response = httpx.get(\"https://hacker-news.firebaseio.com/v0/topstories.json\")\n    story_ids = response.json()",
        "detail": "phidata.cookbook.assistants.async.hackernews",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.async.hackernews",
        "description": "phidata.cookbook.assistants.async.hackernews",
        "peekOfCode": "assistant = Assistant(tools=[get_top_hackernews_stories], show_tool_calls=True)\nasyncio.run(assistant.async_print_response(\"Summarize the top stories on hackernews?\", markdown=True))",
        "detail": "phidata.cookbook.assistants.async.hackernews",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.assistants.async.movie_assistant",
        "description": "phidata.cookbook.assistants.async.movie_assistant",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.assistants.async.movie_assistant",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.async.movie_assistant",
        "description": "phidata.cookbook.assistants.async.movie_assistant",
        "peekOfCode": "movie_assistant = Assistant(\n    description=\"You help write movie scripts.\",\n    output_model=MovieScript,\n)\n# -*- Print a response to the cli\npprint(asyncio.run(movie_assistant.arun(\"Breakfast.\", markdown=True)))",
        "detail": "phidata.cookbook.assistants.async.movie_assistant",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.auto_assistant",
        "description": "phidata.cookbook.assistants.auto_assistant",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(\n        collection=\"recipes\",\n        db_url=\"postgresql+psycopg://ai:ai@localhost:5532/ai\",\n    ),\n)\n# Comment out as the knowledge base is already loaded.\n# knowledge_base.load(recreate=False)\nassistant = Assistant(",
        "detail": "phidata.cookbook.assistants.auto_assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.auto_assistant",
        "description": "phidata.cookbook.assistants.auto_assistant",
        "peekOfCode": "assistant = Assistant(\n    knowledge_base=knowledge_base,\n    # Show tool calls in the response\n    show_tool_calls=True,\n    # Enable the assistant to search the knowledge base\n    search_knowledge=True,\n    # Enable the assistant to read the chat history\n    read_chat_history=True,\n)\nassistant.print_response(\"How do I make pad thai?\", markdown=True)",
        "detail": "phidata.cookbook.assistants.auto_assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.basic",
        "description": "phidata.cookbook.assistants.basic",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-4o\"),\n    description=\"You help people with their health and fitness goals.\",\n    instructions=[\"Recipes should be under 5 ingredients\"],\n)\n# -*- Print a response to the cli\nassistant.print_response(\"Share a breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.assistants.basic",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.cli",
        "description": "phidata.cookbook.assistants.cli",
        "peekOfCode": "assistant = Assistant(tools=[DuckDuckGo()], show_tool_calls=True, read_chat_history=True)\nassistant.cli_app(markdown=True)",
        "detail": "phidata.cookbook.assistants.cli",
        "documentation": {}
    },
    {
        "label": "data_analyst",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.data_analyst",
        "description": "phidata.cookbook.assistants.data_analyst",
        "peekOfCode": "data_analyst = DuckDbAssistant(\n    llm=OpenAIChat(model=\"gpt-4o\"),\n    semantic_model=json.dumps(\n        {\n            \"tables\": [\n                {\n                    \"name\": \"movies\",\n                    \"description\": \"Contains information about movies from IMDB.\",\n                    \"path\": \"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\",\n                }",
        "detail": "phidata.cookbook.assistants.data_analyst",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.finance",
        "description": "phidata.cookbook.assistants.finance",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-4o\"),\n    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, company_info=True, company_news=True)],\n    show_tool_calls=True,\n    markdown=True,\n)\nassistant.print_response(\"What is the stock price of NVDA\")\nassistant.print_response(\"Write a comparison between NVDA and AMD, use all tools available.\")",
        "detail": "phidata.cookbook.assistants.finance",
        "documentation": {}
    },
    {
        "label": "get_top_hackernews_stories",
        "kind": 2,
        "importPath": "phidata.cookbook.assistants.hackernews",
        "description": "phidata.cookbook.assistants.hackernews",
        "peekOfCode": "def get_top_hackernews_stories(num_stories: int = 10) -> str:\n    \"\"\"Use this function to get top stories from Hacker News.\n    Args:\n        num_stories (int): Number of stories to return. Defaults to 10.\n    Returns:\n        str: JSON string of top stories.\n    \"\"\"\n    # Fetch top story IDs\n    response = httpx.get(\"https://hacker-news.firebaseio.com/v0/topstories.json\")\n    story_ids = response.json()",
        "detail": "phidata.cookbook.assistants.hackernews",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.hackernews",
        "description": "phidata.cookbook.assistants.hackernews",
        "peekOfCode": "assistant = Assistant(tools=[get_top_hackernews_stories], show_tool_calls=True, markdown=True, debug_mode=True)\nassistant.print_response(\"Summarize the top stories on hackernews?\")",
        "detail": "phidata.cookbook.assistants.hackernews",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.instructions",
        "description": "phidata.cookbook.assistants.instructions",
        "peekOfCode": "assistant = Assistant(\n    description=\"You are a famous short story writer asked to write for a magazine\",\n    instructions=[\"You are a pilot on a plane flying from Hawaii to Japan.\"],\n    markdown=True,\n    debug_mode=True,\n)\nassistant.print_response(\"Tell me a 2 sentence horror story.\")",
        "detail": "phidata.cookbook.assistants.instructions",
        "documentation": {}
    },
    {
        "label": "topic",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.joke",
        "description": "phidata.cookbook.assistants.joke",
        "peekOfCode": "topic = \"ice cream\"\nassistant = Assistant(llm=OpenAIChat(model=\"gpt-3.5-turbo\"))\nassistant.print_response(f\"Tell me a joke about {topic}\")",
        "detail": "phidata.cookbook.assistants.joke",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.joke",
        "description": "phidata.cookbook.assistants.joke",
        "peekOfCode": "assistant = Assistant(llm=OpenAIChat(model=\"gpt-3.5-turbo\"))\nassistant.print_response(f\"Tell me a joke about {topic}\")",
        "detail": "phidata.cookbook.assistants.joke",
        "documentation": {}
    },
    {
        "label": "load_vector_store",
        "kind": 2,
        "importPath": "phidata.cookbook.assistants.langchain_retriever",
        "description": "phidata.cookbook.assistants.langchain_retriever",
        "peekOfCode": "def load_vector_store():\n    state_of_the_union = cookbook_dir.joinpath(\"data/demo/state_of_the_union.txt\")\n    # -*- Load the document\n    raw_documents = TextLoader(str(state_of_the_union)).load()\n    # -*- Split it into chunks\n    text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\n    documents = text_splitter.split_documents(raw_documents)\n    # -*- Embed each chunk and load it into the vector store\n    Chroma.from_documents(documents, OpenAIEmbeddings(), persist_directory=str(chroma_db_dir))\n# -*- Load the vector store",
        "detail": "phidata.cookbook.assistants.langchain_retriever",
        "documentation": {}
    },
    {
        "label": "cookbook_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.langchain_retriever",
        "description": "phidata.cookbook.assistants.langchain_retriever",
        "peekOfCode": "cookbook_dir = Path(\"__file__\").parent\nchroma_db_dir = cookbook_dir.joinpath(\"storage/chroma_db\")\ndef load_vector_store():\n    state_of_the_union = cookbook_dir.joinpath(\"data/demo/state_of_the_union.txt\")\n    # -*- Load the document\n    raw_documents = TextLoader(str(state_of_the_union)).load()\n    # -*- Split it into chunks\n    text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\n    documents = text_splitter.split_documents(raw_documents)\n    # -*- Embed each chunk and load it into the vector store",
        "detail": "phidata.cookbook.assistants.langchain_retriever",
        "documentation": {}
    },
    {
        "label": "chroma_db_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.langchain_retriever",
        "description": "phidata.cookbook.assistants.langchain_retriever",
        "peekOfCode": "chroma_db_dir = cookbook_dir.joinpath(\"storage/chroma_db\")\ndef load_vector_store():\n    state_of_the_union = cookbook_dir.joinpath(\"data/demo/state_of_the_union.txt\")\n    # -*- Load the document\n    raw_documents = TextLoader(str(state_of_the_union)).load()\n    # -*- Split it into chunks\n    text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\n    documents = text_splitter.split_documents(raw_documents)\n    # -*- Embed each chunk and load it into the vector store\n    Chroma.from_documents(documents, OpenAIEmbeddings(), persist_directory=str(chroma_db_dir))",
        "detail": "phidata.cookbook.assistants.langchain_retriever",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.langchain_retriever",
        "description": "phidata.cookbook.assistants.langchain_retriever",
        "peekOfCode": "db = Chroma(embedding_function=OpenAIEmbeddings(), persist_directory=str(chroma_db_dir))\n# -*- Create a retriever from the vector store\nretriever = db.as_retriever()\n# -*- Create a knowledge base from the vector store\nknowledge_base = LangChainKnowledgeBase(retriever=retriever)\nconv = Assistant(knowledge_base=knowledge_base, debug_mode=True, add_references_to_prompt=True)\nconv.print_response(\"What did the president say about technology?\", markdown=True)",
        "detail": "phidata.cookbook.assistants.langchain_retriever",
        "documentation": {}
    },
    {
        "label": "retriever",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.langchain_retriever",
        "description": "phidata.cookbook.assistants.langchain_retriever",
        "peekOfCode": "retriever = db.as_retriever()\n# -*- Create a knowledge base from the vector store\nknowledge_base = LangChainKnowledgeBase(retriever=retriever)\nconv = Assistant(knowledge_base=knowledge_base, debug_mode=True, add_references_to_prompt=True)\nconv.print_response(\"What did the president say about technology?\", markdown=True)",
        "detail": "phidata.cookbook.assistants.langchain_retriever",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.langchain_retriever",
        "description": "phidata.cookbook.assistants.langchain_retriever",
        "peekOfCode": "knowledge_base = LangChainKnowledgeBase(retriever=retriever)\nconv = Assistant(knowledge_base=knowledge_base, debug_mode=True, add_references_to_prompt=True)\nconv.print_response(\"What did the president say about technology?\", markdown=True)",
        "detail": "phidata.cookbook.assistants.langchain_retriever",
        "documentation": {}
    },
    {
        "label": "conv",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.langchain_retriever",
        "description": "phidata.cookbook.assistants.langchain_retriever",
        "peekOfCode": "conv = Assistant(knowledge_base=knowledge_base, debug_mode=True, add_references_to_prompt=True)\nconv.print_response(\"What did the president say about technology?\", markdown=True)",
        "detail": "phidata.cookbook.assistants.langchain_retriever",
        "documentation": {}
    },
    {
        "label": "pdf_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.assistants.long_term_memory",
        "description": "phidata.cookbook.assistants.long_term_memory",
        "peekOfCode": "def pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None\n    if not new:\n        existing_run_ids: List[str] = storage.get_all_run_ids(user)\n        if len(existing_run_ids) > 0:\n            run_id = existing_run_ids[0]\n    assistant = Assistant(\n        run_id=run_id,\n        user_id=user,\n        knowledge_base=knowledge_base,",
        "detail": "phidata.cookbook.assistants.long_term_memory",
        "documentation": {}
    },
    {
        "label": "cli_app",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.long_term_memory",
        "description": "phidata.cookbook.assistants.long_term_memory",
        "peekOfCode": "cli_app = typer.Typer(pretty_exceptions_show_locals=False)\ndb_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(collection=\"recipes\", db_url=db_url),\n)\n# Comment out after first run\n# knowledge_base.load()\nstorage = PgAssistantStorage(table_name=\"pdf_assistant\", db_url=db_url)\n@cli_app.command()",
        "detail": "phidata.cookbook.assistants.long_term_memory",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.long_term_memory",
        "description": "phidata.cookbook.assistants.long_term_memory",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(collection=\"recipes\", db_url=db_url),\n)\n# Comment out after first run\n# knowledge_base.load()\nstorage = PgAssistantStorage(table_name=\"pdf_assistant\", db_url=db_url)\n@cli_app.command()\ndef pdf_assistant(new: bool = False, user: str = \"user\"):",
        "detail": "phidata.cookbook.assistants.long_term_memory",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.long_term_memory",
        "description": "phidata.cookbook.assistants.long_term_memory",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(collection=\"recipes\", db_url=db_url),\n)\n# Comment out after first run\n# knowledge_base.load()\nstorage = PgAssistantStorage(table_name=\"pdf_assistant\", db_url=db_url)\n@cli_app.command()\ndef pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None",
        "detail": "phidata.cookbook.assistants.long_term_memory",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.long_term_memory",
        "description": "phidata.cookbook.assistants.long_term_memory",
        "peekOfCode": "storage = PgAssistantStorage(table_name=\"pdf_assistant\", db_url=db_url)\n@cli_app.command()\ndef pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None\n    if not new:\n        existing_run_ids: List[str] = storage.get_all_run_ids(user)\n        if len(existing_run_ids) > 0:\n            run_id = existing_run_ids[0]\n    assistant = Assistant(\n        run_id=run_id,",
        "detail": "phidata.cookbook.assistants.long_term_memory",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.memory",
        "description": "phidata.cookbook.assistants.memory",
        "peekOfCode": "assistant = Assistant()\n# -*- Print a response\nassistant.print_response(\"Share a 5 word horror story.\")\n# -*- Get the memory\nmemory: AssistantMemory = assistant.memory\n# -*- Print Chat History\nprint(\"============ Chat History ============\")\npprint(memory.chat_history)\n# -*- Print LLM Messages\nprint(\"============ LLM Messages ============\")",
        "detail": "phidata.cookbook.assistants.memory",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.assistants.movie_assistant",
        "description": "phidata.cookbook.assistants.movie_assistant",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.assistants.movie_assistant",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.movie_assistant",
        "description": "phidata.cookbook.assistants.movie_assistant",
        "peekOfCode": "movie_assistant = Assistant(\n    description=\"You help write movie scripts.\",\n    output_model=MovieScript,\n    # debug_mode=True,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.assistants.movie_assistant",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "phidata.cookbook.assistants.multiply",
        "description": "phidata.cookbook.assistants.multiply",
        "peekOfCode": "def multiply(first_int: int, second_int: int) -> str:\n    \"\"\"Multiply two integers together.\"\"\"\n    return str(first_int * second_int)\ndef add(first_int: int, second_int: int) -> str:\n    \"\"\"Add two integers.\"\"\"\n    return str(first_int + second_int)\ndef exponentiate(base: int, exponent: int) -> str:\n    \"\"\"Exponentiate the base to the exponent power.\"\"\"\n    return str(base**exponent)\nassistant = Assistant(tools=[multiply, add, exponentiate])",
        "detail": "phidata.cookbook.assistants.multiply",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "phidata.cookbook.assistants.multiply",
        "description": "phidata.cookbook.assistants.multiply",
        "peekOfCode": "def add(first_int: int, second_int: int) -> str:\n    \"\"\"Add two integers.\"\"\"\n    return str(first_int + second_int)\ndef exponentiate(base: int, exponent: int) -> str:\n    \"\"\"Exponentiate the base to the exponent power.\"\"\"\n    return str(base**exponent)\nassistant = Assistant(tools=[multiply, add, exponentiate])\nassistant.print_response(\n    \"Take 3 to the fifth power and multiply that by the sum of twelve and three, then square the whole result. Only show the result.\"\n)",
        "detail": "phidata.cookbook.assistants.multiply",
        "documentation": {}
    },
    {
        "label": "exponentiate",
        "kind": 2,
        "importPath": "phidata.cookbook.assistants.multiply",
        "description": "phidata.cookbook.assistants.multiply",
        "peekOfCode": "def exponentiate(base: int, exponent: int) -> str:\n    \"\"\"Exponentiate the base to the exponent power.\"\"\"\n    return str(base**exponent)\nassistant = Assistant(tools=[multiply, add, exponentiate])\nassistant.print_response(\n    \"Take 3 to the fifth power and multiply that by the sum of twelve and three, then square the whole result. Only show the result.\"\n)",
        "detail": "phidata.cookbook.assistants.multiply",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.multiply",
        "description": "phidata.cookbook.assistants.multiply",
        "peekOfCode": "assistant = Assistant(tools=[multiply, add, exponentiate])\nassistant.print_response(\n    \"Take 3 to the fifth power and multiply that by the sum of twelve and three, then square the whole result. Only show the result.\"\n)",
        "detail": "phidata.cookbook.assistants.multiply",
        "documentation": {}
    },
    {
        "label": "pdf_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.assistants.pdf_assistant",
        "description": "phidata.cookbook.assistants.pdf_assistant",
        "peekOfCode": "def pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None\n    if not new:\n        existing_run_ids: List[str] = storage.get_all_run_ids(user)\n        if len(existing_run_ids) > 0:\n            run_id = existing_run_ids[0]\n    assistant = Assistant(\n        run_id=run_id,\n        user_id=user,\n        knowledge_base=knowledge_base,",
        "detail": "phidata.cookbook.assistants.pdf_assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.pdf_assistant",
        "description": "phidata.cookbook.assistants.pdf_assistant",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(collection=\"recipes\", db_url=db_url),\n)\n# Comment out after first run\nknowledge_base.load()\nstorage = PgAssistantStorage(table_name=\"pdf_assistant\", db_url=db_url)\ndef pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None",
        "detail": "phidata.cookbook.assistants.pdf_assistant",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.pdf_assistant",
        "description": "phidata.cookbook.assistants.pdf_assistant",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(collection=\"recipes\", db_url=db_url),\n)\n# Comment out after first run\nknowledge_base.load()\nstorage = PgAssistantStorage(table_name=\"pdf_assistant\", db_url=db_url)\ndef pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None\n    if not new:",
        "detail": "phidata.cookbook.assistants.pdf_assistant",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.pdf_assistant",
        "description": "phidata.cookbook.assistants.pdf_assistant",
        "peekOfCode": "storage = PgAssistantStorage(table_name=\"pdf_assistant\", db_url=db_url)\ndef pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None\n    if not new:\n        existing_run_ids: List[str] = storage.get_all_run_ids(user)\n        if len(existing_run_ids) > 0:\n            run_id = existing_run_ids[0]\n    assistant = Assistant(\n        run_id=run_id,\n        user_id=user,",
        "detail": "phidata.cookbook.assistants.pdf_assistant",
        "documentation": {}
    },
    {
        "label": "cwd",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.python_assistant",
        "description": "phidata.cookbook.assistants.python_assistant",
        "peekOfCode": "cwd = Path(__file__).parent.resolve()\nscratch_dir = cwd.joinpath(\"scratch\")\nif not scratch_dir.exists():\n    scratch_dir.mkdir(exist_ok=True, parents=True)\npython_assistant = PythonAssistant(\n    llm=OpenAIChat(model=\"gpt-4o\"),\n    base_dir=scratch_dir,\n    files=[\n        CsvFile(\n            path=\"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\",",
        "detail": "phidata.cookbook.assistants.python_assistant",
        "documentation": {}
    },
    {
        "label": "scratch_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.python_assistant",
        "description": "phidata.cookbook.assistants.python_assistant",
        "peekOfCode": "scratch_dir = cwd.joinpath(\"scratch\")\nif not scratch_dir.exists():\n    scratch_dir.mkdir(exist_ok=True, parents=True)\npython_assistant = PythonAssistant(\n    llm=OpenAIChat(model=\"gpt-4o\"),\n    base_dir=scratch_dir,\n    files=[\n        CsvFile(\n            path=\"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\",\n            description=\"Contains information about movies from IMDB.\",",
        "detail": "phidata.cookbook.assistants.python_assistant",
        "documentation": {}
    },
    {
        "label": "python_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.python_assistant",
        "description": "phidata.cookbook.assistants.python_assistant",
        "peekOfCode": "python_assistant = PythonAssistant(\n    llm=OpenAIChat(model=\"gpt-4o\"),\n    base_dir=scratch_dir,\n    files=[\n        CsvFile(\n            path=\"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\",\n            description=\"Contains information about movies from IMDB.\",\n        )\n    ],\n    pip_install=True,",
        "detail": "phidata.cookbook.assistants.python_assistant",
        "documentation": {}
    },
    {
        "label": "AssistantResponse",
        "kind": 6,
        "importPath": "phidata.cookbook.assistants.python_assistant_w_instructions",
        "description": "phidata.cookbook.assistants.python_assistant_w_instructions",
        "peekOfCode": "class AssistantResponse(BaseModel):\n    result: str = Field(..., description=\"The result of the users question.\")\ndef average_rating() -> AssistantResponse:\n    python_assistant = PythonAssistant(\n        files=[\n            CsvFile(\n                path=\"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\",\n                description=\"Contains information about movies from IMDB.\",\n            )\n        ],",
        "detail": "phidata.cookbook.assistants.python_assistant_w_instructions",
        "documentation": {}
    },
    {
        "label": "average_rating",
        "kind": 2,
        "importPath": "phidata.cookbook.assistants.python_assistant_w_instructions",
        "description": "phidata.cookbook.assistants.python_assistant_w_instructions",
        "peekOfCode": "def average_rating() -> AssistantResponse:\n    python_assistant = PythonAssistant(\n        files=[\n            CsvFile(\n                path=\"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\",\n                description=\"Contains information about movies from IMDB.\",\n            )\n        ],\n        instructions=[\n            \"Only provide the result, do not need to provide any additional information.\",",
        "detail": "phidata.cookbook.assistants.python_assistant_w_instructions",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.rag_assistant",
        "description": "phidata.cookbook.assistants.rag_assistant",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    # Read PDFs from URLs\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    # Store embeddings in the `ai.recipes` table\n    vector_db=PgVector2(\n        collection=\"recipes\",\n        db_url=\"postgresql+psycopg://ai:ai@localhost:5532/ai\",\n    ),\n)\n# Load the knowledge base",
        "detail": "phidata.cookbook.assistants.rag_assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.rag_assistant",
        "description": "phidata.cookbook.assistants.rag_assistant",
        "peekOfCode": "assistant = Assistant(\n    knowledge_base=knowledge_base,\n    # The add_references_to_prompt will update the prompt with references from the knowledge base.\n    add_references_to_prompt=True,\n)\nassistant.print_response(\"How do I make pad thai?\", markdown=True)",
        "detail": "phidata.cookbook.assistants.rag_assistant",
        "documentation": {}
    },
    {
        "label": "cwd",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.research",
        "description": "phidata.cookbook.assistants.research",
        "peekOfCode": "cwd = Path(__file__).parent.resolve()\nscratch_dir = cwd.joinpath(\"scratch\")\nif not scratch_dir.exists():\n    scratch_dir.mkdir(exist_ok=True, parents=True)\nassistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-4o\"),\n    tools=[ExaTools()],\n    description=\"You are a senior NYT researcher writing an article on a topic.\",\n    instructions=[\n        \"For the provided topic, search for the top 10 links.\",",
        "detail": "phidata.cookbook.assistants.research",
        "documentation": {}
    },
    {
        "label": "scratch_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.research",
        "description": "phidata.cookbook.assistants.research",
        "peekOfCode": "scratch_dir = cwd.joinpath(\"scratch\")\nif not scratch_dir.exists():\n    scratch_dir.mkdir(exist_ok=True, parents=True)\nassistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-4o\"),\n    tools=[ExaTools()],\n    description=\"You are a senior NYT researcher writing an article on a topic.\",\n    instructions=[\n        \"For the provided topic, search for the top 10 links.\",\n        \"Read the results carefully and prepare a NYT worthy article.\",",
        "detail": "phidata.cookbook.assistants.research",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.research",
        "description": "phidata.cookbook.assistants.research",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-4o\"),\n    tools=[ExaTools()],\n    description=\"You are a senior NYT researcher writing an article on a topic.\",\n    instructions=[\n        \"For the provided topic, search for the top 10 links.\",\n        \"Read the results carefully and prepare a NYT worthy article.\",\n    ],\n    add_datetime_to_instructions=True,\n    expected_output=dedent(",
        "detail": "phidata.cookbook.assistants.research",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.storage",
        "description": "phidata.cookbook.assistants.storage",
        "peekOfCode": "assistant = Assistant(\n    storage=PgAssistantStorage(table_name=\"assistant_runs\", db_url=\"postgresql+psycopg://ai:ai@localhost:5532/ai\"),\n    tools=[DuckDuckGo()],\n    add_chat_history_to_messages=True,\n)\nassistant.print_response(\"How many people live in Canada?\")\nassistant.print_response(\"What is their national anthem called?\")",
        "detail": "phidata.cookbook.assistants.storage",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.system_prompt",
        "description": "phidata.cookbook.assistants.system_prompt",
        "peekOfCode": "assistant = Assistant(\n    system_prompt=\"Share a 2 sentence story about\",\n    debug_mode=True,\n)\nassistant.print_response(\"Love in the year 12000.\")",
        "detail": "phidata.cookbook.assistants.system_prompt",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.tothemoon",
        "description": "phidata.cookbook.assistants.tothemoon",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-4o\"),\n    description=\"You are a rocket scientist\",\n)\nassistant.print_response(\"write a plan to go to the moon stp by step\", markdown=True)",
        "detail": "phidata.cookbook.assistants.tothemoon",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.user_prompt",
        "description": "phidata.cookbook.assistants.user_prompt",
        "peekOfCode": "assistant = Assistant(\n    system_prompt=\"Share a 2 sentence story about\",\n    user_prompt=\"Love in the year 12000.\",\n    debug_mode=True,\n)\nassistant.print_response()",
        "detail": "phidata.cookbook.assistants.user_prompt",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.vision",
        "description": "phidata.cookbook.assistants.vision",
        "peekOfCode": "assistant = Assistant(llm=OpenAIChat(model=\"gpt-4-turbo\"))\n# Single Image\nassistant.print_response(\n    [\n        {\"type\": \"text\", \"text\": \"What's in this image, describe in 1 sentence\"},\n        {\n            \"type\": \"image_url\",\n            \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\",\n        },\n    ]",
        "detail": "phidata.cookbook.assistants.vision",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.assistants.web_search",
        "description": "phidata.cookbook.assistants.web_search",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-4o\"),\n    tools=[DuckDuckGo()],\n    show_tool_calls=True,\n    markdown=True,\n)\nassistant.print_response(\"Search for news from France and write a short poem about it.\")",
        "detail": "phidata.cookbook.assistants.web_search",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.auto_rag.app",
        "description": "phidata.cookbook.examples.auto_rag.app",
        "peekOfCode": "def restart_assistant():\n    logger.debug(\"---*--- Restarting Assistant ---*---\")\n    st.session_state[\"auto_rag_assistant\"] = None\n    st.session_state[\"auto_rag_assistant_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\ndef main() -> None:",
        "detail": "phidata.cookbook.examples.auto_rag.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.auto_rag.app",
        "description": "phidata.cookbook.examples.auto_rag.app",
        "peekOfCode": "def main() -> None:\n    # Get LLM model\n    llm_model = st.sidebar.selectbox(\"Select LLM\", options=[\"gpt-4-turbo\", \"gpt-3.5-turbo\"])\n    # Set assistant_type in session state\n    if \"llm_model\" not in st.session_state:\n        st.session_state[\"llm_model\"] = llm_model\n    # Restart the assistant if assistant_type has changed\n    elif st.session_state[\"llm_model\"] != llm_model:\n        st.session_state[\"llm_model\"] = llm_model\n        restart_assistant()",
        "detail": "phidata.cookbook.examples.auto_rag.app",
        "documentation": {}
    },
    {
        "label": "get_auto_rag_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.auto_rag.assistant",
        "description": "phidata.cookbook.examples.auto_rag.assistant",
        "peekOfCode": "def get_auto_rag_assistant(\n    llm_model: str = \"gpt-4-turbo\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get an Auto RAG Assistant.\"\"\"\n    return Assistant(\n        name=\"auto_rag_assistant\",\n        run_id=run_id,",
        "detail": "phidata.cookbook.examples.auto_rag.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.auto_rag.assistant",
        "description": "phidata.cookbook.examples.auto_rag.assistant",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\ndef get_auto_rag_assistant(\n    llm_model: str = \"gpt-4-turbo\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get an Auto RAG Assistant.\"\"\"\n    return Assistant(\n        name=\"auto_rag_assistant\",",
        "detail": "phidata.cookbook.examples.auto_rag.assistant",
        "documentation": {}
    },
    {
        "label": "duckdb_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.data_eng.duckdb_assistant",
        "description": "phidata.cookbook.examples.data_eng.duckdb_assistant",
        "peekOfCode": "duckdb_assistant = DuckDbAssistant(\n    semantic_model=json.dumps(\n        {\n            \"tables\": [\n                {\n                    \"name\": \"movies\",\n                    \"description\": \"Contains information about movies from IMDB.\",\n                    \"path\": \"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\",\n                }\n            ]",
        "detail": "phidata.cookbook.examples.data_eng.duckdb_assistant",
        "documentation": {}
    },
    {
        "label": "python_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.data_eng.python_assistant",
        "description": "phidata.cookbook.examples.data_eng.python_assistant",
        "peekOfCode": "python_assistant = PythonAssistant(\n    files=[\n        CsvFile(\n            path=\"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\",\n            description=\"Contains information about movies from IMDB.\",\n        )\n    ],\n    pip_install=True,\n    show_tool_calls=True,\n    base_dir=Path(__file__).parent.joinpath(\"scratch\"),",
        "detail": "phidata.cookbook.examples.data_eng.python_assistant",
        "documentation": {}
    },
    {
        "label": "sales_ai",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.data_eng.sales_assistant",
        "description": "phidata.cookbook.examples.data_eng.sales_assistant",
        "peekOfCode": "sales_ai = DuckDbAssistant(\n    name=\"sales_ai\",\n    use_tools=True,\n    show_tool_calls=True,\n    base_dir=Path(__file__).parent.joinpath(\"scratch\"),\n    instructions=[\"Get to the point, dont explain too much.\"],\n    semantic_model=json.dumps(\n        {\n            \"tables\": [\n                {",
        "detail": "phidata.cookbook.examples.data_eng.sales_assistant",
        "documentation": {}
    },
    {
        "label": "pdf_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.pdf.assistant",
        "description": "phidata.cookbook.examples.pdf.assistant",
        "peekOfCode": "def pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None\n    if not new:\n        existing_run_ids: List[str] = storage.get_all_run_ids(user)\n        if len(existing_run_ids) > 0:\n            run_id = existing_run_ids[0]\n    assistant = Assistant(\n        run_id=run_id,\n        user_id=user,\n        knowledge_base=knowledge_base,",
        "detail": "phidata.cookbook.examples.pdf.assistant",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.pdf.assistant",
        "description": "phidata.cookbook.examples.pdf.assistant",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(collection=\"recipes\", db_url=vector_db.get_db_connection_local()),\n)\n# Comment out after first run\nknowledge_base.load(recreate=False)\nstorage = PgAssistantStorage(table_name=\"pdf_assistant\", db_url=vector_db.get_db_connection_local())\ndef pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None\n    if not new:",
        "detail": "phidata.cookbook.examples.pdf.assistant",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.pdf.assistant",
        "description": "phidata.cookbook.examples.pdf.assistant",
        "peekOfCode": "storage = PgAssistantStorage(table_name=\"pdf_assistant\", db_url=vector_db.get_db_connection_local())\ndef pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None\n    if not new:\n        existing_run_ids: List[str] = storage.get_all_run_ids(user)\n        if len(existing_run_ids) > 0:\n            run_id = existing_run_ids[0]\n    assistant = Assistant(\n        run_id=run_id,\n        user_id=user,",
        "detail": "phidata.cookbook.examples.pdf.assistant",
        "documentation": {}
    },
    {
        "label": "pdf_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.pdf.cli",
        "description": "phidata.cookbook.examples.pdf.cli",
        "peekOfCode": "def pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None\n    if not new:\n        existing_run_ids: List[str] = storage.get_all_run_ids(user)\n        if len(existing_run_ids) > 0:\n            run_id = existing_run_ids[0]\n    assistant = Assistant(\n        run_id=run_id,\n        user_id=user,\n        knowledge_base=knowledge_base,",
        "detail": "phidata.cookbook.examples.pdf.cli",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.pdf.cli",
        "description": "phidata.cookbook.examples.pdf.cli",
        "peekOfCode": "db_url = vector_db.get_db_connection_local()\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(collection=\"recipes\", db_url=db_url),\n)\nknowledge_base.load(recreate=False)  # Comment out after first run\nstorage = PgAssistantStorage(table_name=\"pdf_assistant\", db_url=db_url)\ndef pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None\n    if not new:",
        "detail": "phidata.cookbook.examples.pdf.cli",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.pdf.cli",
        "description": "phidata.cookbook.examples.pdf.cli",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(collection=\"recipes\", db_url=db_url),\n)\nknowledge_base.load(recreate=False)  # Comment out after first run\nstorage = PgAssistantStorage(table_name=\"pdf_assistant\", db_url=db_url)\ndef pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None\n    if not new:\n        existing_run_ids: List[str] = storage.get_all_run_ids(user)",
        "detail": "phidata.cookbook.examples.pdf.cli",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.pdf.cli",
        "description": "phidata.cookbook.examples.pdf.cli",
        "peekOfCode": "storage = PgAssistantStorage(table_name=\"pdf_assistant\", db_url=db_url)\ndef pdf_assistant(new: bool = False, user: str = \"user\"):\n    run_id: Optional[str] = None\n    if not new:\n        existing_run_ids: List[str] = storage.get_all_run_ids(user)\n        if len(existing_run_ids) > 0:\n            run_id = existing_run_ids[0]\n    assistant = Assistant(\n        run_id=run_id,\n        user_id=user,",
        "detail": "phidata.cookbook.examples.pdf.cli",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.personalization.app",
        "description": "phidata.cookbook.examples.personalization.app",
        "peekOfCode": "def main() -> None:\n    # Get username\n    user_id = get_username_sidebar()\n    if user_id:\n        st.sidebar.info(f\":technologist: User: {user_id}\")\n    else:\n        st.write(\":technologist: Please enter a username\")\n        return\n    # Get the LLM to use\n    llm_id = st.sidebar.selectbox(\"Select LLM\", options=[\"gpt-4o\", \"gpt-4-turbo\"])",
        "detail": "phidata.cookbook.examples.personalization.app",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.personalization.app",
        "description": "phidata.cookbook.examples.personalization.app",
        "peekOfCode": "def restart_assistant():\n    logger.debug(\"---*--- Restarting Assistant ---*---\")\n    st.session_state[\"personalized_assistant\"] = None\n    st.session_state[\"assistant_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\nmain()",
        "detail": "phidata.cookbook.examples.personalization.app",
        "documentation": {}
    },
    {
        "label": "get_personalized_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.personalization.assistant",
        "description": "phidata.cookbook.examples.personalization.assistant",
        "peekOfCode": "def get_personalized_assistant(\n    llm_id: str = \"gpt-4o\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    calculator: bool = False,\n    ddg_search: bool = False,\n    file_tools: bool = False,\n    finance_tools: bool = False,\n    python_assistant: bool = False,\n    research_assistant: bool = False,",
        "detail": "phidata.cookbook.examples.personalization.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.personalization.assistant",
        "description": "phidata.cookbook.examples.personalization.assistant",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\ncwd = Path(__file__).parent.resolve()\nscratch_dir = cwd.joinpath(\"scratch\")\nif not scratch_dir.exists():\n    scratch_dir.mkdir(exist_ok=True, parents=True)\ndef get_personalized_assistant(\n    llm_id: str = \"gpt-4o\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    calculator: bool = False,",
        "detail": "phidata.cookbook.examples.personalization.assistant",
        "documentation": {}
    },
    {
        "label": "cwd",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.personalization.assistant",
        "description": "phidata.cookbook.examples.personalization.assistant",
        "peekOfCode": "cwd = Path(__file__).parent.resolve()\nscratch_dir = cwd.joinpath(\"scratch\")\nif not scratch_dir.exists():\n    scratch_dir.mkdir(exist_ok=True, parents=True)\ndef get_personalized_assistant(\n    llm_id: str = \"gpt-4o\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    calculator: bool = False,\n    ddg_search: bool = False,",
        "detail": "phidata.cookbook.examples.personalization.assistant",
        "documentation": {}
    },
    {
        "label": "scratch_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.personalization.assistant",
        "description": "phidata.cookbook.examples.personalization.assistant",
        "peekOfCode": "scratch_dir = cwd.joinpath(\"scratch\")\nif not scratch_dir.exists():\n    scratch_dir.mkdir(exist_ok=True, parents=True)\ndef get_personalized_assistant(\n    llm_id: str = \"gpt-4o\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    calculator: bool = False,\n    ddg_search: bool = False,\n    file_tools: bool = False,",
        "detail": "phidata.cookbook.examples.personalization.assistant",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.rag.assistant",
        "description": "phidata.cookbook.examples.rag.assistant",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(collection=\"recipes\", db_url=vector_db.get_db_connection_local()),\n)\nknowledge_base.load(recreate=False)\nassistant = Assistant(\n    knowledge_base=knowledge_base,\n    # The add_references_to_prompt flag searches the knowledge base\n    # and updates the prompt sent to the LLM.\n    add_references_to_prompt=True,",
        "detail": "phidata.cookbook.examples.rag.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.rag.assistant",
        "description": "phidata.cookbook.examples.rag.assistant",
        "peekOfCode": "assistant = Assistant(\n    knowledge_base=knowledge_base,\n    # The add_references_to_prompt flag searches the knowledge base\n    # and updates the prompt sent to the LLM.\n    add_references_to_prompt=True,\n)\nassistant.print_response(\"How do I make pad thai?\", markdown=True)",
        "detail": "phidata.cookbook.examples.rag.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "description": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "peekOfCode": "db_url = \"/tmp/lancedb\"\n# Configure the language model\nllm = Ollama(model=\"llama3:8b\", temperature=0.0)\n# Create Ollama embedder\nembedder = OllamaEmbedder(model=\"nomic-embed-text\", dimensions=768)\n# Create the vectore database\nvector_db = LanceDb(\n    table_name=\"recipes\",  # Table name in the vectore database\n    uri=db_url,  # Location to initiate/create the vector database\n    embedder=embedder,  # Without using this, it will use OpenAI embeddings by default",
        "detail": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "description": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "peekOfCode": "llm = Ollama(model=\"llama3:8b\", temperature=0.0)\n# Create Ollama embedder\nembedder = OllamaEmbedder(model=\"nomic-embed-text\", dimensions=768)\n# Create the vectore database\nvector_db = LanceDb(\n    table_name=\"recipes\",  # Table name in the vectore database\n    uri=db_url,  # Location to initiate/create the vector database\n    embedder=embedder,  # Without using this, it will use OpenAI embeddings by default\n)\n# Create a knowledge base from a PDF URL using LanceDb for vector storage and OllamaEmbedder for embedding",
        "detail": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "documentation": {}
    },
    {
        "label": "embedder",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "description": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "peekOfCode": "embedder = OllamaEmbedder(model=\"nomic-embed-text\", dimensions=768)\n# Create the vectore database\nvector_db = LanceDb(\n    table_name=\"recipes\",  # Table name in the vectore database\n    uri=db_url,  # Location to initiate/create the vector database\n    embedder=embedder,  # Without using this, it will use OpenAI embeddings by default\n)\n# Create a knowledge base from a PDF URL using LanceDb for vector storage and OllamaEmbedder for embedding\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],",
        "detail": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "documentation": {}
    },
    {
        "label": "vector_db",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "description": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "peekOfCode": "vector_db = LanceDb(\n    table_name=\"recipes\",  # Table name in the vectore database\n    uri=db_url,  # Location to initiate/create the vector database\n    embedder=embedder,  # Without using this, it will use OpenAI embeddings by default\n)\n# Create a knowledge base from a PDF URL using LanceDb for vector storage and OllamaEmbedder for embedding\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=vector_db,\n)",
        "detail": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "description": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=vector_db,\n)\n# Load the knowledge base without recreating it if it already exists in Vectore LanceDB\nknowledge_base.load(recreate=False)\n# assistant.knowledge_base.load(recreate=False) # You can also use this to load a knowledge base after creating assistant\n# Set up SQL storage for the assistant's data\nstorage = SqlAssistantStorage(table_name=\"recipies\", db_file=\"data.db\")\nstorage.create()  # Create the storage if it doesn't exist",
        "detail": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "description": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "peekOfCode": "storage = SqlAssistantStorage(table_name=\"recipies\", db_file=\"data.db\")\nstorage.create()  # Create the storage if it doesn't exist\n# Initialize the Assistant with various configurations including the knowledge base and storage\nassistant = Assistant(\n    run_id=\"run_id\",  # use any unique identifier to identify the run\n    user_id=\"user\",  # user identifier to identify the user\n    llm=llm,\n    knowledge_base=knowledge_base,\n    storage=storage,\n    tool_calls=True,  # Enable function calls for searching knowledge base and chat history",
        "detail": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "description": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "peekOfCode": "assistant = Assistant(\n    run_id=\"run_id\",  # use any unique identifier to identify the run\n    user_id=\"user\",  # user identifier to identify the user\n    llm=llm,\n    knowledge_base=knowledge_base,\n    storage=storage,\n    tool_calls=True,  # Enable function calls for searching knowledge base and chat history\n    use_tools=True,\n    show_tool_calls=True,\n    search_knowledge=True,",
        "detail": "phidata.cookbook.examples.rag_with_lance_and_sqllite.assistant",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.research.app",
        "description": "phidata.cookbook.examples.research.app",
        "peekOfCode": "def main() -> None:\n    # Get topic for report\n    input_topic = st.sidebar.text_input(\n        \":female-scientist: Enter a topic\",\n        value=\"Language Agent Tree Search\",\n    )\n    # Button to generate report\n    generate_report = st.sidebar.button(\"Generate Report\")\n    if generate_report:\n        st.session_state[\"topic\"] = input_topic",
        "detail": "phidata.cookbook.examples.research.app",
        "documentation": {}
    },
    {
        "label": "SearchTerms",
        "kind": 6,
        "importPath": "phidata.cookbook.examples.research.assistants",
        "description": "phidata.cookbook.examples.research.assistants",
        "peekOfCode": "class SearchTerms(BaseModel):\n    terms: List[str] = Field(..., description=\"List of 2 search terms related to a topic.\")\nclass ArxivSearchResult(BaseModel):\n    title: str = Field(..., description=\"Title of the article.\")\n    id: str = Field(..., description=\"The ID of the article.\")\n    summary: str = Field(..., description=\"Summary from the article.\")\n    pdf_url: str = Field(..., description=\"Url of the PDF from the article.\")\n    links: List[str] = Field(..., description=\"Links for the article.\")\n    reasoning: str = Field(..., description=\"Clear description of why you chose this article from the results.\")\nclass ArxivSearchResults(BaseModel):",
        "detail": "phidata.cookbook.examples.research.assistants",
        "documentation": {}
    },
    {
        "label": "ArxivSearchResult",
        "kind": 6,
        "importPath": "phidata.cookbook.examples.research.assistants",
        "description": "phidata.cookbook.examples.research.assistants",
        "peekOfCode": "class ArxivSearchResult(BaseModel):\n    title: str = Field(..., description=\"Title of the article.\")\n    id: str = Field(..., description=\"The ID of the article.\")\n    summary: str = Field(..., description=\"Summary from the article.\")\n    pdf_url: str = Field(..., description=\"Url of the PDF from the article.\")\n    links: List[str] = Field(..., description=\"Links for the article.\")\n    reasoning: str = Field(..., description=\"Clear description of why you chose this article from the results.\")\nclass ArxivSearchResults(BaseModel):\n    results: List[ArxivSearchResult] = Field(..., description=\"List of top search results.\")\nclass WebSearchResult(BaseModel):",
        "detail": "phidata.cookbook.examples.research.assistants",
        "documentation": {}
    },
    {
        "label": "ArxivSearchResults",
        "kind": 6,
        "importPath": "phidata.cookbook.examples.research.assistants",
        "description": "phidata.cookbook.examples.research.assistants",
        "peekOfCode": "class ArxivSearchResults(BaseModel):\n    results: List[ArxivSearchResult] = Field(..., description=\"List of top search results.\")\nclass WebSearchResult(BaseModel):\n    title: str = Field(..., description=\"Title of the article.\")\n    summary: str = Field(..., description=\"Summary from the article.\")\n    links: List[str] = Field(..., description=\"Links for the article.\")\n    reasoning: str = Field(..., description=\"Clear description of why you chose this article from the results.\")\nclass WebSearchResults(BaseModel):\n    results: List[WebSearchResult] = Field(..., description=\"List of top search results.\")\nsearch_term_generator = Assistant(",
        "detail": "phidata.cookbook.examples.research.assistants",
        "documentation": {}
    },
    {
        "label": "WebSearchResult",
        "kind": 6,
        "importPath": "phidata.cookbook.examples.research.assistants",
        "description": "phidata.cookbook.examples.research.assistants",
        "peekOfCode": "class WebSearchResult(BaseModel):\n    title: str = Field(..., description=\"Title of the article.\")\n    summary: str = Field(..., description=\"Summary from the article.\")\n    links: List[str] = Field(..., description=\"Links for the article.\")\n    reasoning: str = Field(..., description=\"Clear description of why you chose this article from the results.\")\nclass WebSearchResults(BaseModel):\n    results: List[WebSearchResult] = Field(..., description=\"List of top search results.\")\nsearch_term_generator = Assistant(\n    name=\"Search Term Generator\",\n    description=dedent(",
        "detail": "phidata.cookbook.examples.research.assistants",
        "documentation": {}
    },
    {
        "label": "WebSearchResults",
        "kind": 6,
        "importPath": "phidata.cookbook.examples.research.assistants",
        "description": "phidata.cookbook.examples.research.assistants",
        "peekOfCode": "class WebSearchResults(BaseModel):\n    results: List[WebSearchResult] = Field(..., description=\"List of top search results.\")\nsearch_term_generator = Assistant(\n    name=\"Search Term Generator\",\n    description=dedent(\n        \"\"\"\\\n    You are a world-class researcher assigned a very important task.\n    Given a topic, generate a list of 2 search terms that will be used to search the web for\n    relevant articles regarding the topic.\n    \"\"\"",
        "detail": "phidata.cookbook.examples.research.assistants",
        "documentation": {}
    },
    {
        "label": "arxiv_toolkit",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.research.assistants",
        "description": "phidata.cookbook.examples.research.assistants",
        "peekOfCode": "arxiv_toolkit = ArxivToolkit(download_dir=Path(__file__).parent.parent.parent.parent.joinpath(\"wip\", \"arxiv_pdfs\"))\nclass SearchTerms(BaseModel):\n    terms: List[str] = Field(..., description=\"List of 2 search terms related to a topic.\")\nclass ArxivSearchResult(BaseModel):\n    title: str = Field(..., description=\"Title of the article.\")\n    id: str = Field(..., description=\"The ID of the article.\")\n    summary: str = Field(..., description=\"Summary from the article.\")\n    pdf_url: str = Field(..., description=\"Url of the PDF from the article.\")\n    links: List[str] = Field(..., description=\"Links for the article.\")\n    reasoning: str = Field(..., description=\"Clear description of why you chose this article from the results.\")",
        "detail": "phidata.cookbook.examples.research.assistants",
        "documentation": {}
    },
    {
        "label": "search_term_generator",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.research.assistants",
        "description": "phidata.cookbook.examples.research.assistants",
        "peekOfCode": "search_term_generator = Assistant(\n    name=\"Search Term Generator\",\n    description=dedent(\n        \"\"\"\\\n    You are a world-class researcher assigned a very important task.\n    Given a topic, generate a list of 2 search terms that will be used to search the web for\n    relevant articles regarding the topic.\n    \"\"\"\n    ),\n    add_datetime_to_instructions=True,",
        "detail": "phidata.cookbook.examples.research.assistants",
        "documentation": {}
    },
    {
        "label": "arxiv_search_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.research.assistants",
        "description": "phidata.cookbook.examples.research.assistants",
        "peekOfCode": "arxiv_search_assistant = Assistant(\n    name=\"Arxiv Search Assistant\",\n    description=dedent(\n        \"\"\"\\\n    You are a world-class researcher assigned a very important task.\n    Given a topic, search ArXiv for the top 10 articles about that topic and return the 3 most relevant articles.\n    This is an important task and your output should be highly relevant to the original topic.\n    \"\"\"\n    ),\n    tools=[arxiv_toolkit],",
        "detail": "phidata.cookbook.examples.research.assistants",
        "documentation": {}
    },
    {
        "label": "exa_search_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.research.assistants",
        "description": "phidata.cookbook.examples.research.assistants",
        "peekOfCode": "exa_search_assistant = Assistant(\n    name=\"Exa Search Assistant\",\n    description=dedent(\n        \"\"\"\\\n    You are a world-class researcher assigned a very important task.\n    Given a topic, search Exa for the top 10 articles about that topic and return the 3 most relevant articles.\n    You should return the article title, summary, and the content of the article.\n    This is an important task and your output should be highly relevant to the original topic.\n    \"\"\"\n    ),",
        "detail": "phidata.cookbook.examples.research.assistants",
        "documentation": {}
    },
    {
        "label": "ddg_search_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.research.assistants",
        "description": "phidata.cookbook.examples.research.assistants",
        "peekOfCode": "ddg_search_assistant = Assistant(\n    name=\"DuckDuckGo Search Assistant\",\n    description=dedent(\n        \"\"\"\\\n    You are a world-class researcher assigned a very important task.\n    Given a topic, search duckduckgo for the top 10 articles about that topic and return the 3 most relevant articles.\n    You should return the article title, summary, and the content of the article.\n    This is an important task and your output should be highly relevant to the original topic.\n    \"\"\"\n    ),",
        "detail": "phidata.cookbook.examples.research.assistants",
        "documentation": {}
    },
    {
        "label": "research_editor",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.research.assistants",
        "description": "phidata.cookbook.examples.research.assistants",
        "peekOfCode": "research_editor = Assistant(\n    name=\"Research Editor\",\n    description=\"You are a world-class researcher and your task is to generate a NYT cover story worthy research report.\",\n    instructions=[\n        \"You will be provided with a topic and a list of articles along with their summary and content.\",\n        \"Carefully read each articles and generate a NYT worthy report that can be published as the cover story.\",\n        \"Focus on providing a high-level overview of the topic and the key findings from the articles.\",\n        \"Do not copy the content from the articles, but use the information to generate a high-quality report.\",\n        \"Do not include any personal opinions or biases in the report.\",\n    ],",
        "detail": "phidata.cookbook.examples.research.assistants",
        "documentation": {}
    },
    {
        "label": "topic",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.research.generate_report",
        "description": "phidata.cookbook.examples.research.generate_report",
        "peekOfCode": "topic = \"Latest AI in Healthcare Research\"\n# Generate a list of search terms\nsearch_terms: SearchTerms = search_term_generator.run(topic)  # type: ignore\npprint(search_terms)\n# Generate a list of search results\narxiv_search_results: List[ArxivSearchResults] = []\nfor search_term in search_terms.terms:\n    search_results: ArxivSearchResults = arxiv_search_assistant.run(search_term)  # type: ignore\n    arxiv_search_results.append(search_results)\n# pprint(arxiv_search_results)",
        "detail": "phidata.cookbook.examples.research.generate_report",
        "documentation": {}
    },
    {
        "label": "search_result_ids",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.research.generate_report",
        "description": "phidata.cookbook.examples.research.generate_report",
        "peekOfCode": "search_result_ids = []\nfor search_result in arxiv_search_results:\n    search_result_ids.extend([result.id for result in search_result.results])\n# Read ArXiv papers\narxiv_content = arxiv_toolkit.read_arxiv_papers(search_result_ids, pages_to_read=2)\n# Get web content\nweb_content = exa_search_assistant.run(search_terms.model_dump_json())  # type: ignore\nreport_input = \"\"\nreport_input += f\"# Topic: {topic}\\n\\n\"\nreport_input += \"## Search Terms\\n\\n\"",
        "detail": "phidata.cookbook.examples.research.generate_report",
        "documentation": {}
    },
    {
        "label": "arxiv_content",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.research.generate_report",
        "description": "phidata.cookbook.examples.research.generate_report",
        "peekOfCode": "arxiv_content = arxiv_toolkit.read_arxiv_papers(search_result_ids, pages_to_read=2)\n# Get web content\nweb_content = exa_search_assistant.run(search_terms.model_dump_json())  # type: ignore\nreport_input = \"\"\nreport_input += f\"# Topic: {topic}\\n\\n\"\nreport_input += \"## Search Terms\\n\\n\"\nreport_input += f\"{search_terms}\\n\\n\"\nif arxiv_content:\n    report_input += \"## ArXiv Papers\\n\\n\"\n    report_input += \"<arxiv_papers>\\n\\n\"",
        "detail": "phidata.cookbook.examples.research.generate_report",
        "documentation": {}
    },
    {
        "label": "web_content",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.research.generate_report",
        "description": "phidata.cookbook.examples.research.generate_report",
        "peekOfCode": "web_content = exa_search_assistant.run(search_terms.model_dump_json())  # type: ignore\nreport_input = \"\"\nreport_input += f\"# Topic: {topic}\\n\\n\"\nreport_input += \"## Search Terms\\n\\n\"\nreport_input += f\"{search_terms}\\n\\n\"\nif arxiv_content:\n    report_input += \"## ArXiv Papers\\n\\n\"\n    report_input += \"<arxiv_papers>\\n\\n\"\n    report_input += f\"{arxiv_content}\\n\\n\"\n    report_input += \"</arxiv_papers>\\n\\n\"",
        "detail": "phidata.cookbook.examples.research.generate_report",
        "documentation": {}
    },
    {
        "label": "report_input",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.research.generate_report",
        "description": "phidata.cookbook.examples.research.generate_report",
        "peekOfCode": "report_input = \"\"\nreport_input += f\"# Topic: {topic}\\n\\n\"\nreport_input += \"## Search Terms\\n\\n\"\nreport_input += f\"{search_terms}\\n\\n\"\nif arxiv_content:\n    report_input += \"## ArXiv Papers\\n\\n\"\n    report_input += \"<arxiv_papers>\\n\\n\"\n    report_input += f\"{arxiv_content}\\n\\n\"\n    report_input += \"</arxiv_papers>\\n\\n\"\nif web_content:",
        "detail": "phidata.cookbook.examples.research.generate_report",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.sql.app",
        "description": "phidata.cookbook.examples.sql.app",
        "peekOfCode": "def restart_assistant():\n    st.session_state[\"sql_assistant\"] = None\n    st.session_state[\"sql_assistant_run_id\"] = None\n    st.rerun()\ndef main() -> None:\n    # Get the assistant\n    sql_assistant: Assistant\n    if \"sql_assistant\" not in st.session_state or st.session_state[\"sql_assistant\"] is None:\n        if \"sql_assistant_run_id\" in st.session_state and st.session_state[\"sql_assistant_run_id\"] is not None:\n            logger.info(\"---*--- Reading SQL Assistant ---*---\")",
        "detail": "phidata.cookbook.examples.sql.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.sql.app",
        "description": "phidata.cookbook.examples.sql.app",
        "peekOfCode": "def main() -> None:\n    # Get the assistant\n    sql_assistant: Assistant\n    if \"sql_assistant\" not in st.session_state or st.session_state[\"sql_assistant\"] is None:\n        if \"sql_assistant_run_id\" in st.session_state and st.session_state[\"sql_assistant_run_id\"] is not None:\n            logger.info(\"---*--- Reading SQL Assistant ---*---\")\n            sql_assistant = get_sql_assistant(run_id=st.session_state[\"sql_assistant_run_id\"])\n        else:\n            logger.info(\"---*--- Creating new SQL Assistant ---*---\")\n            sql_assistant = get_sql_assistant()",
        "detail": "phidata.cookbook.examples.sql.app",
        "documentation": {}
    },
    {
        "label": "get_sql_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.sql.assistant",
        "description": "phidata.cookbook.examples.sql.assistant",
        "peekOfCode": "def get_sql_assistant(\n    run_id: Optional[str] = None,\n    user_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Returns a Sql Assistant.\"\"\"\n    return Assistant(\n        name=\"sql_assistant\",\n        run_id=run_id,\n        user_id=user_id,",
        "detail": "phidata.cookbook.examples.sql.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.sql.assistant",
        "description": "phidata.cookbook.examples.sql.assistant",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\n# *******************************\n# ************* Paths *************\ncwd = Path(__file__).parent\nknowledge_base_dir = cwd.joinpath(\"knowledge_base\")\nroot_dir = cwd.parent.parent.parent\nwip_dir = root_dir.joinpath(\"wip\")\nsql_queries_dir = wip_dir.joinpath(\"queries\")\n# Create the wip/queries directory if it does not exist\nsql_queries_dir.mkdir(parents=True, exist_ok=True)",
        "detail": "phidata.cookbook.examples.sql.assistant",
        "documentation": {}
    },
    {
        "label": "cwd",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.sql.assistant",
        "description": "phidata.cookbook.examples.sql.assistant",
        "peekOfCode": "cwd = Path(__file__).parent\nknowledge_base_dir = cwd.joinpath(\"knowledge_base\")\nroot_dir = cwd.parent.parent.parent\nwip_dir = root_dir.joinpath(\"wip\")\nsql_queries_dir = wip_dir.joinpath(\"queries\")\n# Create the wip/queries directory if it does not exist\nsql_queries_dir.mkdir(parents=True, exist_ok=True)\n# *******************************\n# ************* Storage & Knowledge *************\nassistant_storage = PgAssistantStorage(",
        "detail": "phidata.cookbook.examples.sql.assistant",
        "documentation": {}
    },
    {
        "label": "knowledge_base_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.sql.assistant",
        "description": "phidata.cookbook.examples.sql.assistant",
        "peekOfCode": "knowledge_base_dir = cwd.joinpath(\"knowledge_base\")\nroot_dir = cwd.parent.parent.parent\nwip_dir = root_dir.joinpath(\"wip\")\nsql_queries_dir = wip_dir.joinpath(\"queries\")\n# Create the wip/queries directory if it does not exist\nsql_queries_dir.mkdir(parents=True, exist_ok=True)\n# *******************************\n# ************* Storage & Knowledge *************\nassistant_storage = PgAssistantStorage(\n    schema=\"ai\",",
        "detail": "phidata.cookbook.examples.sql.assistant",
        "documentation": {}
    },
    {
        "label": "root_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.sql.assistant",
        "description": "phidata.cookbook.examples.sql.assistant",
        "peekOfCode": "root_dir = cwd.parent.parent.parent\nwip_dir = root_dir.joinpath(\"wip\")\nsql_queries_dir = wip_dir.joinpath(\"queries\")\n# Create the wip/queries directory if it does not exist\nsql_queries_dir.mkdir(parents=True, exist_ok=True)\n# *******************************\n# ************* Storage & Knowledge *************\nassistant_storage = PgAssistantStorage(\n    schema=\"ai\",\n    # Store assistant runs in ai.sql_assistant_runs table",
        "detail": "phidata.cookbook.examples.sql.assistant",
        "documentation": {}
    },
    {
        "label": "wip_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.sql.assistant",
        "description": "phidata.cookbook.examples.sql.assistant",
        "peekOfCode": "wip_dir = root_dir.joinpath(\"wip\")\nsql_queries_dir = wip_dir.joinpath(\"queries\")\n# Create the wip/queries directory if it does not exist\nsql_queries_dir.mkdir(parents=True, exist_ok=True)\n# *******************************\n# ************* Storage & Knowledge *************\nassistant_storage = PgAssistantStorage(\n    schema=\"ai\",\n    # Store assistant runs in ai.sql_assistant_runs table\n    table_name=\"sql_assistant_runs\",",
        "detail": "phidata.cookbook.examples.sql.assistant",
        "documentation": {}
    },
    {
        "label": "sql_queries_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.sql.assistant",
        "description": "phidata.cookbook.examples.sql.assistant",
        "peekOfCode": "sql_queries_dir = wip_dir.joinpath(\"queries\")\n# Create the wip/queries directory if it does not exist\nsql_queries_dir.mkdir(parents=True, exist_ok=True)\n# *******************************\n# ************* Storage & Knowledge *************\nassistant_storage = PgAssistantStorage(\n    schema=\"ai\",\n    # Store assistant runs in ai.sql_assistant_runs table\n    table_name=\"sql_assistant_runs\",\n    db_url=db_url,",
        "detail": "phidata.cookbook.examples.sql.assistant",
        "documentation": {}
    },
    {
        "label": "assistant_storage",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.sql.assistant",
        "description": "phidata.cookbook.examples.sql.assistant",
        "peekOfCode": "assistant_storage = PgAssistantStorage(\n    schema=\"ai\",\n    # Store assistant runs in ai.sql_assistant_runs table\n    table_name=\"sql_assistant_runs\",\n    db_url=db_url,\n)\nassistant_knowledge = CombinedKnowledgeBase(\n    sources=[\n        # Reads text files, SQL files, and markdown files\n        TextKnowledgeBase(",
        "detail": "phidata.cookbook.examples.sql.assistant",
        "documentation": {}
    },
    {
        "label": "assistant_knowledge",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.sql.assistant",
        "description": "phidata.cookbook.examples.sql.assistant",
        "peekOfCode": "assistant_knowledge = CombinedKnowledgeBase(\n    sources=[\n        # Reads text files, SQL files, and markdown files\n        TextKnowledgeBase(\n            path=cwd.joinpath(\"knowledge_base\"),\n            formats=[\".txt\", \".sql\", \".md\"],\n        ),\n        # Reads JSON files\n        JSONKnowledgeBase(path=cwd.joinpath(\"knowledge_base\")),\n    ],",
        "detail": "phidata.cookbook.examples.sql.assistant",
        "documentation": {}
    },
    {
        "label": "semantic_model",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.sql.assistant",
        "description": "phidata.cookbook.examples.sql.assistant",
        "peekOfCode": "semantic_model = {\n    \"tables\": [\n        {\n            \"table_name\": \"constructors_championship\",\n            \"table_description\": \"Contains data for the constructor's championship from 1958 to 2020, capturing championship standings from when it was introduced.\",\n            \"Use Case\": \"Use this table to get data on constructor's championship for various years or when analyzing team performance over the years.\",\n        },\n        {\n            \"table_name\": \"drivers_championship\",\n            \"table_description\": \"Contains data for driver's championship standings from 1950-2020, detailing driver positions, teams, and points.\",",
        "detail": "phidata.cookbook.examples.sql.assistant",
        "documentation": {}
    },
    {
        "label": "load_sql_assistant_knowledge_base",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.sql.load_knowledge",
        "description": "phidata.cookbook.examples.sql.load_knowledge",
        "peekOfCode": "def load_sql_assistant_knowledge_base(recreate: bool = True):\n    logger.info(\"Loading SQL Assistant knowledge.\")\n    assistant_knowledge.load(recreate=recreate)\n    logger.info(\"SQL Assistant knowledge loaded.\")\nif __name__ == \"__main__\":\n    load_sql_assistant_knowledge_base()",
        "detail": "phidata.cookbook.examples.sql.load_knowledge",
        "documentation": {}
    },
    {
        "label": "load_database",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.sql.load_sample_data",
        "description": "phidata.cookbook.examples.sql.load_sample_data",
        "peekOfCode": "def load_database():\n    logger.info(\"Loading database.\")\n    engine = create_engine(db_url)\n    # Load each CSV file into the corresponding PostgreSQL table\n    for file_path, table_name in files_to_tables.items():\n        logger.info(f\"Loading {file_path} into {table_name} table.\")\n        df = pd.read_csv(file_path)\n        df.to_sql(table_name, engine, if_exists=\"replace\", index=False)\n        logger.info(f\"{file_path} loaded into {table_name} table.\")\n    logger.info(\"Database loaded.\")",
        "detail": "phidata.cookbook.examples.sql.load_sample_data",
        "documentation": {}
    },
    {
        "label": "s3_uri",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.sql.load_sample_data",
        "description": "phidata.cookbook.examples.sql.load_sample_data",
        "peekOfCode": "s3_uri = \"https://phi-public.s3.amazonaws.com/f1\"\n# List of files and their corresponding table names\nfiles_to_tables = {\n    f\"{s3_uri}/constructors_championship_1958_2020.csv\": \"constructors_championship\",\n    f\"{s3_uri}/drivers_championship_1950_2020.csv\": \"drivers_championship\",\n    f\"{s3_uri}/fastest_laps_1950_to_2020.csv\": \"fastest_laps\",\n    f\"{s3_uri}/race_results_1950_to_2020.csv\": \"race_results\",\n    f\"{s3_uri}/race_wins_1950_to_2020.csv\": \"race_wins\",\n}\ndef load_database():",
        "detail": "phidata.cookbook.examples.sql.load_sample_data",
        "documentation": {}
    },
    {
        "label": "files_to_tables",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.sql.load_sample_data",
        "description": "phidata.cookbook.examples.sql.load_sample_data",
        "peekOfCode": "files_to_tables = {\n    f\"{s3_uri}/constructors_championship_1958_2020.csv\": \"constructors_championship\",\n    f\"{s3_uri}/drivers_championship_1950_2020.csv\": \"drivers_championship\",\n    f\"{s3_uri}/fastest_laps_1950_to_2020.csv\": \"fastest_laps\",\n    f\"{s3_uri}/race_results_1950_to_2020.csv\": \"race_results\",\n    f\"{s3_uri}/race_wins_1950_to_2020.csv\": \"race_wins\",\n}\ndef load_database():\n    logger.info(\"Loading database.\")\n    engine = create_engine(db_url)",
        "detail": "phidata.cookbook.examples.sql.load_sample_data",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.examples.structured_output.movie_generator",
        "description": "phidata.cookbook.examples.structured_output.movie_generator",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.examples.structured_output.movie_generator",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.structured_output.movie_generator",
        "description": "phidata.cookbook.examples.structured_output.movie_generator",
        "peekOfCode": "movie_assistant = Assistant(\n    description=\"You help people write movie ideas.\",\n    output_model=MovieScript,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.examples.structured_output.movie_generator",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.examples.structured_output.movie_list_generator",
        "description": "phidata.cookbook.examples.structured_output.movie_list_generator",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(..., description=\"Genre of the movie.\")\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nclass MovieScripts(BaseModel):\n    items: List[MovieScript] = Field(..., description=\"List of movie scripts.\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.examples.structured_output.movie_list_generator",
        "documentation": {}
    },
    {
        "label": "MovieScripts",
        "kind": 6,
        "importPath": "phidata.cookbook.examples.structured_output.movie_list_generator",
        "description": "phidata.cookbook.examples.structured_output.movie_list_generator",
        "peekOfCode": "class MovieScripts(BaseModel):\n    items: List[MovieScript] = Field(..., description=\"List of movie scripts.\")\nmovie_assistant = Assistant(\n    description=\"You help people write movie ideas.\",\n    instructions=[\n        \"Given a setting by the user, respond with 3 movie script with different genres.\",\n    ],\n    output_model=MovieScripts,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.examples.structured_output.movie_list_generator",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.structured_output.movie_list_generator",
        "description": "phidata.cookbook.examples.structured_output.movie_list_generator",
        "peekOfCode": "movie_assistant = Assistant(\n    description=\"You help people write movie ideas.\",\n    instructions=[\n        \"Given a setting by the user, respond with 3 movie script with different genres.\",\n    ],\n    output_model=MovieScripts,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.examples.structured_output.movie_list_generator",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.worldbuilding.app",
        "description": "phidata.cookbook.examples.worldbuilding.app",
        "peekOfCode": "def restart_assistant():\n    st.session_state[\"world_builder\"] = None\n    st.session_state[\"world_explorer\"] = None\n    st.session_state[\"world_explorer_run_id\"] = None\n    st.rerun()\ndef main() -> None:\n    # Get model\n    model = st.sidebar.selectbox(\"Select Model\", options=[\"openhermes\", \"llama2\"])\n    # Set assistant_type in session state\n    if \"model\" not in st.session_state:",
        "detail": "phidata.cookbook.examples.worldbuilding.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.worldbuilding.app",
        "description": "phidata.cookbook.examples.worldbuilding.app",
        "peekOfCode": "def main() -> None:\n    # Get model\n    model = st.sidebar.selectbox(\"Select Model\", options=[\"openhermes\", \"llama2\"])\n    # Set assistant_type in session state\n    if \"model\" not in st.session_state:\n        st.session_state[\"model\"] = model\n    # Restart the assistant if assistant_type has changed\n    elif st.session_state[\"model\"] != model:\n        st.session_state[\"model\"] = model\n        restart_assistant()",
        "detail": "phidata.cookbook.examples.worldbuilding.app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.worldbuilding.app",
        "description": "phidata.cookbook.examples.worldbuilding.app",
        "peekOfCode": "logger = getLogger(__name__)\nst.set_page_config(\n    page_title=\"World Building\",\n    page_icon=\":ringed_planet:\",\n)\nst.title(\"World Building using OpenHermes and Ollama\")\nst.markdown(\"##### :orange_heart: built using [phidata](https://github.com/phidatahq/phidata)\")\nwith st.expander(\":rainbow[:point_down: How to use]\"):\n    st.markdown(\"- Generate a new world by providing a brief description\")\n    st.markdown(\"- Ask questions about the world and explore it\")",
        "detail": "phidata.cookbook.examples.worldbuilding.app",
        "documentation": {}
    },
    {
        "label": "World",
        "kind": 6,
        "importPath": "phidata.cookbook.examples.worldbuilding.assistant",
        "description": "phidata.cookbook.examples.worldbuilding.assistant",
        "peekOfCode": "class World(BaseModel):\n    name: str = Field(\n        ...,\n        description=\"This is the name of our world Be as creative as possible. Do not use simple names like Futura, Earth, etc.\",\n    )\n    characteristics: List[str] = Field(\n        ...,\n        description=\"These are the characteristics of the world. Examples: Magical, Advanced, Peaceful, War-torn, Abundant, etc. Be as creative as possible.\",\n    )\n    currency: str = Field(..., description=\"This is the currency used in the world. Be as creative as possible.\")",
        "detail": "phidata.cookbook.examples.worldbuilding.assistant",
        "documentation": {}
    },
    {
        "label": "get_world_builder",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.worldbuilding.assistant",
        "description": "phidata.cookbook.examples.worldbuilding.assistant",
        "peekOfCode": "def get_world_builder(\n    model: str = \"openhermes\",\n    temperature: float = 0.1,\n    debug_mode: bool = False,\n) -> Assistant:\n    return Assistant(\n        name=\"world_builder\",\n        llm=Ollama(model=model, options={\"temperature\": temperature}),\n        description=\"You are an expert world builder designing an intricate and complex world.\",\n        instructions=[",
        "detail": "phidata.cookbook.examples.worldbuilding.assistant",
        "documentation": {}
    },
    {
        "label": "get_world_explorer",
        "kind": 2,
        "importPath": "phidata.cookbook.examples.worldbuilding.assistant",
        "description": "phidata.cookbook.examples.worldbuilding.assistant",
        "peekOfCode": "def get_world_explorer(\n    world: World,\n    model: str = \"openhermes\",\n    temperature: float = 0.1,\n    debug_mode: bool = False,\n) -> Optional[Assistant]:\n    if world is None:\n        return None\n    return Assistant(\n        name=\"world_explorer\",",
        "detail": "phidata.cookbook.examples.worldbuilding.assistant",
        "documentation": {}
    },
    {
        "label": "World",
        "kind": 6,
        "importPath": "phidata.cookbook.examples.worldbuilding.world_builder",
        "description": "phidata.cookbook.examples.worldbuilding.world_builder",
        "peekOfCode": "class World(BaseModel):\n    name: str = Field(\n        ...,\n        description=\"This is the name of the world. Be as creative as possible. Do not use simple names like Futura, Earth etc.\",\n    )\n    characteristics: List[str] = Field(\n        ..., description=\"These are the characteristics of the world. Be as creative as possible.\"\n    )\n    drugs: List[str] = Field(\n        ..., description=\"These are the drugs the people in the world use. Be as creative as possible.\"",
        "detail": "phidata.cookbook.examples.worldbuilding.world_builder",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.worldbuilding.world_explorer",
        "description": "phidata.cookbook.examples.worldbuilding.world_explorer",
        "peekOfCode": "model = \"openhermes\"\ntemperature = 0.1\nworld_builder = get_world_builder(model=model, temperature=temperature)\nworld: World = world_builder.run(  # type: ignore\n    \"A highly advanced futuristic city on a distant planet with a population of over 1 trillion.\"\n)\npprint(\"============== World ==============\")\npprint(world)\npprint(\"============== World ==============\")\nworld_explorer = get_world_explorer(model=model, temperature=temperature, world=world, debug_mode=False)",
        "detail": "phidata.cookbook.examples.worldbuilding.world_explorer",
        "documentation": {}
    },
    {
        "label": "temperature",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.worldbuilding.world_explorer",
        "description": "phidata.cookbook.examples.worldbuilding.world_explorer",
        "peekOfCode": "temperature = 0.1\nworld_builder = get_world_builder(model=model, temperature=temperature)\nworld: World = world_builder.run(  # type: ignore\n    \"A highly advanced futuristic city on a distant planet with a population of over 1 trillion.\"\n)\npprint(\"============== World ==============\")\npprint(world)\npprint(\"============== World ==============\")\nworld_explorer = get_world_explorer(model=model, temperature=temperature, world=world, debug_mode=False)\nworld_explorer.cli_app(markdown=True)",
        "detail": "phidata.cookbook.examples.worldbuilding.world_explorer",
        "documentation": {}
    },
    {
        "label": "world_builder",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.worldbuilding.world_explorer",
        "description": "phidata.cookbook.examples.worldbuilding.world_explorer",
        "peekOfCode": "world_builder = get_world_builder(model=model, temperature=temperature)\nworld: World = world_builder.run(  # type: ignore\n    \"A highly advanced futuristic city on a distant planet with a population of over 1 trillion.\"\n)\npprint(\"============== World ==============\")\npprint(world)\npprint(\"============== World ==============\")\nworld_explorer = get_world_explorer(model=model, temperature=temperature, world=world, debug_mode=False)\nworld_explorer.cli_app(markdown=True)",
        "detail": "phidata.cookbook.examples.worldbuilding.world_explorer",
        "documentation": {}
    },
    {
        "label": "world_explorer",
        "kind": 5,
        "importPath": "phidata.cookbook.examples.worldbuilding.world_explorer",
        "description": "phidata.cookbook.examples.worldbuilding.world_explorer",
        "peekOfCode": "world_explorer = get_world_explorer(model=model, temperature=temperature, world=world, debug_mode=False)\nworld_explorer.cli_app(markdown=True)",
        "detail": "phidata.cookbook.examples.worldbuilding.world_explorer",
        "documentation": {}
    },
    {
        "label": "pdf_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.integrations.lancedb.assistant",
        "description": "phidata.cookbook.integrations.lancedb.assistant",
        "peekOfCode": "def pdf_assistant(user: str = \"user\"):\n    run_id: Optional[str] = None\n    assistant = Assistant(\n        run_id=run_id,\n        user_id=user,\n        knowledge_base=knowledge_base,\n        # tool_calls=True adds functions to\n        # search the knowledge base and chat history\n        use_tools=True,\n        show_tool_calls=True,",
        "detail": "phidata.cookbook.integrations.lancedb.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.lancedb.assistant",
        "description": "phidata.cookbook.integrations.lancedb.assistant",
        "peekOfCode": "db_url = \"/tmp/lancedb\"\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=LanceDb(table_name=\"recipes\", uri=db_url),\n)\n# Comment out after first run\nknowledge_base.load(recreate=False)\ndef pdf_assistant(user: str = \"user\"):\n    run_id: Optional[str] = None\n    assistant = Assistant(",
        "detail": "phidata.cookbook.integrations.lancedb.assistant",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.lancedb.assistant",
        "description": "phidata.cookbook.integrations.lancedb.assistant",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=LanceDb(table_name=\"recipes\", uri=db_url),\n)\n# Comment out after first run\nknowledge_base.load(recreate=False)\ndef pdf_assistant(user: str = \"user\"):\n    run_id: Optional[str] = None\n    assistant = Assistant(\n        run_id=run_id,",
        "detail": "phidata.cookbook.integrations.lancedb.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.pgvector.assistant",
        "description": "phidata.cookbook.integrations.pgvector.assistant",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\nassistant = Assistant(\n    storage=PgAssistantStorage(table_name=\"recipe_assistant\", db_url=db_url),\n    knowledge_base=PDFUrlKnowledgeBase(\n        urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n        vector_db=PgVector2(collection=\"recipe_documents\", db_url=db_url),\n    ),\n    # Show tool calls in the response\n    show_tool_calls=True,\n    # Enable the assistant to search the knowledge base",
        "detail": "phidata.cookbook.integrations.pgvector.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.pgvector.assistant",
        "description": "phidata.cookbook.integrations.pgvector.assistant",
        "peekOfCode": "assistant = Assistant(\n    storage=PgAssistantStorage(table_name=\"recipe_assistant\", db_url=db_url),\n    knowledge_base=PDFUrlKnowledgeBase(\n        urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n        vector_db=PgVector2(collection=\"recipe_documents\", db_url=db_url),\n    ),\n    # Show tool calls in the response\n    show_tool_calls=True,\n    # Enable the assistant to search the knowledge base\n    search_knowledge=True,",
        "detail": "phidata.cookbook.integrations.pgvector.assistant",
        "documentation": {}
    },
    {
        "label": "pinecone_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.integrations.pinecone.assistant",
        "description": "phidata.cookbook.integrations.pinecone.assistant",
        "peekOfCode": "def pinecone_assistant(user: str = \"user\"):\n    run_id: Optional[str] = None\n    assistant = Assistant(\n        run_id=run_id,\n        user_id=user,\n        knowledge_base=knowledge_base,\n        tool_calls=True,\n        use_tools=True,\n        show_tool_calls=True,\n        debug_mode=True,",
        "detail": "phidata.cookbook.integrations.pinecone.assistant",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.pinecone.assistant",
        "description": "phidata.cookbook.integrations.pinecone.assistant",
        "peekOfCode": "api_key = os.getenv(\"PINECONE_API_KEY\")\nindex_name = \"thai-recipe-index\"\nvector_db = PineconeDB(\n    name=index_name,\n    dimension=1536,\n    metric=\"cosine\",\n    spec={\"serverless\": {\"cloud\": \"aws\", \"region\": \"us-west-2\"}},\n    api_key=api_key,\n)\nknowledge_base = PDFUrlKnowledgeBase(",
        "detail": "phidata.cookbook.integrations.pinecone.assistant",
        "documentation": {}
    },
    {
        "label": "index_name",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.pinecone.assistant",
        "description": "phidata.cookbook.integrations.pinecone.assistant",
        "peekOfCode": "index_name = \"thai-recipe-index\"\nvector_db = PineconeDB(\n    name=index_name,\n    dimension=1536,\n    metric=\"cosine\",\n    spec={\"serverless\": {\"cloud\": \"aws\", \"region\": \"us-west-2\"}},\n    api_key=api_key,\n)\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],",
        "detail": "phidata.cookbook.integrations.pinecone.assistant",
        "documentation": {}
    },
    {
        "label": "vector_db",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.pinecone.assistant",
        "description": "phidata.cookbook.integrations.pinecone.assistant",
        "peekOfCode": "vector_db = PineconeDB(\n    name=index_name,\n    dimension=1536,\n    metric=\"cosine\",\n    spec={\"serverless\": {\"cloud\": \"aws\", \"region\": \"us-west-2\"}},\n    api_key=api_key,\n)\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=vector_db,",
        "detail": "phidata.cookbook.integrations.pinecone.assistant",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.pinecone.assistant",
        "description": "phidata.cookbook.integrations.pinecone.assistant",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=vector_db,\n)\n# Comment out after first run\nknowledge_base.load(recreate=False, upsert=True)\ndef pinecone_assistant(user: str = \"user\"):\n    run_id: Optional[str] = None\n    assistant = Assistant(\n        run_id=run_id,",
        "detail": "phidata.cookbook.integrations.pinecone.assistant",
        "documentation": {}
    },
    {
        "label": "qdrant_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.integrations.qdrant.assistant",
        "description": "phidata.cookbook.integrations.qdrant.assistant",
        "peekOfCode": "def qdrant_assistant(user: str = \"user\"):\n    run_id: Optional[str] = None\n    assistant = Assistant(\n        run_id=run_id,\n        user_id=user,\n        knowledge_base=knowledge_base,\n        tool_calls=True,\n        use_tools=True,\n        show_tool_calls=True,\n        debug_mode=True,",
        "detail": "phidata.cookbook.integrations.qdrant.assistant",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.qdrant.assistant",
        "description": "phidata.cookbook.integrations.qdrant.assistant",
        "peekOfCode": "api_key = os.getenv(\"QDRANT_API_KEY\")\nqdrant_url = os.getenv(\"QDRANT_URL\")\ncollection_name = \"thai-recipe-index\"\nvector_db = Qdrant(\n    collection=collection_name,\n    url=qdrant_url,\n    api_key=api_key,\n)\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],",
        "detail": "phidata.cookbook.integrations.qdrant.assistant",
        "documentation": {}
    },
    {
        "label": "qdrant_url",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.qdrant.assistant",
        "description": "phidata.cookbook.integrations.qdrant.assistant",
        "peekOfCode": "qdrant_url = os.getenv(\"QDRANT_URL\")\ncollection_name = \"thai-recipe-index\"\nvector_db = Qdrant(\n    collection=collection_name,\n    url=qdrant_url,\n    api_key=api_key,\n)\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=vector_db,",
        "detail": "phidata.cookbook.integrations.qdrant.assistant",
        "documentation": {}
    },
    {
        "label": "collection_name",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.qdrant.assistant",
        "description": "phidata.cookbook.integrations.qdrant.assistant",
        "peekOfCode": "collection_name = \"thai-recipe-index\"\nvector_db = Qdrant(\n    collection=collection_name,\n    url=qdrant_url,\n    api_key=api_key,\n)\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=vector_db,\n)",
        "detail": "phidata.cookbook.integrations.qdrant.assistant",
        "documentation": {}
    },
    {
        "label": "vector_db",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.qdrant.assistant",
        "description": "phidata.cookbook.integrations.qdrant.assistant",
        "peekOfCode": "vector_db = Qdrant(\n    collection=collection_name,\n    url=qdrant_url,\n    api_key=api_key,\n)\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=vector_db,\n)\n# Comment out after first run",
        "detail": "phidata.cookbook.integrations.qdrant.assistant",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.qdrant.assistant",
        "description": "phidata.cookbook.integrations.qdrant.assistant",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=vector_db,\n)\n# Comment out after first run\nknowledge_base.load(recreate=True, upsert=True)\ndef qdrant_assistant(user: str = \"user\"):\n    run_id: Optional[str] = None\n    assistant = Assistant(\n        run_id=run_id,",
        "detail": "phidata.cookbook.integrations.qdrant.assistant",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.pages.1_Research_Assistant",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.pages.1_Research_Assistant",
        "peekOfCode": "def restart_assistant():\n    logger.debug(\"---*--- Restarting Assistant ---*---\")\n    st.session_state[\"research_assistant\"] = None\n    st.session_state[\"research_assistant_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\ndef main() -> None:",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.pages.1_Research_Assistant",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.pages.1_Research_Assistant",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.pages.1_Research_Assistant",
        "peekOfCode": "def main() -> None:\n    # Get LLM Model\n    llm_model = (\n        st.sidebar.selectbox(\n            \"Select LLM\", options=[\"llama3-70b-8192\", \"llama3\", \"phi3\", \"gpt-4-turbo\", \"gpt-3.5-turbo\"]\n        )\n        or \"gpt-4-turbo\"\n    )\n    # Set llm in session state\n    if \"llm_model\" not in st.session_state:",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.pages.1_Research_Assistant",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.pages.2_RAG_Assistant",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.pages.2_RAG_Assistant",
        "peekOfCode": "def restart_assistant():\n    logger.debug(\"---*--- Restarting Assistant ---*---\")\n    st.session_state[\"rag_assistant\"] = None\n    st.session_state[\"rag_assistant_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\ndef main() -> None:",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.pages.2_RAG_Assistant",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.pages.2_RAG_Assistant",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.pages.2_RAG_Assistant",
        "peekOfCode": "def main() -> None:\n    # Get LLM Model\n    llm_model = (\n        st.sidebar.selectbox(\n            \"Select LLM\", options=[\"llama3-70b-8192\", \"llama3\", \"phi3\", \"gpt-4-turbo\", \"gpt-3.5-turbo\"]\n        )\n        or \"gpt-4-turbo\"\n    )\n    # Set llm in session state\n    if \"llm_model\" not in st.session_state:",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.pages.2_RAG_Assistant",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.Home",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.Home",
        "peekOfCode": "def main() -> None:\n    st.markdown(\"---\")\n    st.markdown(\"### Select an AI App from the sidebar:\")\n    st.markdown(\"#### 1. Research Assistant: Generate reports about complex topics\")\n    st.markdown(\"#### 2. RAG Assistant: Chat with Websites and PDFs\")\n    st.sidebar.success(\"Select App from above\")\nmain()",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.Home",
        "documentation": {}
    },
    {
        "label": "get_rag_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "peekOfCode": "def get_rag_assistant(\n    llm_model: str = \"gpt-4-turbo\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n    num_documents: Optional[int] = None,\n) -> Assistant:\n    \"\"\"Get a RAG Assistant with SingleStore backend.\"\"\"\n    logger.info(f\"-*- Creating RAG Assistant. LLM: {llm_model} -*-\")\n    if llm_model.startswith(\"gpt\"):",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "documentation": {}
    },
    {
        "label": "get_research_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "peekOfCode": "def get_research_assistant(\n    llm_model: str = \"gpt-4-turbo\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n    num_documents: Optional[int] = None,\n) -> Assistant:\n    \"\"\"Get a Research Assistant with SingleStore backend.\"\"\"\n    logger.info(f\"-*- Creating Research Assistant. LLM: {llm_model} -*-\")\n    llm: LLM = Ollama(model=llm_model)",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "peekOfCode": "USERNAME = getenv(\"SINGLESTORE_USERNAME\")\nPASSWORD = getenv(\"SINGLESTORE_PASSWORD\")\nHOST = getenv(\"SINGLESTORE_HOST\")\nPORT = getenv(\"SINGLESTORE_PORT\")\nDATABASE = getenv(\"SINGLESTORE_DATABASE\")\nSSL_CERT = getenv(\"SINGLESTORE_SSL_CERT\", None)\n# -*- SingleStore DB URL\ndb_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "peekOfCode": "PASSWORD = getenv(\"SINGLESTORE_PASSWORD\")\nHOST = getenv(\"SINGLESTORE_HOST\")\nPORT = getenv(\"SINGLESTORE_PORT\")\nDATABASE = getenv(\"SINGLESTORE_DATABASE\")\nSSL_CERT = getenv(\"SINGLESTORE_SSL_CERT\", None)\n# -*- SingleStore DB URL\ndb_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"\n# -*- single_store_db_engine",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "peekOfCode": "HOST = getenv(\"SINGLESTORE_HOST\")\nPORT = getenv(\"SINGLESTORE_PORT\")\nDATABASE = getenv(\"SINGLESTORE_DATABASE\")\nSSL_CERT = getenv(\"SINGLESTORE_SSL_CERT\", None)\n# -*- SingleStore DB URL\ndb_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"\n# -*- single_store_db_engine\ndb_engine = create_engine(db_url)",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "peekOfCode": "PORT = getenv(\"SINGLESTORE_PORT\")\nDATABASE = getenv(\"SINGLESTORE_DATABASE\")\nSSL_CERT = getenv(\"SINGLESTORE_SSL_CERT\", None)\n# -*- SingleStore DB URL\ndb_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"\n# -*- single_store_db_engine\ndb_engine = create_engine(db_url)\n# ****************************************************************",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "documentation": {}
    },
    {
        "label": "DATABASE",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "peekOfCode": "DATABASE = getenv(\"SINGLESTORE_DATABASE\")\nSSL_CERT = getenv(\"SINGLESTORE_SSL_CERT\", None)\n# -*- SingleStore DB URL\ndb_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"\n# -*- single_store_db_engine\ndb_engine = create_engine(db_url)\n# ****************************************************************\ndef get_rag_assistant(",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "documentation": {}
    },
    {
        "label": "SSL_CERT",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "peekOfCode": "SSL_CERT = getenv(\"SINGLESTORE_SSL_CERT\", None)\n# -*- SingleStore DB URL\ndb_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"\n# -*- single_store_db_engine\ndb_engine = create_engine(db_url)\n# ****************************************************************\ndef get_rag_assistant(\n    llm_model: str = \"gpt-4-turbo\",",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "peekOfCode": "db_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"\n# -*- single_store_db_engine\ndb_engine = create_engine(db_url)\n# ****************************************************************\ndef get_rag_assistant(\n    llm_model: str = \"gpt-4-turbo\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "documentation": {}
    },
    {
        "label": "db_engine",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "description": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "peekOfCode": "db_engine = create_engine(db_url)\n# ****************************************************************\ndef get_rag_assistant(\n    llm_model: str = \"gpt-4-turbo\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n    num_documents: Optional[int] = None,\n) -> Assistant:\n    \"\"\"Get a RAG Assistant with SingleStore backend.\"\"\"",
        "detail": "phidata.cookbook.integrations.singlestore.ai_apps.assistants",
        "documentation": {}
    },
    {
        "label": "pdf_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.integrations.singlestore.assistant",
        "description": "phidata.cookbook.integrations.singlestore.assistant",
        "peekOfCode": "def pdf_assistant(user: str = \"user\"):\n    run_id: Optional[str] = None\n    assistant = Assistant(\n        run_id=run_id,\n        user_id=user,\n        knowledge_base=knowledge_base,\n        # tool_calls=True adds functions to\n        # search the knowledge base and chat history\n        use_tools=True,\n        show_tool_calls=True,",
        "detail": "phidata.cookbook.integrations.singlestore.assistant",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.assistant",
        "description": "phidata.cookbook.integrations.singlestore.assistant",
        "peekOfCode": "USERNAME = getenv(\"SINGLESTORE_USERNAME\")\nPASSWORD = getenv(\"SINGLESTORE_PASSWORD\")\nHOST = getenv(\"SINGLESTORE_HOST\")\nPORT = getenv(\"SINGLESTORE_PORT\")\nDATABASE = getenv(\"SINGLESTORE_DATABASE\")\nSSL_CERT = getenv(\"SINGLESTORE_SSL_CERT\", None)\ndb_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"\ndb_engine = create_engine(db_url)",
        "detail": "phidata.cookbook.integrations.singlestore.assistant",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.assistant",
        "description": "phidata.cookbook.integrations.singlestore.assistant",
        "peekOfCode": "PASSWORD = getenv(\"SINGLESTORE_PASSWORD\")\nHOST = getenv(\"SINGLESTORE_HOST\")\nPORT = getenv(\"SINGLESTORE_PORT\")\nDATABASE = getenv(\"SINGLESTORE_DATABASE\")\nSSL_CERT = getenv(\"SINGLESTORE_SSL_CERT\", None)\ndb_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"\ndb_engine = create_engine(db_url)\nknowledge_base = PDFUrlKnowledgeBase(",
        "detail": "phidata.cookbook.integrations.singlestore.assistant",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.assistant",
        "description": "phidata.cookbook.integrations.singlestore.assistant",
        "peekOfCode": "HOST = getenv(\"SINGLESTORE_HOST\")\nPORT = getenv(\"SINGLESTORE_PORT\")\nDATABASE = getenv(\"SINGLESTORE_DATABASE\")\nSSL_CERT = getenv(\"SINGLESTORE_SSL_CERT\", None)\ndb_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"\ndb_engine = create_engine(db_url)\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],",
        "detail": "phidata.cookbook.integrations.singlestore.assistant",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.assistant",
        "description": "phidata.cookbook.integrations.singlestore.assistant",
        "peekOfCode": "PORT = getenv(\"SINGLESTORE_PORT\")\nDATABASE = getenv(\"SINGLESTORE_DATABASE\")\nSSL_CERT = getenv(\"SINGLESTORE_SSL_CERT\", None)\ndb_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"\ndb_engine = create_engine(db_url)\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=S2VectorDb(",
        "detail": "phidata.cookbook.integrations.singlestore.assistant",
        "documentation": {}
    },
    {
        "label": "DATABASE",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.assistant",
        "description": "phidata.cookbook.integrations.singlestore.assistant",
        "peekOfCode": "DATABASE = getenv(\"SINGLESTORE_DATABASE\")\nSSL_CERT = getenv(\"SINGLESTORE_SSL_CERT\", None)\ndb_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"\ndb_engine = create_engine(db_url)\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=S2VectorDb(\n        collection=\"recipes\",",
        "detail": "phidata.cookbook.integrations.singlestore.assistant",
        "documentation": {}
    },
    {
        "label": "SSL_CERT",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.assistant",
        "description": "phidata.cookbook.integrations.singlestore.assistant",
        "peekOfCode": "SSL_CERT = getenv(\"SINGLESTORE_SSL_CERT\", None)\ndb_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"\ndb_engine = create_engine(db_url)\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=S2VectorDb(\n        collection=\"recipes\",\n        db_engine=db_engine,",
        "detail": "phidata.cookbook.integrations.singlestore.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.assistant",
        "description": "phidata.cookbook.integrations.singlestore.assistant",
        "peekOfCode": "db_url = f\"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}?charset=utf8mb4\"\nif SSL_CERT:\n    db_url += f\"&ssl_ca={SSL_CERT}&ssl_verify_cert=true\"\ndb_engine = create_engine(db_url)\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=S2VectorDb(\n        collection=\"recipes\",\n        db_engine=db_engine,\n        schema=DATABASE,",
        "detail": "phidata.cookbook.integrations.singlestore.assistant",
        "documentation": {}
    },
    {
        "label": "db_engine",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.assistant",
        "description": "phidata.cookbook.integrations.singlestore.assistant",
        "peekOfCode": "db_engine = create_engine(db_url)\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=S2VectorDb(\n        collection=\"recipes\",\n        db_engine=db_engine,\n        schema=DATABASE,\n    ),\n)\n# Comment out after first run",
        "detail": "phidata.cookbook.integrations.singlestore.assistant",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.integrations.singlestore.assistant",
        "description": "phidata.cookbook.integrations.singlestore.assistant",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=S2VectorDb(\n        collection=\"recipes\",\n        db_engine=db_engine,\n        schema=DATABASE,\n    ),\n)\n# Comment out after first run\nknowledge_base.load(recreate=False)",
        "detail": "phidata.cookbook.integrations.singlestore.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.arxiv_kb",
        "description": "phidata.cookbook.knowledge.arxiv_kb",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\n# Create a knowledge base with the ArXiv documents\nknowledge_base = ArxivKnowledgeBase(\n    queries=[\"Generative AI\", \"Machine Learning\"],\n    # Table name: ai.arxiv_documents\n    vector_db=PgVector2(\n        collection=\"arxiv_documents\",\n        db_url=db_url,\n    ),\n)",
        "detail": "phidata.cookbook.knowledge.arxiv_kb",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.arxiv_kb",
        "description": "phidata.cookbook.knowledge.arxiv_kb",
        "peekOfCode": "knowledge_base = ArxivKnowledgeBase(\n    queries=[\"Generative AI\", \"Machine Learning\"],\n    # Table name: ai.arxiv_documents\n    vector_db=PgVector2(\n        collection=\"arxiv_documents\",\n        db_url=db_url,\n    ),\n)\n# Load the knowledge base\nknowledge_base.load(recreate=False)",
        "detail": "phidata.cookbook.knowledge.arxiv_kb",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.arxiv_kb",
        "description": "phidata.cookbook.knowledge.arxiv_kb",
        "peekOfCode": "assistant = Assistant(\n    knowledge_base=knowledge_base,\n    add_references_to_prompt=True,\n)\n# Ask the assistant about the knowledge base\nassistant.print_response(\"Ask me about something from the knowledge base\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.arxiv_kb",
        "documentation": {}
    },
    {
        "label": "custom_references_function",
        "kind": 2,
        "importPath": "phidata.cookbook.knowledge.custom_references",
        "description": "phidata.cookbook.knowledge.custom_references",
        "peekOfCode": "def custom_references_function(query: str, **kwargs) -> Optional[str]:\n    \"\"\"Return a list of references from the knowledge base\"\"\"\n    print(f\"-*- Searching for references for query: {query}\")\n    relevant_docs: List[Document] = knowledge_base.search(query=query, num_documents=5)\n    if len(relevant_docs) == 0:\n        return None\n    return json.dumps([doc.to_dict() for doc in relevant_docs], indent=2)\nassistant = Assistant(\n    knowledge_base=knowledge_base,\n    # Generate references using a custom function.",
        "detail": "phidata.cookbook.knowledge.custom_references",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.custom_references",
        "description": "phidata.cookbook.knowledge.custom_references",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(collection=\"recipes\", db_url=db_url),\n)\n# Comment out after first run\n# knowledge_base.load(recreate=False)\ndef custom_references_function(query: str, **kwargs) -> Optional[str]:\n    \"\"\"Return a list of references from the knowledge base\"\"\"\n    print(f\"-*- Searching for references for query: {query}\")",
        "detail": "phidata.cookbook.knowledge.custom_references",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.custom_references",
        "description": "phidata.cookbook.knowledge.custom_references",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(collection=\"recipes\", db_url=db_url),\n)\n# Comment out after first run\n# knowledge_base.load(recreate=False)\ndef custom_references_function(query: str, **kwargs) -> Optional[str]:\n    \"\"\"Return a list of references from the knowledge base\"\"\"\n    print(f\"-*- Searching for references for query: {query}\")\n    relevant_docs: List[Document] = knowledge_base.search(query=query, num_documents=5)",
        "detail": "phidata.cookbook.knowledge.custom_references",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.custom_references",
        "description": "phidata.cookbook.knowledge.custom_references",
        "peekOfCode": "assistant = Assistant(\n    knowledge_base=knowledge_base,\n    # Generate references using a custom function.\n    references_function=custom_references_function,\n    # Adds references to the prompt.\n    add_references_to_prompt=True,\n)\nassistant.print_response(\"How to make Thai curry?\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.custom_references",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.json_kb",
        "description": "phidata.cookbook.knowledge.json_kb",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\n# Initialize the JSONKnowledgeBase\nknowledge_base = JSONKnowledgeBase(\n    path=Path(\"data/docs\"),  # Table name: ai.json_documents\n    vector_db=PgVector2(\n        collection=\"json_documents\",\n        db_url=db_url,\n    ),\n    num_documents=5,  # Number of documents to return on search\n)",
        "detail": "phidata.cookbook.knowledge.json_kb",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.json_kb",
        "description": "phidata.cookbook.knowledge.json_kb",
        "peekOfCode": "knowledge_base = JSONKnowledgeBase(\n    path=Path(\"data/docs\"),  # Table name: ai.json_documents\n    vector_db=PgVector2(\n        collection=\"json_documents\",\n        db_url=db_url,\n    ),\n    num_documents=5,  # Number of documents to return on search\n)\n# Load the knowledge base\nknowledge_base.load(recreate=False)",
        "detail": "phidata.cookbook.knowledge.json_kb",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.json_kb",
        "description": "phidata.cookbook.knowledge.json_kb",
        "peekOfCode": "assistant = Assistant(\n    knowledge_base=knowledge_base,\n    add_references_to_prompt=True,\n)\n# Use the assistant\nassistant.print_response(\"Ask me about something from the knowledge base\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.json_kb",
        "documentation": {}
    },
    {
        "label": "chroma_db_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.langchain",
        "description": "phidata.cookbook.knowledge.langchain",
        "peekOfCode": "chroma_db_dir = pathlib.Path(\"./chroma_db\")\n# Define the path to the document to be loaded into the knowledge base\nstate_of_the_union = pathlib.Path(\"data/demo/state_of_the_union.txt\")\n# Load the document\nraw_documents = TextLoader(str(state_of_the_union)).load()\n# Split the document into chunks\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocuments = text_splitter.split_documents(raw_documents)\n# Embed each chunk and load it into the vector store\nChroma.from_documents(documents, OpenAIEmbeddings(), persist_directory=str(chroma_db_dir))",
        "detail": "phidata.cookbook.knowledge.langchain",
        "documentation": {}
    },
    {
        "label": "state_of_the_union",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.langchain",
        "description": "phidata.cookbook.knowledge.langchain",
        "peekOfCode": "state_of_the_union = pathlib.Path(\"data/demo/state_of_the_union.txt\")\n# Load the document\nraw_documents = TextLoader(str(state_of_the_union)).load()\n# Split the document into chunks\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocuments = text_splitter.split_documents(raw_documents)\n# Embed each chunk and load it into the vector store\nChroma.from_documents(documents, OpenAIEmbeddings(), persist_directory=str(chroma_db_dir))\n# Get the vector database\ndb = Chroma(embedding_function=OpenAIEmbeddings(), persist_directory=str(chroma_db_dir))",
        "detail": "phidata.cookbook.knowledge.langchain",
        "documentation": {}
    },
    {
        "label": "raw_documents",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.langchain",
        "description": "phidata.cookbook.knowledge.langchain",
        "peekOfCode": "raw_documents = TextLoader(str(state_of_the_union)).load()\n# Split the document into chunks\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocuments = text_splitter.split_documents(raw_documents)\n# Embed each chunk and load it into the vector store\nChroma.from_documents(documents, OpenAIEmbeddings(), persist_directory=str(chroma_db_dir))\n# Get the vector database\ndb = Chroma(embedding_function=OpenAIEmbeddings(), persist_directory=str(chroma_db_dir))\n# Create a retriever from the vector store\nretriever = db.as_retriever()",
        "detail": "phidata.cookbook.knowledge.langchain",
        "documentation": {}
    },
    {
        "label": "text_splitter",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.langchain",
        "description": "phidata.cookbook.knowledge.langchain",
        "peekOfCode": "text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocuments = text_splitter.split_documents(raw_documents)\n# Embed each chunk and load it into the vector store\nChroma.from_documents(documents, OpenAIEmbeddings(), persist_directory=str(chroma_db_dir))\n# Get the vector database\ndb = Chroma(embedding_function=OpenAIEmbeddings(), persist_directory=str(chroma_db_dir))\n# Create a retriever from the vector store\nretriever = db.as_retriever()\n# Create a knowledge base from the vector store\nknowledge_base = LangChainKnowledgeBase(retriever=retriever)",
        "detail": "phidata.cookbook.knowledge.langchain",
        "documentation": {}
    },
    {
        "label": "documents",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.langchain",
        "description": "phidata.cookbook.knowledge.langchain",
        "peekOfCode": "documents = text_splitter.split_documents(raw_documents)\n# Embed each chunk and load it into the vector store\nChroma.from_documents(documents, OpenAIEmbeddings(), persist_directory=str(chroma_db_dir))\n# Get the vector database\ndb = Chroma(embedding_function=OpenAIEmbeddings(), persist_directory=str(chroma_db_dir))\n# Create a retriever from the vector store\nretriever = db.as_retriever()\n# Create a knowledge base from the vector store\nknowledge_base = LangChainKnowledgeBase(retriever=retriever)\n# Create an assistant with the knowledge base",
        "detail": "phidata.cookbook.knowledge.langchain",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.langchain",
        "description": "phidata.cookbook.knowledge.langchain",
        "peekOfCode": "db = Chroma(embedding_function=OpenAIEmbeddings(), persist_directory=str(chroma_db_dir))\n# Create a retriever from the vector store\nretriever = db.as_retriever()\n# Create a knowledge base from the vector store\nknowledge_base = LangChainKnowledgeBase(retriever=retriever)\n# Create an assistant with the knowledge base\nassistant = Assistant(knowledge_base=knowledge_base, add_references_to_prompt=True)\n# Use the assistant to ask a question and print a response.\nassistant.print_response(\"What did the president say about technology?\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.langchain",
        "documentation": {}
    },
    {
        "label": "retriever",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.langchain",
        "description": "phidata.cookbook.knowledge.langchain",
        "peekOfCode": "retriever = db.as_retriever()\n# Create a knowledge base from the vector store\nknowledge_base = LangChainKnowledgeBase(retriever=retriever)\n# Create an assistant with the knowledge base\nassistant = Assistant(knowledge_base=knowledge_base, add_references_to_prompt=True)\n# Use the assistant to ask a question and print a response.\nassistant.print_response(\"What did the president say about technology?\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.langchain",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.langchain",
        "description": "phidata.cookbook.knowledge.langchain",
        "peekOfCode": "knowledge_base = LangChainKnowledgeBase(retriever=retriever)\n# Create an assistant with the knowledge base\nassistant = Assistant(knowledge_base=knowledge_base, add_references_to_prompt=True)\n# Use the assistant to ask a question and print a response.\nassistant.print_response(\"What did the president say about technology?\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.langchain",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.langchain",
        "description": "phidata.cookbook.knowledge.langchain",
        "peekOfCode": "assistant = Assistant(knowledge_base=knowledge_base, add_references_to_prompt=True)\n# Use the assistant to ask a question and print a response.\nassistant.print_response(\"What did the president say about technology?\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.langchain",
        "documentation": {}
    },
    {
        "label": "data_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.llamaindex",
        "description": "phidata.cookbook.knowledge.llamaindex",
        "peekOfCode": "data_dir = Path(__file__).parent.parent.parent.joinpath(\"wip\", \"data\", \"paul_graham\")\nif data_dir.is_dir():\n    rmtree(path=data_dir, ignore_errors=True)\ndata_dir.mkdir(parents=True, exist_ok=True)\nurl = \"https://raw.githubusercontent.com/run-llama/llama_index/main/docs/docs/examples/data/paul_graham/paul_graham_essay.txt\"\nfile_path = data_dir.joinpath(\"paul_graham_essay.txt\")\nresponse = httpx.get(url)\nif response.status_code == 200:\n    with open(file_path, \"wb\") as file:\n        file.write(response.content)",
        "detail": "phidata.cookbook.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.llamaindex",
        "description": "phidata.cookbook.knowledge.llamaindex",
        "peekOfCode": "url = \"https://raw.githubusercontent.com/run-llama/llama_index/main/docs/docs/examples/data/paul_graham/paul_graham_essay.txt\"\nfile_path = data_dir.joinpath(\"paul_graham_essay.txt\")\nresponse = httpx.get(url)\nif response.status_code == 200:\n    with open(file_path, \"wb\") as file:\n        file.write(response.content)\n    print(f\"File downloaded and saved as {file_path}\")\nelse:\n    print(\"Failed to download the file\")\ndocuments = SimpleDirectoryReader(str(data_dir)).load_data()",
        "detail": "phidata.cookbook.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "file_path",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.llamaindex",
        "description": "phidata.cookbook.knowledge.llamaindex",
        "peekOfCode": "file_path = data_dir.joinpath(\"paul_graham_essay.txt\")\nresponse = httpx.get(url)\nif response.status_code == 200:\n    with open(file_path, \"wb\") as file:\n        file.write(response.content)\n    print(f\"File downloaded and saved as {file_path}\")\nelse:\n    print(\"Failed to download the file\")\ndocuments = SimpleDirectoryReader(str(data_dir)).load_data()\nsplitter = SentenceSplitter(chunk_size=1024)",
        "detail": "phidata.cookbook.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.llamaindex",
        "description": "phidata.cookbook.knowledge.llamaindex",
        "peekOfCode": "response = httpx.get(url)\nif response.status_code == 200:\n    with open(file_path, \"wb\") as file:\n        file.write(response.content)\n    print(f\"File downloaded and saved as {file_path}\")\nelse:\n    print(\"Failed to download the file\")\ndocuments = SimpleDirectoryReader(str(data_dir)).load_data()\nsplitter = SentenceSplitter(chunk_size=1024)\nnodes = splitter.get_nodes_from_documents(documents)",
        "detail": "phidata.cookbook.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "documents",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.llamaindex",
        "description": "phidata.cookbook.knowledge.llamaindex",
        "peekOfCode": "documents = SimpleDirectoryReader(str(data_dir)).load_data()\nsplitter = SentenceSplitter(chunk_size=1024)\nnodes = splitter.get_nodes_from_documents(documents)\nstorage_context = StorageContext.from_defaults()\nindex = VectorStoreIndex(nodes=nodes, storage_context=storage_context)\nretriever = VectorIndexRetriever(index)\n# Create a knowledge base from the vector store\nknowledge_base = LlamaIndexKnowledgeBase(retriever=retriever)\n# Create an assistant with the knowledge base\nassistant = Assistant(knowledge_base=knowledge_base, search_knowledge=True, debug_mode=True, show_tool_calls=True)",
        "detail": "phidata.cookbook.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "splitter",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.llamaindex",
        "description": "phidata.cookbook.knowledge.llamaindex",
        "peekOfCode": "splitter = SentenceSplitter(chunk_size=1024)\nnodes = splitter.get_nodes_from_documents(documents)\nstorage_context = StorageContext.from_defaults()\nindex = VectorStoreIndex(nodes=nodes, storage_context=storage_context)\nretriever = VectorIndexRetriever(index)\n# Create a knowledge base from the vector store\nknowledge_base = LlamaIndexKnowledgeBase(retriever=retriever)\n# Create an assistant with the knowledge base\nassistant = Assistant(knowledge_base=knowledge_base, search_knowledge=True, debug_mode=True, show_tool_calls=True)\n# Use the assistant to ask a question and print a response.",
        "detail": "phidata.cookbook.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.llamaindex",
        "description": "phidata.cookbook.knowledge.llamaindex",
        "peekOfCode": "nodes = splitter.get_nodes_from_documents(documents)\nstorage_context = StorageContext.from_defaults()\nindex = VectorStoreIndex(nodes=nodes, storage_context=storage_context)\nretriever = VectorIndexRetriever(index)\n# Create a knowledge base from the vector store\nknowledge_base = LlamaIndexKnowledgeBase(retriever=retriever)\n# Create an assistant with the knowledge base\nassistant = Assistant(knowledge_base=knowledge_base, search_knowledge=True, debug_mode=True, show_tool_calls=True)\n# Use the assistant to ask a question and print a response.\nassistant.print_response(\"Explain what this text means: low end eats the high end\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "storage_context",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.llamaindex",
        "description": "phidata.cookbook.knowledge.llamaindex",
        "peekOfCode": "storage_context = StorageContext.from_defaults()\nindex = VectorStoreIndex(nodes=nodes, storage_context=storage_context)\nretriever = VectorIndexRetriever(index)\n# Create a knowledge base from the vector store\nknowledge_base = LlamaIndexKnowledgeBase(retriever=retriever)\n# Create an assistant with the knowledge base\nassistant = Assistant(knowledge_base=knowledge_base, search_knowledge=True, debug_mode=True, show_tool_calls=True)\n# Use the assistant to ask a question and print a response.\nassistant.print_response(\"Explain what this text means: low end eats the high end\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.llamaindex",
        "description": "phidata.cookbook.knowledge.llamaindex",
        "peekOfCode": "index = VectorStoreIndex(nodes=nodes, storage_context=storage_context)\nretriever = VectorIndexRetriever(index)\n# Create a knowledge base from the vector store\nknowledge_base = LlamaIndexKnowledgeBase(retriever=retriever)\n# Create an assistant with the knowledge base\nassistant = Assistant(knowledge_base=knowledge_base, search_knowledge=True, debug_mode=True, show_tool_calls=True)\n# Use the assistant to ask a question and print a response.\nassistant.print_response(\"Explain what this text means: low end eats the high end\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "retriever",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.llamaindex",
        "description": "phidata.cookbook.knowledge.llamaindex",
        "peekOfCode": "retriever = VectorIndexRetriever(index)\n# Create a knowledge base from the vector store\nknowledge_base = LlamaIndexKnowledgeBase(retriever=retriever)\n# Create an assistant with the knowledge base\nassistant = Assistant(knowledge_base=knowledge_base, search_knowledge=True, debug_mode=True, show_tool_calls=True)\n# Use the assistant to ask a question and print a response.\nassistant.print_response(\"Explain what this text means: low end eats the high end\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.llamaindex",
        "description": "phidata.cookbook.knowledge.llamaindex",
        "peekOfCode": "knowledge_base = LlamaIndexKnowledgeBase(retriever=retriever)\n# Create an assistant with the knowledge base\nassistant = Assistant(knowledge_base=knowledge_base, search_knowledge=True, debug_mode=True, show_tool_calls=True)\n# Use the assistant to ask a question and print a response.\nassistant.print_response(\"Explain what this text means: low end eats the high end\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.llamaindex",
        "description": "phidata.cookbook.knowledge.llamaindex",
        "peekOfCode": "assistant = Assistant(knowledge_base=knowledge_base, search_knowledge=True, debug_mode=True, show_tool_calls=True)\n# Use the assistant to ask a question and print a response.\nassistant.print_response(\"Explain what this text means: low end eats the high end\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.pdf",
        "description": "phidata.cookbook.knowledge.pdf",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\n# Create a knowledge base with the PDFs from the data/pdfs directory\nknowledge_base = PDFKnowledgeBase(\n    path=\"data/pdfs\",\n    vector_db=PgVector2(\n        collection=\"pdf_documents\",\n        # Can inspect database via psql e.g. \"psql -h localhost -p 5432 -U ai -d ai\"\n        db_url=db_url,\n    ),\n    reader=PDFReader(chunk=True),",
        "detail": "phidata.cookbook.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.pdf",
        "description": "phidata.cookbook.knowledge.pdf",
        "peekOfCode": "knowledge_base = PDFKnowledgeBase(\n    path=\"data/pdfs\",\n    vector_db=PgVector2(\n        collection=\"pdf_documents\",\n        # Can inspect database via psql e.g. \"psql -h localhost -p 5432 -U ai -d ai\"\n        db_url=db_url,\n    ),\n    reader=PDFReader(chunk=True),\n)\n# Load the knowledge base",
        "detail": "phidata.cookbook.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.pdf",
        "description": "phidata.cookbook.knowledge.pdf",
        "peekOfCode": "assistant = Assistant(\n    knowledge_base=knowledge_base,\n    add_references_to_prompt=True,\n)\n# Ask the assistant about the knowledge base\nassistant.print_response(\"Ask me about something from the knowledge base\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.pdf_url",
        "description": "phidata.cookbook.knowledge.pdf_url",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\nknowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(collection=\"recipes\", db_url=db_url),\n)\nknowledge_base.load(recreate=False)  # Comment out after first run\nassistant = Assistant(knowledge_base=knowledge_base, use_tools=True, show_tool_calls=True)\nassistant.print_response(\"How to make Thai curry?\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.pdf_url",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.pdf_url",
        "description": "phidata.cookbook.knowledge.pdf_url",
        "peekOfCode": "knowledge_base = PDFUrlKnowledgeBase(\n    urls=[\"https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n    vector_db=PgVector2(collection=\"recipes\", db_url=db_url),\n)\nknowledge_base.load(recreate=False)  # Comment out after first run\nassistant = Assistant(knowledge_base=knowledge_base, use_tools=True, show_tool_calls=True)\nassistant.print_response(\"How to make Thai curry?\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.pdf_url",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.pdf_url",
        "description": "phidata.cookbook.knowledge.pdf_url",
        "peekOfCode": "assistant = Assistant(knowledge_base=knowledge_base, use_tools=True, show_tool_calls=True)\nassistant.print_response(\"How to make Thai curry?\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.pdf_url",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.text",
        "description": "phidata.cookbook.knowledge.text",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\n# Initialize the TextKnowledgeBase\nknowledge_base = TextKnowledgeBase(\n    path=Path(\"data/docs\"),  # Table name: ai.text_documents\n    vector_db=PgVector2(\n        collection=\"text_documents\",\n        db_url=db_url,\n    ),\n    num_documents=5,  # Number of documents to return on search\n)",
        "detail": "phidata.cookbook.knowledge.text",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.text",
        "description": "phidata.cookbook.knowledge.text",
        "peekOfCode": "knowledge_base = TextKnowledgeBase(\n    path=Path(\"data/docs\"),  # Table name: ai.text_documents\n    vector_db=PgVector2(\n        collection=\"text_documents\",\n        db_url=db_url,\n    ),\n    num_documents=5,  # Number of documents to return on search\n)\n# Load the knowledge base\nknowledge_base.load(recreate=False)",
        "detail": "phidata.cookbook.knowledge.text",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.text",
        "description": "phidata.cookbook.knowledge.text",
        "peekOfCode": "assistant = Assistant(\n    knowledge_base=knowledge_base,\n    add_references_to_prompt=True,\n)\n# Use the assistant\nassistant.print_response(\"Ask me about something from the knowledge base\", markdown=True)",
        "detail": "phidata.cookbook.knowledge.text",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.website_kb",
        "description": "phidata.cookbook.knowledge.website_kb",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\n# Create a knowledge base with the seed URLs\nknowledge_base = WebsiteKnowledgeBase(\n    urls=[\"https://docs.phidata.com/introduction\"],\n    # Number of links to follow from the seed URLs\n    max_links=10,\n    # Table name: ai.website_documents\n    vector_db=PgVector2(\n        collection=\"website_documents\",\n        db_url=db_url,",
        "detail": "phidata.cookbook.knowledge.website_kb",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.website_kb",
        "description": "phidata.cookbook.knowledge.website_kb",
        "peekOfCode": "knowledge_base = WebsiteKnowledgeBase(\n    urls=[\"https://docs.phidata.com/introduction\"],\n    # Number of links to follow from the seed URLs\n    max_links=10,\n    # Table name: ai.website_documents\n    vector_db=PgVector2(\n        collection=\"website_documents\",\n        db_url=db_url,\n    ),\n)",
        "detail": "phidata.cookbook.knowledge.website_kb",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.website_kb",
        "description": "phidata.cookbook.knowledge.website_kb",
        "peekOfCode": "assistant = Assistant(\n    knowledge_base=knowledge_base,\n    add_references_to_prompt=True,\n)\n# Ask the assistant about the knowledge base\nassistant.print_response(\"How does phidata work?\")",
        "detail": "phidata.cookbook.knowledge.website_kb",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.wikipedia_kb",
        "description": "phidata.cookbook.knowledge.wikipedia_kb",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\n# Create a knowledge base with the PDFs from the data/pdfs directory\nknowledge_base = WikipediaKnowledgeBase(\n    topics=[\"Manchester United\", \"Real Madrid\"],\n    # Table name: ai.wikipedia_documents\n    vector_db=PgVector2(\n        collection=\"wikipedia_documents\",\n        db_url=db_url,\n    ),\n)",
        "detail": "phidata.cookbook.knowledge.wikipedia_kb",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.wikipedia_kb",
        "description": "phidata.cookbook.knowledge.wikipedia_kb",
        "peekOfCode": "knowledge_base = WikipediaKnowledgeBase(\n    topics=[\"Manchester United\", \"Real Madrid\"],\n    # Table name: ai.wikipedia_documents\n    vector_db=PgVector2(\n        collection=\"wikipedia_documents\",\n        db_url=db_url,\n    ),\n)\n# Load the knowledge base\nknowledge_base.load(recreate=False)",
        "detail": "phidata.cookbook.knowledge.wikipedia_kb",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.knowledge.wikipedia_kb",
        "description": "phidata.cookbook.knowledge.wikipedia_kb",
        "peekOfCode": "assistant = Assistant(\n    knowledge_base=knowledge_base,\n    add_references_to_prompt=True,\n)\n# Ask the assistant about the knowledge base\nassistant.print_response(\"Which team is objectively better, Manchester United or Real Madrid?\")",
        "detail": "phidata.cookbook.knowledge.wikipedia_kb",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llm_os.app",
        "description": "phidata.cookbook.llm_os.app",
        "peekOfCode": "def main() -> None:\n    # Get LLM Model\n    llm_id = st.sidebar.selectbox(\"Select LLM\", options=[\"gpt-4o\", \"gpt-4-turbo\"]) or \"gpt-4o\"\n    # Set llm_id in session state\n    if \"llm_id\" not in st.session_state:\n        st.session_state[\"llm_id\"] = llm_id\n    # Restart the assistant if llm_id changes\n    elif st.session_state[\"llm_id\"] != llm_id:\n        st.session_state[\"llm_id\"] = llm_id\n        restart_assistant()",
        "detail": "phidata.cookbook.llm_os.app",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llm_os.app",
        "description": "phidata.cookbook.llm_os.app",
        "peekOfCode": "def restart_assistant():\n    logger.debug(\"---*--- Restarting Assistant ---*---\")\n    st.session_state[\"llm_os\"] = None\n    st.session_state[\"llm_os_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\nmain()",
        "detail": "phidata.cookbook.llm_os.app",
        "documentation": {}
    },
    {
        "label": "get_llm_os",
        "kind": 2,
        "importPath": "phidata.cookbook.llm_os.assistant",
        "description": "phidata.cookbook.llm_os.assistant",
        "peekOfCode": "def get_llm_os(\n    llm_id: str = \"gpt-4o\",\n    calculator: bool = False,\n    ddg_search: bool = False,\n    file_tools: bool = False,\n    shell_tools: bool = False,\n    data_analyst: bool = False,\n    python_assistant: bool = False,\n    research_assistant: bool = False,\n    investment_assistant: bool = False,",
        "detail": "phidata.cookbook.llm_os.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.llm_os.assistant",
        "description": "phidata.cookbook.llm_os.assistant",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\ncwd = Path(__file__).parent.resolve()\nscratch_dir = cwd.joinpath(\"scratch\")\nif not scratch_dir.exists():\n    scratch_dir.mkdir(exist_ok=True, parents=True)\ndef get_llm_os(\n    llm_id: str = \"gpt-4o\",\n    calculator: bool = False,\n    ddg_search: bool = False,\n    file_tools: bool = False,",
        "detail": "phidata.cookbook.llm_os.assistant",
        "documentation": {}
    },
    {
        "label": "cwd",
        "kind": 5,
        "importPath": "phidata.cookbook.llm_os.assistant",
        "description": "phidata.cookbook.llm_os.assistant",
        "peekOfCode": "cwd = Path(__file__).parent.resolve()\nscratch_dir = cwd.joinpath(\"scratch\")\nif not scratch_dir.exists():\n    scratch_dir.mkdir(exist_ok=True, parents=True)\ndef get_llm_os(\n    llm_id: str = \"gpt-4o\",\n    calculator: bool = False,\n    ddg_search: bool = False,\n    file_tools: bool = False,\n    shell_tools: bool = False,",
        "detail": "phidata.cookbook.llm_os.assistant",
        "documentation": {}
    },
    {
        "label": "scratch_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.llm_os.assistant",
        "description": "phidata.cookbook.llm_os.assistant",
        "peekOfCode": "scratch_dir = cwd.joinpath(\"scratch\")\nif not scratch_dir.exists():\n    scratch_dir.mkdir(exist_ok=True, parents=True)\ndef get_llm_os(\n    llm_id: str = \"gpt-4o\",\n    calculator: bool = False,\n    ddg_search: bool = False,\n    file_tools: bool = False,\n    shell_tools: bool = False,\n    data_analyst: bool = False,",
        "detail": "phidata.cookbook.llm_os.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.anyscale.assistant",
        "description": "phidata.cookbook.llms.anyscale.assistant",
        "peekOfCode": "assistant = Assistant(\n    llm=Anyscale(model=\"mistralai/Mixtral-8x7B-Instruct-v0.1\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a 2 sentence quick and healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.anyscale.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.anyscale.assistant_stream_off",
        "description": "phidata.cookbook.llms.anyscale.assistant_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=Anyscale(model=\"mistralai/Mixtral-8x7B-Instruct-v0.1\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a 2 sentence quick and healthy breakfast recipe.\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.anyscale.assistant_stream_off",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.anyscale.cli",
        "description": "phidata.cookbook.llms.anyscale.cli",
        "peekOfCode": "assistant = Assistant(llm=Anyscale(model=\"mistralai/Mixtral-8x7B-Instruct-v0.1\"))\nassistant.cli_app(markdown=True)",
        "detail": "phidata.cookbook.llms.anyscale.cli",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.anyscale.embeddings",
        "description": "phidata.cookbook.llms.anyscale.embeddings",
        "peekOfCode": "embeddings = AnyscaleEmbedder().get_embedding(\"Embed me\")\nprint(f\"Embeddings: {embeddings}\")\nprint(f\"Dimensions: {len(embeddings)}\")",
        "detail": "phidata.cookbook.llms.anyscale.embeddings",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.anyscale.pydantic_output",
        "description": "phidata.cookbook.llms.anyscale.pydantic_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.llms.anyscale.pydantic_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.anyscale.pydantic_output",
        "description": "phidata.cookbook.llms.anyscale.pydantic_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=Anyscale(),\n    description=\"You help people write movie ideas.\",\n    output_model=MovieScript,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.anyscale.pydantic_output",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.anyscale.tool_call",
        "description": "phidata.cookbook.llms.anyscale.tool_call",
        "peekOfCode": "assistant = Assistant(llm=Anyscale(), tools=[DuckDuckGo()], show_tool_calls=True, debug_mode=True)\nassistant.print_response(\"Whats happening in France? Summarize top stories with sources.\", markdown=True)",
        "detail": "phidata.cookbook.llms.anyscale.tool_call",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.azure_openai.assistant",
        "description": "phidata.cookbook.llms.azure_openai.assistant",
        "peekOfCode": "assistant = Assistant(\n    llm=AzureOpenAIChat(model=\"gpt-35-turbo\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a 2 sentence quick and healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.azure_openai.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.azure_openai.assistant_stream_off",
        "description": "phidata.cookbook.llms.azure_openai.assistant_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=AzureOpenAIChat(model=\"gpt-35-turbo\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a 2 sentence quick and healthy breakfast recipe.\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.azure_openai.assistant_stream_off",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.azure_openai.cli",
        "description": "phidata.cookbook.llms.azure_openai.cli",
        "peekOfCode": "assistant = Assistant(\n    llm=AzureOpenAIChat(model=\"gpt-35-turbo\"),  # model=\"deployment_name\"\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.cli_app(markdown=True)",
        "detail": "phidata.cookbook.llms.azure_openai.cli",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.azure_openai.pydantic_output",
        "description": "phidata.cookbook.llms.azure_openai.pydantic_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(\n        ...,\n        description=\"Ending of the movie. If not available, provide a happy ending.\",\n    )\n    genre: str = Field(\n        ...,\n        description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\",\n    )",
        "detail": "phidata.cookbook.llms.azure_openai.pydantic_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.azure_openai.pydantic_output",
        "description": "phidata.cookbook.llms.azure_openai.pydantic_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=AzureOpenAIChat(model=\"gpt-35-turbo\"),  # model=\"deployment_name\"\n    description=\"You help people write movie ideas.\",\n    output_model=MovieScript,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.azure_openai.pydantic_output",
        "documentation": {}
    },
    {
        "label": "get_top_hackernews_stories",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.azure_openai.tool_call",
        "description": "phidata.cookbook.llms.azure_openai.tool_call",
        "peekOfCode": "def get_top_hackernews_stories(num_stories: int = 10) -> str:\n    \"\"\"Use this function to get top stories from Hacker News.\n    Args:\n        num_stories (int): Number of stories to return. Defaults to 10.\n    Returns:\n        str: JSON string of top stories.\n    \"\"\"\n    # Fetch top story IDs\n    response = httpx.get(\"https://hacker-news.firebaseio.com/v0/topstories.json\")\n    story_ids = response.json()",
        "detail": "phidata.cookbook.llms.azure_openai.tool_call",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.azure_openai.tool_call",
        "description": "phidata.cookbook.llms.azure_openai.tool_call",
        "peekOfCode": "assistant = Assistant(\n    llm=AzureOpenAIChat(model=\"gpt-35-turbo\"),  # model=\"deployment_name\"\n    tools=[get_top_hackernews_stories],\n    show_tool_calls=True,\n)\nassistant.print_response(\"Summarize the top stories on hackernews?\")",
        "detail": "phidata.cookbook.llms.azure_openai.tool_call",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.bedrock.basic",
        "description": "phidata.cookbook.llms.bedrock.basic",
        "peekOfCode": "assistant = Assistant(\n    llm=Claude(model=\"anthropic.claude-3-sonnet-20240229-v1:0\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.bedrock.basic",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.bedrock.basic_stream_off",
        "description": "phidata.cookbook.llms.bedrock.basic_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=Claude(model=\"anthropic.claude-3-sonnet-20240229-v1:0\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.bedrock.basic_stream_off",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.claude.assistant",
        "description": "phidata.cookbook.llms.claude.assistant",
        "peekOfCode": "assistant = Assistant(\n    llm=Claude(model=\"claude-3-opus-20240229\"),\n    tools=[DuckDuckGo()],\n    show_tool_calls=True,\n)\nassistant.print_response(\"Whats happening in France?\", markdown=True)",
        "detail": "phidata.cookbook.llms.claude.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.claude.assistant_stream_off",
        "description": "phidata.cookbook.llms.claude.assistant_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=Claude(model=\"claude-3-opus-20240229\"),\n    tools=[DuckDuckGo()],\n    show_tool_calls=True,\n)\nassistant.print_response(\"Whats happening in France?\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.claude.assistant_stream_off",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.claude.basic",
        "description": "phidata.cookbook.llms.claude.basic",
        "peekOfCode": "assistant = Assistant(\n    llm=Claude(model=\"claude-3-haiku-20240307\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.claude.basic",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.claude.basic_stream_off",
        "description": "phidata.cookbook.llms.claude.basic_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=Claude(model=\"claude-3-haiku-20240307\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.claude.basic_stream_off",
        "documentation": {}
    },
    {
        "label": "duckdb_tools",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.claude.data_analyst",
        "description": "phidata.cookbook.llms.claude.data_analyst",
        "peekOfCode": "duckdb_tools = DuckDbTools(create_tables=False, export_tables=False, summarize_tables=False)\nduckdb_tools.create_table_from_path(\n    path=\"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\", table=\"movies\"\n)\nassistant = Assistant(\n    llm=Claude(model=\"claude-3-opus-20240229\"),\n    tools=[duckdb_tools],\n    show_tool_calls=True,\n    add_to_system_prompt=\"\"\"\n    Here are the tables you have access to:",
        "detail": "phidata.cookbook.llms.claude.data_analyst",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.claude.data_analyst",
        "description": "phidata.cookbook.llms.claude.data_analyst",
        "peekOfCode": "assistant = Assistant(\n    llm=Claude(model=\"claude-3-opus-20240229\"),\n    tools=[duckdb_tools],\n    show_tool_calls=True,\n    add_to_system_prompt=\"\"\"\n    Here are the tables you have access to:\n    - movies: Contains information about movies from IMDB.\n    \"\"\",\n    # debug_mode=True,\n)",
        "detail": "phidata.cookbook.llms.claude.data_analyst",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.claude.exa_search",
        "description": "phidata.cookbook.llms.claude.exa_search",
        "peekOfCode": "assistant = Assistant(llm=Claude(), tools=[ExaTools(), WebsiteTools()], show_tool_calls=True)\nassistant.print_response(\n    \"Produce this table: research chromatic homotopy theory.\"\n    \"Access each link in the result outputting the summary for that article, its link, and keywords; \"\n    \"After the table output make conceptual ascii art of the overarching themes and constructions\",\n    markdown=True,\n)",
        "detail": "phidata.cookbook.llms.claude.exa_search",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.claude.finance",
        "description": "phidata.cookbook.llms.claude.finance",
        "peekOfCode": "assistant = Assistant(\n    name=\"Finance Assistant\",\n    llm=Claude(model=\"claude-3-haiku-20240307\"),\n    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, stock_fundamentals=True)],\n    show_tool_calls=True,\n    description=\"You are an investment analyst that researches stock prices, analyst recommendations, and stock fundamentals.\",\n    instructions=[\"Format your response using markdown and use tables to display data where possible.\"],\n    # debug_mode=True,\n)\nassistant.print_response(\"Share the NVDA stock price and analyst recommendations\", markdown=True)",
        "detail": "phidata.cookbook.llms.claude.finance",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.claude.structured_output",
        "description": "phidata.cookbook.llms.claude.structured_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.llms.claude.structured_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.claude.structured_output",
        "description": "phidata.cookbook.llms.claude.structured_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=Claude(model=\"claude-3-opus-20240229\"),\n    description=\"You help people write movie scripts.\",\n    output_model=MovieScript,\n    # debug_mode=True,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.claude.structured_output",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.cohere.assistant",
        "description": "phidata.cookbook.llms.cohere.assistant",
        "peekOfCode": "assistant = Assistant(\n    llm=CohereChat(model=\"command-r\"),\n    tools=[DuckDuckGo()],\n    show_tool_calls=True,\n)\nassistant.print_response(\"Whats happening in France?\", markdown=True)",
        "detail": "phidata.cookbook.llms.cohere.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.cohere.assistant_stream_off",
        "description": "phidata.cookbook.llms.cohere.assistant_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=CohereChat(model=\"command-r\"),\n    tools=[DuckDuckGo()],\n    show_tool_calls=True,\n)\nassistant.print_response(\"Whats happening in France?\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.cohere.assistant_stream_off",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.cohere.basic",
        "description": "phidata.cookbook.llms.cohere.basic",
        "peekOfCode": "assistant = Assistant(\n    llm=CohereChat(model=\"command-r\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.cohere.basic",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.cohere.basic_stream_off",
        "description": "phidata.cookbook.llms.cohere.basic_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=CohereChat(model=\"command-r\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.cohere.basic_stream_off",
        "documentation": {}
    },
    {
        "label": "duckdb_tools",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.cohere.data_analyst",
        "description": "phidata.cookbook.llms.cohere.data_analyst",
        "peekOfCode": "duckdb_tools = DuckDbTools(create_tables=False, export_tables=False, summarize_tables=False)\nduckdb_tools.create_table_from_path(\n    path=\"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\", table=\"movies\"\n)\nassistant = Assistant(\n    llm=CohereChat(model=\"command-r-plus\"),\n    tools=[duckdb_tools],\n    show_tool_calls=True,\n    add_to_system_prompt=\"\"\"\n    Here are the tables you have access to:",
        "detail": "phidata.cookbook.llms.cohere.data_analyst",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.cohere.data_analyst",
        "description": "phidata.cookbook.llms.cohere.data_analyst",
        "peekOfCode": "assistant = Assistant(\n    llm=CohereChat(model=\"command-r-plus\"),\n    tools=[duckdb_tools],\n    show_tool_calls=True,\n    add_to_system_prompt=\"\"\"\n    Here are the tables you have access to:\n    - movies: Contains information about movies from IMDB.\n    \"\"\",\n    # debug_mode=True,\n)",
        "detail": "phidata.cookbook.llms.cohere.data_analyst",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.cohere.exa_search",
        "description": "phidata.cookbook.llms.cohere.exa_search",
        "peekOfCode": "assistant = Assistant(llm=CohereChat(model=\"command-r-plus\"), tools=[ExaTools(), WebsiteTools()], show_tool_calls=True)\nassistant.print_response(\n    \"Produce this table: research chromatic homotopy theory.\"\n    \"Access each link in the result outputting the summary for that article, its link, and keywords; \"\n    \"After the table output make conceptual ascii art of the overarching themes and constructions\",\n    markdown=True,\n)",
        "detail": "phidata.cookbook.llms.cohere.exa_search",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.cohere.finance",
        "description": "phidata.cookbook.llms.cohere.finance",
        "peekOfCode": "assistant = Assistant(\n    llm=CohereChat(model=\"command-r-plus\"),\n    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, stock_fundamentals=True)],\n    show_tool_calls=True,\n    description=\"You are an investment analyst that researches stock prices, analyst recommendations, and stock fundamentals.\",\n    instructions=[\"Format your response using markdown and use tables to display data where possible.\"],\n    # debug_mode=True,\n)\nassistant.print_response(\"Share the NVDA stock price and analyst recommendations\", markdown=True)\nassistant.print_response(\"Summarize fundamentals for TSLA\", markdown=True)",
        "detail": "phidata.cookbook.llms.cohere.finance",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.cohere.structured_output",
        "description": "phidata.cookbook.llms.cohere.structured_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.llms.cohere.structured_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.cohere.structured_output",
        "description": "phidata.cookbook.llms.cohere.structured_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=CohereChat(model=\"command-r\"),\n    description=\"You help people write movie scripts.\",\n    output_model=MovieScript,\n    debug_mode=True,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.cohere.structured_output",
        "documentation": {}
    },
    {
        "label": "clear_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.fireworks.app",
        "description": "phidata.cookbook.llms.fireworks.app",
        "peekOfCode": "def clear_assistant():\n    st.session_state[\"assistant\"] = None\ndef create_assistant(\n    web_search: bool = False, exa_search: bool = False, yfinance: bool = False, debug_mode: bool = False\n) -> Assistant:\n    logger.info(\"---*--- Creating Assistant ---*---\")\n    introduction = \"Hi, I'm an AI Assistant that uses function calling to answer questions.\\n\"\n    introduction += \"Select the tools from the sidebar and ask me questions.\"\n    description = dedent(\n        \"\"\"\\",
        "detail": "phidata.cookbook.llms.fireworks.app",
        "documentation": {}
    },
    {
        "label": "create_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.fireworks.app",
        "description": "phidata.cookbook.llms.fireworks.app",
        "peekOfCode": "def create_assistant(\n    web_search: bool = False, exa_search: bool = False, yfinance: bool = False, debug_mode: bool = False\n) -> Assistant:\n    logger.info(\"---*--- Creating Assistant ---*---\")\n    introduction = \"Hi, I'm an AI Assistant that uses function calling to answer questions.\\n\"\n    introduction += \"Select the tools from the sidebar and ask me questions.\"\n    description = dedent(\n        \"\"\"\\\n    You are a function calling AI model with access to various tools. Use your tools to assist the user in the best way possible.\n    \"\"\"",
        "detail": "phidata.cookbook.llms.fireworks.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.fireworks.app",
        "description": "phidata.cookbook.llms.fireworks.app",
        "peekOfCode": "def main() -> None:\n    logger.info(\"---*--- Running App ---*---\")\n    # Sidebar checkboxes for selecting tools\n    st.sidebar.markdown(\"### Select Tools\")\n    st.session_state[\"selected_tools\"] = []\n    web_search = st.sidebar.checkbox(\"Web Search\", value=True, on_change=clear_assistant)\n    exa_search = st.sidebar.checkbox(\"Exa Search\", value=False, on_change=clear_assistant)\n    yfinance = st.sidebar.checkbox(\"YFinance\", value=False, on_change=clear_assistant)\n    if not web_search and not exa_search and not yfinance:\n        st.sidebar.warning(\"Please select at least one tool\")",
        "detail": "phidata.cookbook.llms.fireworks.app",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.fireworks.assistant",
        "description": "phidata.cookbook.llms.fireworks.assistant",
        "peekOfCode": "assistant = Assistant(llm=Fireworks(), tools=[DuckDuckGo()], show_tool_calls=True)\nassistant.print_response(\"Whats happening in France?\", markdown=True)",
        "detail": "phidata.cookbook.llms.fireworks.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.fireworks.assistant_stream_off",
        "description": "phidata.cookbook.llms.fireworks.assistant_stream_off",
        "peekOfCode": "assistant = Assistant(llm=Fireworks(), tools=[DuckDuckGo()], show_tool_calls=True)\nassistant.print_response(\"Whats happening in France?\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.fireworks.assistant_stream_off",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.fireworks.basic",
        "description": "phidata.cookbook.llms.fireworks.basic",
        "peekOfCode": "assistant = Assistant(\n    llm=Fireworks(),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.fireworks.basic",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.fireworks.basic_stream_off",
        "description": "phidata.cookbook.llms.fireworks.basic_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=Fireworks(),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.fireworks.basic_stream_off",
        "documentation": {}
    },
    {
        "label": "duckdb_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.fireworks.data_analyst",
        "description": "phidata.cookbook.llms.fireworks.data_analyst",
        "peekOfCode": "duckdb_assistant = DuckDbAssistant(\n    llm=Fireworks(),\n    semantic_model=json.dumps(\n        {\n            \"tables\": [\n                {\n                    \"name\": \"movies\",\n                    \"description\": \"Contains information about movies from IMDB.\",\n                    \"path\": \"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\",\n                }",
        "detail": "phidata.cookbook.llms.fireworks.data_analyst",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.fireworks.embeddings",
        "description": "phidata.cookbook.llms.fireworks.embeddings",
        "peekOfCode": "embeddings = FireworksEmbedder().get_embedding(\"Embed me\")\nprint(f\"Embeddings: {embeddings}\")\nprint(f\"Dimensions: {len(embeddings)}\")",
        "detail": "phidata.cookbook.llms.fireworks.embeddings",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.fireworks.pydantic_output",
        "description": "phidata.cookbook.llms.fireworks.pydantic_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.llms.fireworks.pydantic_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.fireworks.pydantic_output",
        "description": "phidata.cookbook.llms.fireworks.pydantic_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=Fireworks(),\n    description=\"You help people write movie ideas.\",\n    output_model=MovieScript,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.fireworks.pydantic_output",
        "documentation": {}
    },
    {
        "label": "get_top_hackernews_stories",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.fireworks.tool_call",
        "description": "phidata.cookbook.llms.fireworks.tool_call",
        "peekOfCode": "def get_top_hackernews_stories(num_stories: int = 10) -> str:\n    \"\"\"Use this function to get top stories from Hacker News.\n    Args:\n        num_stories (int): Number of stories to return. Defaults to 10.\n    Returns:\n        str: JSON string of top stories.\n    \"\"\"\n    # Fetch top story IDs\n    response = httpx.get(\"https://hacker-news.firebaseio.com/v0/topstories.json\")\n    story_ids = response.json()",
        "detail": "phidata.cookbook.llms.fireworks.tool_call",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.fireworks.tool_call",
        "description": "phidata.cookbook.llms.fireworks.tool_call",
        "peekOfCode": "assistant = Assistant(\n    llm=Fireworks(),\n    tools=[get_top_hackernews_stories],\n    show_tool_calls=True,\n    debug_mode=True,\n)\nassistant.print_response(\"Summarize the top stories on hackernews?\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.fireworks.tool_call",
        "documentation": {}
    },
    {
        "label": "multimodal_example",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.gemini.samples.multimodal",
        "description": "phidata.cookbook.llms.gemini.samples.multimodal",
        "peekOfCode": "def multimodal_example(project: Optional[str], location: Optional[str]) -> str:\n    # Initialize Vertex AI\n    vertexai.init(project=project, location=location)\n    # Load the model\n    multimodal_model = GenerativeModel(\"gemini-1.0-pro-vision\")\n    # Query the model\n    response = multimodal_model.generate_content(\n        [\n            # Add an example image\n            Part.from_uri(\"gs://generativeai-downloads/images/scones.jpg\", mime_type=\"image/jpeg\"),",
        "detail": "phidata.cookbook.llms.gemini.samples.multimodal",
        "documentation": {}
    },
    {
        "label": "PROJECT_ID",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.gemini.samples.multimodal",
        "description": "phidata.cookbook.llms.gemini.samples.multimodal",
        "peekOfCode": "PROJECT_ID = getenv(\"PROJECT_ID\")\nLOCATION = getenv(\"LOCATION\")\n# *********** Run the example ***********\nif __name__ == \"__main__\":\n    result = multimodal_example(project=PROJECT_ID, location=LOCATION)\n    print(\"============= RESULT =============\")\n    print(result)\n    print(\"============= RESULT =============\")",
        "detail": "phidata.cookbook.llms.gemini.samples.multimodal",
        "documentation": {}
    },
    {
        "label": "LOCATION",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.gemini.samples.multimodal",
        "description": "phidata.cookbook.llms.gemini.samples.multimodal",
        "peekOfCode": "LOCATION = getenv(\"LOCATION\")\n# *********** Run the example ***********\nif __name__ == \"__main__\":\n    result = multimodal_example(project=PROJECT_ID, location=LOCATION)\n    print(\"============= RESULT =============\")\n    print(result)\n    print(\"============= RESULT =============\")",
        "detail": "phidata.cookbook.llms.gemini.samples.multimodal",
        "documentation": {}
    },
    {
        "label": "generate",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.gemini.samples.text_stream",
        "description": "phidata.cookbook.llms.gemini.samples.text_stream",
        "peekOfCode": "def generate(project: Optional[str], location: Optional[str]) -> None:\n    # Initialize Vertex AI\n    vertexai.init(project=project, location=location)\n    # Load the model\n    model = GenerativeModel(\"gemini-1.0-pro-vision\")\n    # Query the model\n    responses: Iterable[GenerationResponse] = model.generate_content(\"Who are you?\", stream=True)\n    # Process the response\n    for response in responses:\n        print(response.text, end=\"\")",
        "detail": "phidata.cookbook.llms.gemini.samples.text_stream",
        "documentation": {}
    },
    {
        "label": "PROJECT_ID",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.gemini.samples.text_stream",
        "description": "phidata.cookbook.llms.gemini.samples.text_stream",
        "peekOfCode": "PROJECT_ID = getenv(\"PROJECT_ID\")\nLOCATION = getenv(\"LOCATION\")\n# *********** Run the example ***********\nif __name__ == \"__main__\":\n    generate(project=PROJECT_ID, location=LOCATION)",
        "detail": "phidata.cookbook.llms.gemini.samples.text_stream",
        "documentation": {}
    },
    {
        "label": "LOCATION",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.gemini.samples.text_stream",
        "description": "phidata.cookbook.llms.gemini.samples.text_stream",
        "peekOfCode": "LOCATION = getenv(\"LOCATION\")\n# *********** Run the example ***********\nif __name__ == \"__main__\":\n    generate(project=PROJECT_ID, location=LOCATION)",
        "detail": "phidata.cookbook.llms.gemini.samples.text_stream",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.gemini.assistant",
        "description": "phidata.cookbook.llms.gemini.assistant",
        "peekOfCode": "assistant = Assistant(\n    llm=Gemini(model=\"gemini-1.5-pro-preview-0409\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.gemini.assistant",
        "documentation": {}
    },
    {
        "label": "duckdb_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.gemini.data_analyst",
        "description": "phidata.cookbook.llms.gemini.data_analyst",
        "peekOfCode": "duckdb_assistant = Assistant(\n    llm=Gemini(model=\"gemini-pro\"),\n    tools=[DuckDbTools()],\n    description=\"You are an expert data engineer that writes DuckDb queries to analyze data.\",\n    instructions=[\n        \"Using the `semantic_model` below, find which tables and columns you need to accomplish the task.\",\n        \"If you need to run a query, run `show_tables` to check the tables you need exist.\",\n        \"If the tables do not exist, RUN `create_table_from_path` to create the table using the path from the `semantic_model`\",\n        \"Once you have the tables and columns, create one single syntactically correct DuckDB query.\",\n        \"If you need to join tables, check the `semantic_model` for the relationships between the tables.\",",
        "detail": "phidata.cookbook.llms.gemini.data_analyst",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.gemini.tool_call",
        "description": "phidata.cookbook.llms.gemini.tool_call",
        "peekOfCode": "assistant = Assistant(\n    llm=Gemini(model=\"gemini-pro\"),\n    tools=[DuckDuckGo()],\n    show_tool_calls=True,\n)\nassistant.print_response(\"Whats happening in France?  Summarize top 10 stories with sources\", markdown=True)",
        "detail": "phidata.cookbook.llms.gemini.tool_call",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.ai_apps.pages.1_RAG_Research",
        "description": "phidata.cookbook.llms.groq.ai_apps.pages.1_RAG_Research",
        "peekOfCode": "def restart_assistant():\n    logger.debug(\"---*--- Restarting Assistant ---*---\")\n    st.session_state[\"research_assistant\"] = None\n    st.session_state[\"research_assistant_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\ndef main() -> None:",
        "detail": "phidata.cookbook.llms.groq.ai_apps.pages.1_RAG_Research",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.ai_apps.pages.1_RAG_Research",
        "description": "phidata.cookbook.llms.groq.ai_apps.pages.1_RAG_Research",
        "peekOfCode": "def main() -> None:\n    # Get LLM Model\n    model = (\n        st.sidebar.selectbox(\"Select LLM\", options=[\"llama3-70b-8192\", \"llama3-8b-8192\", \"mixtral-8x7b-32768\"])\n        or \"llama3-70b-8192\"\n    )\n    # Set llm in session state\n    if \"model\" not in st.session_state:\n        st.session_state[\"model\"] = model\n    # Restart the assistant if model changes",
        "detail": "phidata.cookbook.llms.groq.ai_apps.pages.1_RAG_Research",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.ai_apps.pages.2_RAG_Chat",
        "description": "phidata.cookbook.llms.groq.ai_apps.pages.2_RAG_Chat",
        "peekOfCode": "def restart_assistant():\n    logger.debug(\"---*--- Restarting Assistant ---*---\")\n    st.session_state[\"chat_assistant\"] = None\n    st.session_state[\"chat_assistant_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\ndef main() -> None:",
        "detail": "phidata.cookbook.llms.groq.ai_apps.pages.2_RAG_Chat",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.ai_apps.pages.2_RAG_Chat",
        "description": "phidata.cookbook.llms.groq.ai_apps.pages.2_RAG_Chat",
        "peekOfCode": "def main() -> None:\n    # Get LLM Model\n    model = (\n        st.sidebar.selectbox(\"Select LLM\", options=[\"llama3-70b-8192\", \"llama3-8b-8192\", \"mixtral-8x7b-32768\"])\n        or \"llama3-70b-8192\"\n    )\n    # Set llm in session state\n    if \"model\" not in st.session_state:\n        st.session_state[\"model\"] = model\n    # Restart the assistant if model changes",
        "detail": "phidata.cookbook.llms.groq.ai_apps.pages.2_RAG_Chat",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.ai_apps.Home",
        "description": "phidata.cookbook.llms.groq.ai_apps.Home",
        "peekOfCode": "def main() -> None:\n    st.markdown(\"---\")\n    st.markdown(\"### Select an AI App from the sidebar:\")\n    st.markdown(\"#### 1. RAG Research: Generate reports about topics\")\n    st.markdown(\"#### 2. RAG Chat: Chat with Websites and PDFs\")\n    st.sidebar.success(\"Select App from above\")\nmain()",
        "detail": "phidata.cookbook.llms.groq.ai_apps.Home",
        "documentation": {}
    },
    {
        "label": "get_rag_chat_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.ai_apps.assistants",
        "description": "phidata.cookbook.llms.groq.ai_apps.assistants",
        "peekOfCode": "def get_rag_chat_assistant(\n    model: str = \"llama3-70b-8192\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n    num_documents: Optional[int] = None,\n) -> Assistant:\n    logger.info(f\"-*- Creating RAG Assistant using {model} -*-\")\n    return Assistant(\n        name=\"groq_rag_assistant\",",
        "detail": "phidata.cookbook.llms.groq.ai_apps.assistants",
        "documentation": {}
    },
    {
        "label": "get_rag_research_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.ai_apps.assistants",
        "description": "phidata.cookbook.llms.groq.ai_apps.assistants",
        "peekOfCode": "def get_rag_research_assistant(\n    model: str = \"llama3-70b-8192\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n    num_documents: Optional[int] = None,\n) -> Assistant:\n    logger.info(f\"-*- Creating Research Assistant using: {model} -*-\")\n    return Assistant(\n        name=\"groq_research_assistant\",",
        "detail": "phidata.cookbook.llms.groq.ai_apps.assistants",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.groq.ai_apps.assistants",
        "description": "phidata.cookbook.llms.groq.ai_apps.assistants",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\ndef get_rag_chat_assistant(\n    model: str = \"llama3-70b-8192\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n    num_documents: Optional[int] = None,\n) -> Assistant:\n    logger.info(f\"-*- Creating RAG Assistant using {model} -*-\")\n    return Assistant(",
        "detail": "phidata.cookbook.llms.groq.ai_apps.assistants",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.auto_rag.app",
        "description": "phidata.cookbook.llms.groq.auto_rag.app",
        "peekOfCode": "def restart_assistant():\n    logger.debug(\"---*--- Restarting Assistant ---*---\")\n    st.session_state[\"auto_rag_assistant\"] = None\n    st.session_state[\"auto_rag_assistant_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\ndef main() -> None:",
        "detail": "phidata.cookbook.llms.groq.auto_rag.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.auto_rag.app",
        "description": "phidata.cookbook.llms.groq.auto_rag.app",
        "peekOfCode": "def main() -> None:\n    # Get LLM model\n    llm_model = st.sidebar.selectbox(\"Select LLM\", options=[\"llama3-70b-8192\", \"llama3-8b-8192\"])\n    # Set assistant_type in session state\n    if \"llm_model\" not in st.session_state:\n        st.session_state[\"llm_model\"] = llm_model\n    # Restart the assistant if assistant_type has changed\n    elif st.session_state[\"llm_model\"] != llm_model:\n        st.session_state[\"llm_model\"] = llm_model\n        restart_assistant()",
        "detail": "phidata.cookbook.llms.groq.auto_rag.app",
        "documentation": {}
    },
    {
        "label": "get_auto_rag_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.auto_rag.assistant",
        "description": "phidata.cookbook.llms.groq.auto_rag.assistant",
        "peekOfCode": "def get_auto_rag_assistant(\n    llm_model: str = \"llama3-70b-8192\",\n    embeddings_model: str = \"text-embedding-3-small\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get a Groq Auto RAG Assistant.\"\"\"\n    # Define the embedder based on the embeddings model\n    embedder = (",
        "detail": "phidata.cookbook.llms.groq.auto_rag.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.groq.auto_rag.assistant",
        "description": "phidata.cookbook.llms.groq.auto_rag.assistant",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\ndef get_auto_rag_assistant(\n    llm_model: str = \"llama3-70b-8192\",\n    embeddings_model: str = \"text-embedding-3-small\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get a Groq Auto RAG Assistant.\"\"\"\n    # Define the embedder based on the embeddings model",
        "detail": "phidata.cookbook.llms.groq.auto_rag.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.groq.finance_analyst.openbb_analyst",
        "description": "phidata.cookbook.llms.groq.finance_analyst.openbb_analyst",
        "peekOfCode": "assistant = Assistant(\n    llm=Groq(model=\"llama3-70b-8192\"),\n    tools=[OpenBBTools(obb=obb, company_profile=True, company_news=True, price_targets=True)],\n    show_tool_calls=True,\n)\nassistant.cli_app(markdown=True, stream=False, user=\"Groq\")\n# assistant.print_response(\"What's the stock price for meta\", markdown=True, stream=False)\n# assistant.print_response(\"Are analysts expecting meta to go up, share details\", markdown=True, stream=False)\n# assistant.print_response(\"What are analysts saying about NVDA\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.groq.finance_analyst.openbb_analyst",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.groq.finance_analyst.yfinance_analyst",
        "description": "phidata.cookbook.llms.groq.finance_analyst.yfinance_analyst",
        "peekOfCode": "assistant = Assistant(\n    llm=Groq(model=\"llama3-70b-8192\"),\n    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, stock_fundamentals=True, company_news=True)],\n    show_tool_calls=True,\n)\nassistant.cli_app(markdown=True, stream=False, user=\"Groq\")\n# assistant.print_response(\"What's the NVDA stock price\", markdown=True, stream=False)\n# assistant.print_response(\"Share NVDA analyst recommendations\", markdown=True, stream=False)\n# assistant.print_response(\"Summarize fundamentals for TSLA\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.groq.finance_analyst.yfinance_analyst",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.investment_researcher.app",
        "description": "phidata.cookbook.llms.groq.investment_researcher.app",
        "peekOfCode": "def restart_assistant():\n    logger.debug(\"---*--- Restarting Assistant ---*---\")\n    st.session_state[\"research_assistant\"] = None\n    st.rerun()\ndef main() -> None:\n    # Get LLM Model\n    model = (\n        st.sidebar.selectbox(\"Select LLM\", options=[\"llama3-70b-8192\", \"llama3-8b-8192\", \"mixtral-8x7b-32768\"])\n        or \"llama3-70b-8192\"\n    )",
        "detail": "phidata.cookbook.llms.groq.investment_researcher.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.investment_researcher.app",
        "description": "phidata.cookbook.llms.groq.investment_researcher.app",
        "peekOfCode": "def main() -> None:\n    # Get LLM Model\n    model = (\n        st.sidebar.selectbox(\"Select LLM\", options=[\"llama3-70b-8192\", \"llama3-8b-8192\", \"mixtral-8x7b-32768\"])\n        or \"llama3-70b-8192\"\n    )\n    # Set llm in session state\n    if \"model\" not in st.session_state:\n        st.session_state[\"model\"] = model\n    # Restart the assistant if model changes",
        "detail": "phidata.cookbook.llms.groq.investment_researcher.app",
        "documentation": {}
    },
    {
        "label": "get_invstment_research_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.investment_researcher.assistants",
        "description": "phidata.cookbook.llms.groq.investment_researcher.assistants",
        "peekOfCode": "def get_invstment_research_assistant(\n    model: str = \"llama3-70b-8192\",\n    debug_mode: bool = True,\n) -> Assistant:\n    return Assistant(\n        name=\"investment_research_assistant_groq\",\n        llm=Groq(model=model),\n        description=\"You are a Senior Investment Analyst for Goldman Sachs tasked with producing a research report for a very important client.\",\n        instructions=[\n            \"You will be provided with a stock and information from junior researchers.\",",
        "detail": "phidata.cookbook.llms.groq.investment_researcher.assistants",
        "documentation": {}
    },
    {
        "label": "truncate_text",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.news_articles.app",
        "description": "phidata.cookbook.llms.groq.news_articles.app",
        "peekOfCode": "def truncate_text(text: str, words: int) -> str:\n    return \" \".join(text.split()[:words])\ndef main() -> None:\n    # Get models\n    summary_model = st.sidebar.selectbox(\n        \"Select Summary Model\", options=[\"llama3-8b-8192\", \"mixtral-8x7b-32768\", \"llama3-70b-8192\"]\n    )\n    # Set assistant_type in session state\n    if \"summary_model\" not in st.session_state:\n        st.session_state[\"summary_model\"] = summary_model",
        "detail": "phidata.cookbook.llms.groq.news_articles.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.news_articles.app",
        "description": "phidata.cookbook.llms.groq.news_articles.app",
        "peekOfCode": "def main() -> None:\n    # Get models\n    summary_model = st.sidebar.selectbox(\n        \"Select Summary Model\", options=[\"llama3-8b-8192\", \"mixtral-8x7b-32768\", \"llama3-70b-8192\"]\n    )\n    # Set assistant_type in session state\n    if \"summary_model\" not in st.session_state:\n        st.session_state[\"summary_model\"] = summary_model\n    # Restart the assistant if assistant_type has changed\n    elif st.session_state[\"summary_model\"] != summary_model:",
        "detail": "phidata.cookbook.llms.groq.news_articles.app",
        "documentation": {}
    },
    {
        "label": "get_article_summarizer",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.news_articles.assistants",
        "description": "phidata.cookbook.llms.groq.news_articles.assistants",
        "peekOfCode": "def get_article_summarizer(\n    model: str = \"llama3-8b-8192\",\n    length: int = 500,\n    debug_mode: bool = False,\n) -> Assistant:\n    return Assistant(\n        name=\"Article Summarizer\",\n        llm=Groq(model=model),\n        description=\"You are a Senior NYT Editor and your task is to summarize a newspaper article.\",\n        instructions=[",
        "detail": "phidata.cookbook.llms.groq.news_articles.assistants",
        "documentation": {}
    },
    {
        "label": "get_article_writer",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.news_articles.assistants",
        "description": "phidata.cookbook.llms.groq.news_articles.assistants",
        "peekOfCode": "def get_article_writer(\n    model: str = \"llama3-70b-8192\",\n    debug_mode: bool = False,\n) -> Assistant:\n    return Assistant(\n        name=\"Article Summarizer\",\n        llm=Groq(model=model),\n        description=\"You are a Senior NYT Editor and your task is to write a NYT cover story worthy article due tomorrow.\",\n        instructions=[\n            \"You will be provided with a topic and pre-processed summaries from junior researchers.\",",
        "detail": "phidata.cookbook.llms.groq.news_articles.assistants",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.rag.app",
        "description": "phidata.cookbook.llms.groq.rag.app",
        "peekOfCode": "def restart_assistant():\n    st.session_state[\"rag_assistant\"] = None\n    st.session_state[\"rag_assistant_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\ndef main() -> None:\n    # Get LLM model",
        "detail": "phidata.cookbook.llms.groq.rag.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.rag.app",
        "description": "phidata.cookbook.llms.groq.rag.app",
        "peekOfCode": "def main() -> None:\n    # Get LLM model\n    llm_model = st.sidebar.selectbox(\"Select LLM\", options=[\"llama3-70b-8192\", \"llama3-8b-8192\", \"mixtral-8x7b-32768\"])\n    # Set assistant_type in session state\n    if \"llm_model\" not in st.session_state:\n        st.session_state[\"llm_model\"] = llm_model\n    # Restart the assistant if assistant_type has changed\n    elif st.session_state[\"llm_model\"] != llm_model:\n        st.session_state[\"llm_model\"] = llm_model\n        restart_assistant()",
        "detail": "phidata.cookbook.llms.groq.rag.app",
        "documentation": {}
    },
    {
        "label": "get_groq_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.rag.assistant",
        "description": "phidata.cookbook.llms.groq.rag.assistant",
        "peekOfCode": "def get_groq_assistant(\n    llm_model: str = \"llama3-70b-8192\",\n    embeddings_model: str = \"text-embedding-3-small\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get a Groq RAG Assistant.\"\"\"\n    # Define the embedder based on the embeddings model\n    embedder = (",
        "detail": "phidata.cookbook.llms.groq.rag.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.groq.rag.assistant",
        "description": "phidata.cookbook.llms.groq.rag.assistant",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\ndef get_groq_assistant(\n    llm_model: str = \"llama3-70b-8192\",\n    embeddings_model: str = \"text-embedding-3-small\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get a Groq RAG Assistant.\"\"\"\n    # Define the embedder based on the embeddings model",
        "detail": "phidata.cookbook.llms.groq.rag.assistant",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.research.app",
        "description": "phidata.cookbook.llms.groq.research.app",
        "peekOfCode": "def main() -> None:\n    # Get model\n    llm_model = st.sidebar.selectbox(\n        \"Select Model\", options=[\"llama3-70b-8192\", \"llama3-8b-8192\", \"mixtral-8x7b-32768\"]\n    )\n    # Set assistant_type in session state\n    if \"llm_model\" not in st.session_state:\n        st.session_state[\"llm_model\"] = llm_model\n    # Restart the assistant if assistant_type has changed\n    elif st.session_state[\"llm_model\"] != llm_model:",
        "detail": "phidata.cookbook.llms.groq.research.app",
        "documentation": {}
    },
    {
        "label": "get_research_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.research.assistant",
        "description": "phidata.cookbook.llms.groq.research.assistant",
        "peekOfCode": "def get_research_assistant(\n    model: str = \"llama3-70b-8192\",\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get a Groq Research Assistant.\"\"\"\n    return Assistant(\n        name=\"groq_research_assistant\",\n        llm=Groq(model=model),\n        description=\"You are a Senior NYT Editor tasked with writing a NYT cover story worthy report due tomorrow.\",\n        instructions=[",
        "detail": "phidata.cookbook.llms.groq.research.assistant",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.video_summary.app",
        "description": "phidata.cookbook.llms.groq.video_summary.app",
        "peekOfCode": "def main() -> None:\n    # Get model\n    llm_model = st.sidebar.selectbox(\n        \"Select Model\", options=[\"llama3-70b-8192\", \"llama3-8b-8192\", \"mixtral-8x7b-32768\"]\n    )\n    # Set assistant_type in session state\n    if \"llm_model\" not in st.session_state:\n        st.session_state[\"llm_model\"] = llm_model\n    # Restart the assistant if assistant_type has changed\n    elif st.session_state[\"llm_model\"] != llm_model:",
        "detail": "phidata.cookbook.llms.groq.video_summary.app",
        "documentation": {}
    },
    {
        "label": "get_chunk_summarizer",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.video_summary.assistant",
        "description": "phidata.cookbook.llms.groq.video_summary.assistant",
        "peekOfCode": "def get_chunk_summarizer(\n    model: str = \"llama3-70b-8192\",\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get a Groq Research Assistant.\"\"\"\n    return Assistant(\n        name=\"groq_youtube_pre_processor\",\n        llm=Groq(model=model),\n        description=\"You are a Senior NYT Reporter tasked with summarizing a youtube video.\",\n        instructions=[",
        "detail": "phidata.cookbook.llms.groq.video_summary.assistant",
        "documentation": {}
    },
    {
        "label": "get_video_summarizer",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.groq.video_summary.assistant",
        "description": "phidata.cookbook.llms.groq.video_summary.assistant",
        "peekOfCode": "def get_video_summarizer(\n    model: str = \"llama3-70b-8192\",\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get a Groq Research Assistant.\"\"\"\n    return Assistant(\n        name=\"groq_video_summarizer\",\n        llm=Groq(model=model),\n        description=\"You are a Senior NYT Reporter tasked with writing a summary of a youtube video.\",\n        instructions=[",
        "detail": "phidata.cookbook.llms.groq.video_summary.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.groq.basic",
        "description": "phidata.cookbook.llms.groq.basic",
        "peekOfCode": "assistant = Assistant(\n    llm=Groq(model=\"llama3-70b-8192\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.groq.basic",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.groq.basic_stream_off",
        "description": "phidata.cookbook.llms.groq.basic_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=Groq(model=\"mixtral-8x7b-32768\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.groq.basic_stream_off",
        "documentation": {}
    },
    {
        "label": "data_analyst",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.groq.data_analyst",
        "description": "phidata.cookbook.llms.groq.data_analyst",
        "peekOfCode": "data_analyst = DuckDbAssistant(\n    llm=Groq(model=\"llama3-70b-8192\"),\n    semantic_model=\"\"\"\n    tables:\n      - name: movies\n        description: \"Contains information about movies from IMDB.\"\n        path: \"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\"\n    \"\"\",\n    show_tool_calls=True,\n)",
        "detail": "phidata.cookbook.llms.groq.data_analyst",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.groq.finance",
        "description": "phidata.cookbook.llms.groq.finance",
        "peekOfCode": "assistant = Assistant(\n    llm=Groq(model=\"llama3-70b-8192\"),\n    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, stock_fundamentals=True, company_news=True)],\n    show_tool_calls=True,\n)\nassistant.cli_app(markdown=True, stream=False, user=\"Groq\")\n# assistant.print_response(\"What's the NVDA stock price\", markdown=True, stream=False)\n# assistant.print_response(\"Share NVDA analyst recommendations\", markdown=True, stream=False)\n# assistant.print_response(\"Summarize fundamentals for TSLA\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.groq.finance",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.groq.structured_output",
        "description": "phidata.cookbook.llms.groq.structured_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    name: str = Field(..., description=\"Give a name to this movie\")\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    genre: str = Field(..., description=\"Genre of the movie. If not available, select action or romantic comedy.\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(\n    llm=Groq(model=\"mixtral-8x7b-32768\"),\n    description=\"You help people write movie scripts.\",\n    output_model=MovieScript,",
        "detail": "phidata.cookbook.llms.groq.structured_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.groq.structured_output",
        "description": "phidata.cookbook.llms.groq.structured_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=Groq(model=\"mixtral-8x7b-32768\"),\n    description=\"You help people write movie scripts.\",\n    output_model=MovieScript,\n)\npprint(movie_assistant.run(\"New York\"))\n# movie_assistant.cli_app(user=\"Theme\", stream=False)",
        "detail": "phidata.cookbook.llms.groq.structured_output",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.groq.web_search",
        "description": "phidata.cookbook.llms.groq.web_search",
        "peekOfCode": "assistant = Assistant(\n    llm=Groq(model=\"llama3-70b-8192\"),\n    tools=[DuckDuckGo()],\n    instructions=[\"Always search the web for information\"],\n    show_tool_calls=True,\n)\nassistant.cli_app(markdown=True, stream=False)\n# assistant.print_response(\"Whats happening in France?\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.groq.web_search",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.hermes2.auto_rag.app",
        "description": "phidata.cookbook.llms.hermes2.auto_rag.app",
        "peekOfCode": "def restart_assistant():\n    st.session_state[\"assistant\"] = None\n    st.session_state[\"assistant_run_id\"] = None\n    st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\ndef main() -> None:\n    # Get username\n    username = get_username_sidebar()\n    if username:\n        st.sidebar.info(f\":technologist: User: {username}\")",
        "detail": "phidata.cookbook.llms.hermes2.auto_rag.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.hermes2.auto_rag.app",
        "description": "phidata.cookbook.llms.hermes2.auto_rag.app",
        "peekOfCode": "def main() -> None:\n    # Get username\n    username = get_username_sidebar()\n    if username:\n        st.sidebar.info(f\":technologist: User: {username}\")\n    else:\n        st.write(\":technologist: Please enter a username\")\n        return\n    # Get the assistant\n    assistant: Assistant",
        "detail": "phidata.cookbook.llms.hermes2.auto_rag.app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.hermes2.auto_rag.app",
        "description": "phidata.cookbook.llms.hermes2.auto_rag.app",
        "peekOfCode": "logger = getLogger(__name__)\nst.set_page_config(\n    page_title=\"Auto RAG\",\n    page_icon=\":orange_heart:\",\n)\nst.title(\"Hermes 2 Pro Autonomous RAG\")\nst.markdown(\"##### :orange_heart: built with [phidata](https://github.com/phidatahq/phidata)\")\ndef restart_assistant():\n    st.session_state[\"assistant\"] = None\n    st.session_state[\"assistant_run_id\"] = None",
        "detail": "phidata.cookbook.llms.hermes2.auto_rag.app",
        "documentation": {}
    },
    {
        "label": "get_hermes_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.hermes2.auto_rag.assistant",
        "description": "phidata.cookbook.llms.hermes2.auto_rag.assistant",
        "peekOfCode": "def get_hermes_assistant(\n    user_id: Optional[str] = None, run_id: Optional[str] = None, web_search: bool = False, debug_mode: bool = False\n) -> Assistant:\n    \"\"\"Get an Autonomous Hermes 2 Assistant.\"\"\"\n    introduction = \"Hi, I'm an Autonomous RAG Assistant that uses function calling to answer questions.\\n\\n\"\n    introduction += \"Upload a PDF and ask me questions.\"\n    instructions = [\n        f\"You are interacting with the user: {user_id}\",\n        \"When the user asks a question, search your knowledge base using the `search_knowledge_base` tool and provide a concise and relevant answer.\",\n        \"Keep your conversation light hearted and fun.\",",
        "detail": "phidata.cookbook.llms.hermes2.auto_rag.assistant",
        "documentation": {}
    },
    {
        "label": "knowledge_base",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.hermes2.auto_rag.assistant",
        "description": "phidata.cookbook.llms.hermes2.auto_rag.assistant",
        "peekOfCode": "knowledge_base = AssistantKnowledge(\n    vector_db=PgVector2(\n        db_url=vector_db.get_db_connection_local(),\n        # Store embeddings in table: ai.hermes2_auto_rag_documents\n        collection=\"hermes2_auto_rag_documents\",\n        # Use the OllamaEmbedder to generate embeddings\n        embedder=OllamaEmbedder(model=\"adrienbrault/nous-hermes2pro:Q8_0\", dimensions=4096),\n    ),\n    # 3 references are added to the prompt\n    num_documents=3,",
        "detail": "phidata.cookbook.llms.hermes2.auto_rag.assistant",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.hermes2.auto_rag.assistant",
        "description": "phidata.cookbook.llms.hermes2.auto_rag.assistant",
        "peekOfCode": "storage = PgAssistantStorage(\n    db_url=vector_db.get_db_connection_local(),\n    # Store assistant runs in table: ai.hermes2_auto_rag\n    table_name=\"hermes2_auto_rag\",\n)\ndef get_hermes_assistant(\n    user_id: Optional[str] = None, run_id: Optional[str] = None, web_search: bool = False, debug_mode: bool = False\n) -> Assistant:\n    \"\"\"Get an Autonomous Hermes 2 Assistant.\"\"\"\n    introduction = \"Hi, I'm an Autonomous RAG Assistant that uses function calling to answer questions.\\n\\n\"",
        "detail": "phidata.cookbook.llms.hermes2.auto_rag.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.hermes2.assistant",
        "description": "phidata.cookbook.llms.hermes2.assistant",
        "peekOfCode": "assistant = Assistant(llm=Hermes(model=\"adrienbrault/nous-hermes2pro:Q8_0\"), tools=[DuckDuckGo()], show_tool_calls=True)\nassistant.print_response(\"Whats happening in France?\", markdown=True)",
        "detail": "phidata.cookbook.llms.hermes2.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.hermes2.basic",
        "description": "phidata.cookbook.llms.hermes2.basic",
        "peekOfCode": "assistant = Assistant(\n    llm=Hermes(model=\"adrienbrault/nous-hermes2pro:Q8_0\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.hermes2.basic",
        "documentation": {}
    },
    {
        "label": "embedder",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.hermes2.embeddings",
        "description": "phidata.cookbook.llms.hermes2.embeddings",
        "peekOfCode": "embedder = OllamaEmbedder(model=\"adrienbrault/nous-hermes2pro:Q8_0\", dimensions=4096)\nembeddings = embedder.get_embedding(\"Embed me\")\nprint(f\"Embeddings: {embeddings[:10]}\")\nprint(f\"Dimensions: {len(embeddings)}\")",
        "detail": "phidata.cookbook.llms.hermes2.embeddings",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.hermes2.embeddings",
        "description": "phidata.cookbook.llms.hermes2.embeddings",
        "peekOfCode": "embeddings = embedder.get_embedding(\"Embed me\")\nprint(f\"Embeddings: {embeddings[:10]}\")\nprint(f\"Dimensions: {len(embeddings)}\")",
        "detail": "phidata.cookbook.llms.hermes2.embeddings",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.hermes2.exa_kg",
        "description": "phidata.cookbook.llms.hermes2.exa_kg",
        "peekOfCode": "assistant = Assistant(\n    llm=Hermes(model=\"adrienbrault/nous-hermes2pro:Q8_0\"), tools=[ExaTools(), WebsiteTools()], show_tool_calls=True\n)\nassistant.print_response(\n    \"produce this table: research chromatic homotopy theory, \"\n    \"access each link in the result outputting the summary for that article, its link, and keywords; \"\n    \"after the table output make conceptual ascii art of the overarching themes and constructions\",\n    markdown=True,\n)",
        "detail": "phidata.cookbook.llms.hermes2.exa_kg",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.hermes2.finance",
        "description": "phidata.cookbook.llms.hermes2.finance",
        "peekOfCode": "assistant = Assistant(\n    llm=Hermes(model=\"adrienbrault/nous-hermes2pro:Q8_0\"),\n    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, stock_fundamentals=True)],\n    show_tool_calls=True,\n)\nassistant.print_response(\"Share the NVDA stock price and analyst recommendations\", markdown=True)\nassistant.print_response(\"Summarize fundamentals for TSLA\", markdown=True)",
        "detail": "phidata.cookbook.llms.hermes2.finance",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.hermes2.report",
        "description": "phidata.cookbook.llms.hermes2.report",
        "peekOfCode": "assistant = Assistant(\n    llm=Hermes(model=\"adrienbrault/nous-hermes2pro:Q8_0\"), tools=[DuckDuckGo(), WebsiteTools()], show_tool_calls=True\n)\nassistant.print_response(\n    \"Produce a report about NousResearch. Search for their website and huggingface. Read both urls and provide a detailed summary along with a unique fact. Then draft a message to NousResearch thanking them for their amazing work.\",\n    markdown=True,\n)",
        "detail": "phidata.cookbook.llms.hermes2.report",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.hermes2.structured_output",
        "description": "phidata.cookbook.llms.hermes2.structured_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.llms.hermes2.structured_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.hermes2.structured_output",
        "description": "phidata.cookbook.llms.hermes2.structured_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=Hermes(model=\"adrienbrault/nous-hermes2pro:Q8_0\"),\n    description=\"You help people write movie scripts.\",\n    output_model=MovieScript,\n    # debug_mode=True,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.hermes2.structured_output",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.llama_cpp.assistant",
        "description": "phidata.cookbook.llms.llama_cpp.assistant",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenAILike(base_url=\"http://localhost:8000/v1\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a 2 sentence quick healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.llama_cpp.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.llama_cpp.assistant_stream_off",
        "description": "phidata.cookbook.llms.llama_cpp.assistant_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenAILike(base_url=\"http://localhost:8000/v1\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", stream=False, markdown=True)",
        "detail": "phidata.cookbook.llms.llama_cpp.assistant_stream_off",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.llama_cpp.pydantic_output",
        "description": "phidata.cookbook.llms.llama_cpp.pydantic_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.llms.llama_cpp.pydantic_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.llama_cpp.pydantic_output",
        "description": "phidata.cookbook.llms.llama_cpp.pydantic_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=OpenAILike(base_url=\"http://localhost:8000/v1\"),\n    description=\"You help people write movie ideas.\",\n    output_model=MovieScript,\n    debug_mode=True,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.llama_cpp.pydantic_output",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.llama_cpp.tool_call",
        "description": "phidata.cookbook.llms.llama_cpp.tool_call",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenAILike(base_url=\"http://localhost:8000/v1\"), tools=[DuckDuckGo()], show_tool_calls=True, debug_mode=True\n)\nassistant.print_response(\"Whats happening in France? Summarize top stories with sources.\", markdown=True)",
        "detail": "phidata.cookbook.llms.llama_cpp.tool_call",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.lmstudio.assistant",
        "description": "phidata.cookbook.llms.lmstudio.assistant",
        "peekOfCode": "assistant = Assistant(llm=OpenAILike(base_url=\"http://localhost:1234/v1\"))\nassistant.print_response(\"Share a 2 sentence quick healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.lmstudio.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.lmstudio.assistant_stream_off",
        "description": "phidata.cookbook.llms.lmstudio.assistant_stream_off",
        "peekOfCode": "assistant = Assistant(llm=OpenAILike(base_url=\"http://localhost:1234/v1\"))\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", stream=False, markdown=True)",
        "detail": "phidata.cookbook.llms.lmstudio.assistant_stream_off",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.lmstudio.cli",
        "description": "phidata.cookbook.llms.lmstudio.cli",
        "peekOfCode": "assistant = Assistant(llm=OpenAILike(base_url=\"http://localhost:1234/v1\"))\nassistant.cli_app(markdown=True)",
        "detail": "phidata.cookbook.llms.lmstudio.cli",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.lmstudio.pydantic_output",
        "description": "phidata.cookbook.llms.lmstudio.pydantic_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.llms.lmstudio.pydantic_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.lmstudio.pydantic_output",
        "description": "phidata.cookbook.llms.lmstudio.pydantic_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=OpenAILike(base_url=\"http://localhost:1234/v1\"),\n    description=\"You help people write movie ideas.\",\n    output_model=MovieScript,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.lmstudio.pydantic_output",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.lmstudio.tool_call",
        "description": "phidata.cookbook.llms.lmstudio.tool_call",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenAILike(base_url=\"http://localhost:1234/v1\"),\n    tools=[DuckDuckGo()],\n    show_tool_calls=True,\n)\nassistant.print_response(\"Whats happening in France? Summarize top stories with sources.\", markdown=True)",
        "detail": "phidata.cookbook.llms.lmstudio.tool_call",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.mistral.rag.app",
        "description": "phidata.cookbook.llms.mistral.rag.app",
        "peekOfCode": "def restart_assistant():\n    st.session_state[\"mistral_assistant\"] = None\n    st.session_state[\"mistral_assistant_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\ndef main() -> None:\n    # Get model",
        "detail": "phidata.cookbook.llms.mistral.rag.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.mistral.rag.app",
        "description": "phidata.cookbook.llms.mistral.rag.app",
        "peekOfCode": "def main() -> None:\n    # Get model\n    mistral_model = st.sidebar.selectbox(\n        \"Select Model\",\n        options=[\"open-mixtral-8x22b\", \"mistral-large-latest\", \"open-mixtral-8x7b\", \"mistral-medium-latest\"],\n    )\n    # Set assistant_type in session state\n    if \"mistral_model\" not in st.session_state:\n        st.session_state[\"mistral_model\"] = mistral_model\n    # Restart the assistant if assistant_type has changed",
        "detail": "phidata.cookbook.llms.mistral.rag.app",
        "documentation": {}
    },
    {
        "label": "get_mistral_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.mistral.rag.assistant",
        "description": "phidata.cookbook.llms.mistral.rag.assistant",
        "peekOfCode": "def get_mistral_assistant(\n    model: Optional[str] = \"mistral-large-latest\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get a Mistral RAG Assistant.\"\"\"\n    return Assistant(\n        name=\"mistral_rag_assistant\",\n        run_id=run_id,",
        "detail": "phidata.cookbook.llms.mistral.rag.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.mistral.rag.assistant",
        "description": "phidata.cookbook.llms.mistral.rag.assistant",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\nmistral_assistant_storage = PgAssistantStorage(\n    db_url=db_url,\n    # Store assistant runs in table: ai.mistral_rag_assistant\n    table_name=\"mistral_rag_assistant\",\n)\nmistral_assistant_knowledge = AssistantKnowledge(\n    vector_db=PgVector2(\n        db_url=db_url,\n        # Store embeddings in table: ai.mistral_rag_documents",
        "detail": "phidata.cookbook.llms.mistral.rag.assistant",
        "documentation": {}
    },
    {
        "label": "mistral_assistant_storage",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.mistral.rag.assistant",
        "description": "phidata.cookbook.llms.mistral.rag.assistant",
        "peekOfCode": "mistral_assistant_storage = PgAssistantStorage(\n    db_url=db_url,\n    # Store assistant runs in table: ai.mistral_rag_assistant\n    table_name=\"mistral_rag_assistant\",\n)\nmistral_assistant_knowledge = AssistantKnowledge(\n    vector_db=PgVector2(\n        db_url=db_url,\n        # Store embeddings in table: ai.mistral_rag_documents\n        collection=\"mistral_rag_documents\",",
        "detail": "phidata.cookbook.llms.mistral.rag.assistant",
        "documentation": {}
    },
    {
        "label": "mistral_assistant_knowledge",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.mistral.rag.assistant",
        "description": "phidata.cookbook.llms.mistral.rag.assistant",
        "peekOfCode": "mistral_assistant_knowledge = AssistantKnowledge(\n    vector_db=PgVector2(\n        db_url=db_url,\n        # Store embeddings in table: ai.mistral_rag_documents\n        collection=\"mistral_rag_documents\",\n        embedder=MistralEmbedder(),\n    ),\n    # 5 references are added to the prompt\n    num_documents=5,\n)",
        "detail": "phidata.cookbook.llms.mistral.rag.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.mistral.assistant",
        "description": "phidata.cookbook.llms.mistral.assistant",
        "peekOfCode": "assistant = Assistant(\n    llm=Mistral(model=\"open-mixtral-8x22b\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.mistral.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.mistral.assistant_stream_off",
        "description": "phidata.cookbook.llms.mistral.assistant_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=Mistral(model=\"mistral-large-latest\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.mistral.assistant_stream_off",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.mistral.list_models",
        "description": "phidata.cookbook.llms.mistral.list_models",
        "peekOfCode": "def main():\n    api_key = os.environ[\"MISTRAL_API_KEY\"]\n    client = MistralClient(api_key=api_key)\n    list_models_response = client.list_models()\n    available_models = []\n    for model in list_models_response.data:\n        available_models.append(model.id)\n    pprint(available_models)\nif __name__ == \"__main__\":\n    main()",
        "detail": "phidata.cookbook.llms.mistral.list_models",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.mistral.pydantic_output",
        "description": "phidata.cookbook.llms.mistral.pydantic_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.llms.mistral.pydantic_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.mistral.pydantic_output",
        "description": "phidata.cookbook.llms.mistral.pydantic_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=Mistral(model=\"mistral-large-latest\"),\n    description=\"You help people write movie ideas.\",\n    output_model=MovieScript,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.mistral.pydantic_output",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.mistral.tool_call",
        "description": "phidata.cookbook.llms.mistral.tool_call",
        "peekOfCode": "assistant = Assistant(\n    llm=Mistral(model=\"mistral-large-latest\"),\n    tools=[DuckDuckGo()],\n    show_tool_calls=True,\n    debug_mode=True,\n)\nassistant.print_response(\"Whats happening in France? Summarize top 2 stories\", markdown=True)",
        "detail": "phidata.cookbook.llms.mistral.tool_call",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.ollama.auto_rag.app",
        "description": "phidata.cookbook.llms.ollama.auto_rag.app",
        "peekOfCode": "def restart_assistant():\n    logger.debug(\"---*--- Restarting Assistant ---*---\")\n    st.session_state[\"auto_rag_assistant\"] = None\n    st.session_state[\"auto_rag_assistant_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\ndef main() -> None:",
        "detail": "phidata.cookbook.llms.ollama.auto_rag.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.ollama.auto_rag.app",
        "description": "phidata.cookbook.llms.ollama.auto_rag.app",
        "peekOfCode": "def main() -> None:\n    # Get the assistant\n    auto_rag_assistant: Assistant\n    if \"auto_rag_assistant\" not in st.session_state or st.session_state[\"auto_rag_assistant\"] is None:\n        logger.info(\"---*--- Creating Assistant ---*---\")\n        auto_rag_assistant = get_auto_rag_assistant()\n        st.session_state[\"auto_rag_assistant\"] = auto_rag_assistant\n    else:\n        auto_rag_assistant = st.session_state[\"auto_rag_assistant\"]\n    # Create assistant run (i.e. log to database) and save run_id in session state",
        "detail": "phidata.cookbook.llms.ollama.auto_rag.app",
        "documentation": {}
    },
    {
        "label": "get_auto_rag_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.ollama.auto_rag.assistant",
        "description": "phidata.cookbook.llms.ollama.auto_rag.assistant",
        "peekOfCode": "def get_auto_rag_assistant(\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get a Local Auto RAG Assistant.\"\"\"\n    return Assistant(\n        name=\"auto_rag_assistant_ollama\",\n        run_id=run_id,\n        user_id=user_id,",
        "detail": "phidata.cookbook.llms.ollama.auto_rag.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.auto_rag.assistant",
        "description": "phidata.cookbook.llms.ollama.auto_rag.assistant",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\ndef get_auto_rag_assistant(\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get a Local Auto RAG Assistant.\"\"\"\n    return Assistant(\n        name=\"auto_rag_assistant_ollama\",\n        run_id=run_id,",
        "detail": "phidata.cookbook.llms.ollama.auto_rag.assistant",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.ollama.rag.app",
        "description": "phidata.cookbook.llms.ollama.rag.app",
        "peekOfCode": "def restart_assistant():\n    st.session_state[\"rag_assistant\"] = None\n    st.session_state[\"rag_assistant_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\ndef main() -> None:\n    # Get model",
        "detail": "phidata.cookbook.llms.ollama.rag.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.ollama.rag.app",
        "description": "phidata.cookbook.llms.ollama.rag.app",
        "peekOfCode": "def main() -> None:\n    # Get model\n    llm_model = st.sidebar.selectbox(\"Select Model\", options=[\"llama3\", \"phi3\", \"openhermes\", \"llama2\"])\n    # Set assistant_type in session state\n    if \"llm_model\" not in st.session_state:\n        st.session_state[\"llm_model\"] = llm_model\n    # Restart the assistant if assistant_type has changed\n    elif st.session_state[\"llm_model\"] != llm_model:\n        st.session_state[\"llm_model\"] = llm_model\n        restart_assistant()",
        "detail": "phidata.cookbook.llms.ollama.rag.app",
        "documentation": {}
    },
    {
        "label": "get_rag_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.ollama.rag.assistant",
        "description": "phidata.cookbook.llms.ollama.rag.assistant",
        "peekOfCode": "def get_rag_assistant(\n    llm_model: str = \"llama3\",\n    embeddings_model: str = \"nomic-embed-text\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get a Local RAG Assistant.\"\"\"\n    # Define the embedder based on the embeddings model\n    embedder = OllamaEmbedder(model=embeddings_model, dimensions=4096)",
        "detail": "phidata.cookbook.llms.ollama.rag.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.rag.assistant",
        "description": "phidata.cookbook.llms.ollama.rag.assistant",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\ndef get_rag_assistant(\n    llm_model: str = \"llama3\",\n    embeddings_model: str = \"nomic-embed-text\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get a Local RAG Assistant.\"\"\"\n    # Define the embedder based on the embeddings model",
        "detail": "phidata.cookbook.llms.ollama.rag.assistant",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.ollama.tools.app",
        "description": "phidata.cookbook.llms.ollama.tools.app",
        "peekOfCode": "def restart_assistant():\n    logger.debug(\"---*--- Restarting Assistant ---*---\")\n    st.session_state[\"local_assistant\"] = None\n    st.session_state[\"local_assistant_run_id\"] = None\n    if \"llm_updated\" in st.session_state:\n        if \"ddg_search_enabled\" in st.session_state:\n            st.session_state[\"ddg_search_enabled\"] = False\n        if \"tavily_search_enabled\" in st.session_state:\n            st.session_state[\"tavily_search_enabled\"] = False\n        if \"yfinance_tools_enabled\" in st.session_state:",
        "detail": "phidata.cookbook.llms.ollama.tools.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.ollama.tools.app",
        "description": "phidata.cookbook.llms.ollama.tools.app",
        "peekOfCode": "def main() -> None:\n    # Get LLM id\n    llm_id = st.sidebar.selectbox(\"Select LLM\", options=[\"hermes2pro-llama3\", \"llama3\"]) or \"hermes2pro-llama3\"\n    # Set llm in session state\n    if \"llm_id\" not in st.session_state:\n        st.session_state[\"llm_id\"] = llm_id\n    # Restart the assistant if llm_id changes\n    elif st.session_state[\"llm_id\"] != llm_id:\n        st.session_state[\"llm_id\"] = llm_id\n        st.session_state[\"llm_updated\"] = True",
        "detail": "phidata.cookbook.llms.ollama.tools.app",
        "documentation": {}
    },
    {
        "label": "get_function_calling_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.ollama.tools.assistant",
        "description": "phidata.cookbook.llms.ollama.tools.assistant",
        "peekOfCode": "def get_function_calling_assistant(\n    llm_id: str = \"llama3\",\n    ddg_search: bool = False,\n    yfinance: bool = False,\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get a Function Calling Assistant.\"\"\"\n    tools: List[Any] = []",
        "detail": "phidata.cookbook.llms.ollama.tools.assistant",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.ollama.video_summary.app",
        "description": "phidata.cookbook.llms.ollama.video_summary.app",
        "peekOfCode": "def main() -> None:\n    # Get model\n    llm_model = st.sidebar.selectbox(\"Select Model\", options=[\"llama3\", \"phi3\"])\n    # Set assistant_type in session state\n    if \"llm_model\" not in st.session_state:\n        st.session_state[\"llm_model\"] = llm_model\n    # Restart the assistant if assistant_type has changed\n    elif st.session_state[\"llm_model\"] != llm_model:\n        st.session_state[\"llm_model\"] = llm_model\n        st.rerun()",
        "detail": "phidata.cookbook.llms.ollama.video_summary.app",
        "documentation": {}
    },
    {
        "label": "get_chunk_summarizer",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.ollama.video_summary.assistant",
        "description": "phidata.cookbook.llms.ollama.video_summary.assistant",
        "peekOfCode": "def get_chunk_summarizer(\n    model: str = \"llama3\",\n    debug_mode: bool = True,\n) -> Assistant:\n    return Assistant(\n        name=\"youtube_pre_processor_ollama\",\n        llm=Ollama(model=model),\n        description=\"You are a Senior NYT Reporter tasked with summarizing a youtube video.\",\n        instructions=[\n            \"You will be provided with a youtube video transcript.\",",
        "detail": "phidata.cookbook.llms.ollama.video_summary.assistant",
        "documentation": {}
    },
    {
        "label": "get_video_summarizer",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.ollama.video_summary.assistant",
        "description": "phidata.cookbook.llms.ollama.video_summary.assistant",
        "peekOfCode": "def get_video_summarizer(\n    model: str = \"llama3\",\n    debug_mode: bool = True,\n) -> Assistant:\n    return Assistant(\n        name=\"video_summarizer_ollama\",\n        llm=Ollama(model=model),\n        description=\"You are a Senior NYT Reporter tasked with writing a summary of a youtube video.\",\n        instructions=[\n            \"You will be provided with:\"",
        "detail": "phidata.cookbook.llms.ollama.video_summary.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.assistant",
        "description": "phidata.cookbook.llms.ollama.assistant",
        "peekOfCode": "assistant = Assistant(\n    llm=Ollama(model=\"llama3\"),\n    description=\"You help people with their health and fitness goals.\",\n    debug_mode=True,\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True)\nprint(\"\\n-*- Metrics:\")\npprint(assistant.llm.metrics)  # type: ignore",
        "detail": "phidata.cookbook.llms.ollama.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.assistant_stream_off",
        "description": "phidata.cookbook.llms.ollama.assistant_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=Ollama(model=\"llama3\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", stream=False, markdown=True)",
        "detail": "phidata.cookbook.llms.ollama.assistant_stream_off",
        "documentation": {}
    },
    {
        "label": "embedder",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.embeddings",
        "description": "phidata.cookbook.llms.ollama.embeddings",
        "peekOfCode": "embedder = OllamaEmbedder(model=\"llama3\")\nembeddings = embedder.get_embedding(\"Embed me\")\nprint(f\"Embeddings: {embeddings}\")\nprint(f\"Dimensions: {len(embeddings)}\")",
        "detail": "phidata.cookbook.llms.ollama.embeddings",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.embeddings",
        "description": "phidata.cookbook.llms.ollama.embeddings",
        "peekOfCode": "embeddings = embedder.get_embedding(\"Embed me\")\nprint(f\"Embeddings: {embeddings}\")\nprint(f\"Dimensions: {len(embeddings)}\")",
        "detail": "phidata.cookbook.llms.ollama.embeddings",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.finance",
        "description": "phidata.cookbook.llms.ollama.finance",
        "peekOfCode": "assistant = Assistant(\n    llm=OllamaTools(model=\"llama3\"),\n    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, stock_fundamentals=True)],\n    show_tool_calls=True,\n)\nassistant.cli_app(markdown=True)",
        "detail": "phidata.cookbook.llms.ollama.finance",
        "documentation": {}
    },
    {
        "label": "hermes",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.hermes",
        "description": "phidata.cookbook.llms.ollama.hermes",
        "peekOfCode": "hermes = Assistant(\n    llm=Ollama(model=\"openhermes\"),\n    tools=[DuckDuckGo()],\n    show_tool_calls=True,\n)\nhermes.print_response(\"Whats happening in France? Summarize top stories with sources.\", markdown=True)",
        "detail": "phidata.cookbook.llms.ollama.hermes",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.image",
        "description": "phidata.cookbook.llms.ollama.image",
        "peekOfCode": "assistant = Assistant(llm=Ollama(model=\"llava\"))\nimage_path = Path(__file__).parent / \"test_image.jpeg\"\nassistant.print_response(\n    \"Whats in the image?\",\n    images=[image_path.read_bytes()],\n    markdown=True,\n)",
        "detail": "phidata.cookbook.llms.ollama.image",
        "documentation": {}
    },
    {
        "label": "image_path",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.image",
        "description": "phidata.cookbook.llms.ollama.image",
        "peekOfCode": "image_path = Path(__file__).parent / \"test_image.jpeg\"\nassistant.print_response(\n    \"Whats in the image?\",\n    images=[image_path.read_bytes()],\n    markdown=True,\n)",
        "detail": "phidata.cookbook.llms.ollama.image",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.openai_api",
        "description": "phidata.cookbook.llms.ollama.openai_api",
        "peekOfCode": "assistant = Assistant(\n    llm=OllamaOpenAI(model=\"tinyllama\"),\n    system_prompt=\"Who are you and who created you? Respond in 1 sentence.\",\n)\nassistant.print_response(markdown=True)",
        "detail": "phidata.cookbook.llms.ollama.openai_api",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.ollama.pydantic_output",
        "description": "phidata.cookbook.llms.ollama.pydantic_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.llms.ollama.pydantic_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.pydantic_output",
        "description": "phidata.cookbook.llms.ollama.pydantic_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=Ollama(model=\"llama3\"),\n    description=\"You help people write movie ideas.\",\n    output_model=MovieScript,\n    # debug_mode=True,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.ollama.pydantic_output",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.tool_call",
        "description": "phidata.cookbook.llms.ollama.tool_call",
        "peekOfCode": "assistant = Assistant(\n    llm=OllamaTools(model=\"llama3\"),\n    tools=[DuckDuckGo()],\n    show_tool_calls=True,\n)\nassistant.print_response(\"Whats happening in the US?\", markdown=True)",
        "detail": "phidata.cookbook.llms.ollama.tool_call",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.who_are_you",
        "description": "phidata.cookbook.llms.ollama.who_are_you",
        "peekOfCode": "prompt = \"Who are you and who created you? Answer in 1 short sentence.\"\ntemp = 0.3\nmodels = [\"llama3\", \"phi3\", \"llava\", \"llama2\", \"mixtral\", \"openhermes\", \"tinyllama\"]\nfor model in models:\n    print(f\"================ {model} ================\")\n    Assistant(llm=Ollama(model=model, options={\"temperature\": temp}), system_prompt=prompt).print_response(\n        markdown=True\n    )",
        "detail": "phidata.cookbook.llms.ollama.who_are_you",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.who_are_you",
        "description": "phidata.cookbook.llms.ollama.who_are_you",
        "peekOfCode": "temp = 0.3\nmodels = [\"llama3\", \"phi3\", \"llava\", \"llama2\", \"mixtral\", \"openhermes\", \"tinyllama\"]\nfor model in models:\n    print(f\"================ {model} ================\")\n    Assistant(llm=Ollama(model=model, options={\"temperature\": temp}), system_prompt=prompt).print_response(\n        markdown=True\n    )",
        "detail": "phidata.cookbook.llms.ollama.who_are_you",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.ollama.who_are_you",
        "description": "phidata.cookbook.llms.ollama.who_are_you",
        "peekOfCode": "models = [\"llama3\", \"phi3\", \"llava\", \"llama2\", \"mixtral\", \"openhermes\", \"tinyllama\"]\nfor model in models:\n    print(f\"================ {model} ================\")\n    Assistant(llm=Ollama(model=model, options={\"temperature\": temp}), system_prompt=prompt).print_response(\n        markdown=True\n    )",
        "detail": "phidata.cookbook.llms.ollama.who_are_you",
        "documentation": {}
    },
    {
        "label": "restart_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.openai.auto_rag.app",
        "description": "phidata.cookbook.llms.openai.auto_rag.app",
        "peekOfCode": "def restart_assistant():\n    logger.debug(\"---*--- Restarting Assistant ---*---\")\n    st.session_state[\"auto_rag_assistant\"] = None\n    st.session_state[\"auto_rag_assistant_run_id\"] = None\n    if \"url_scrape_key\" in st.session_state:\n        st.session_state[\"url_scrape_key\"] += 1\n    if \"file_uploader_key\" in st.session_state:\n        st.session_state[\"file_uploader_key\"] += 1\n    st.rerun()\ndef main() -> None:",
        "detail": "phidata.cookbook.llms.openai.auto_rag.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.openai.auto_rag.app",
        "description": "phidata.cookbook.llms.openai.auto_rag.app",
        "peekOfCode": "def main() -> None:\n    # Get LLM model\n    llm_model = st.sidebar.selectbox(\"Select LLM\", options=[\"gpt-4-turbo\", \"gpt-3.5-turbo\"])\n    # Set assistant_type in session state\n    if \"llm_model\" not in st.session_state:\n        st.session_state[\"llm_model\"] = llm_model\n    # Restart the assistant if assistant_type has changed\n    elif st.session_state[\"llm_model\"] != llm_model:\n        st.session_state[\"llm_model\"] = llm_model\n        restart_assistant()",
        "detail": "phidata.cookbook.llms.openai.auto_rag.app",
        "documentation": {}
    },
    {
        "label": "get_auto_rag_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.openai.auto_rag.assistant",
        "description": "phidata.cookbook.llms.openai.auto_rag.assistant",
        "peekOfCode": "def get_auto_rag_assistant(\n    llm_model: str = \"gpt-4-turbo\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get an Auto RAG Assistant.\"\"\"\n    return Assistant(\n        name=\"auto_rag_assistant\",\n        run_id=run_id,",
        "detail": "phidata.cookbook.llms.openai.auto_rag.assistant",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openai.auto_rag.assistant",
        "description": "phidata.cookbook.llms.openai.auto_rag.assistant",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\ndef get_auto_rag_assistant(\n    llm_model: str = \"gpt-4-turbo\",\n    user_id: Optional[str] = None,\n    run_id: Optional[str] = None,\n    debug_mode: bool = True,\n) -> Assistant:\n    \"\"\"Get an Auto RAG Assistant.\"\"\"\n    return Assistant(\n        name=\"auto_rag_assistant\",",
        "detail": "phidata.cookbook.llms.openai.auto_rag.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openai.assistant",
        "description": "phidata.cookbook.llms.openai.assistant",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-4-turbo\", max_tokens=500, temperature=0.3), tools=[DuckDuckGo()], show_tool_calls=True\n)\nassistant.print_response(\"Whats happening in France?\", markdown=True)",
        "detail": "phidata.cookbook.llms.openai.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openai.custom_messages",
        "description": "phidata.cookbook.llms.openai.custom_messages",
        "peekOfCode": "assistant = Assistant(llm=OpenAIChat(model=\"gpt-4-turbo\"), debug_mode=True, format_messages=False)\nassistant.print_response(\n    [\n        {\"role\": \"system\", \"content\": \"Reply with haikus.\"},\n        {\"role\": \"user\", \"content\": \"What is the capital of France?\"},\n    ],\n)",
        "detail": "phidata.cookbook.llms.openai.custom_messages",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openai.embeddings",
        "description": "phidata.cookbook.llms.openai.embeddings",
        "peekOfCode": "embeddings = OpenAIEmbedder().get_embedding(\"Embed me\")\nprint(f\"Embeddings: {embeddings[:5]}\")\nprint(f\"Dimensions: {len(embeddings)}\")",
        "detail": "phidata.cookbook.llms.openai.embeddings",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openai.finance",
        "description": "phidata.cookbook.llms.openai.finance",
        "peekOfCode": "assistant = Assistant(\n    name=\"Finance Assistant\",\n    llm=OpenAIChat(model=\"gpt-4-turbo\", max_tokens=500, temperature=0.3),\n    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, stock_fundamentals=True)],\n    show_tool_calls=True,\n    description=\"You are an investment analyst that researches stock prices, analyst recommendations, and stock fundamentals.\",\n    instructions=[\"Format your response using markdown and use tables to display data where possible.\"],\n    # debug_mode=True,\n)\nassistant.print_response(\"Share the NVDA stock price and analyst recommendations\", markdown=True)",
        "detail": "phidata.cookbook.llms.openai.finance",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.openai.pydantic_output",
        "description": "phidata.cookbook.llms.openai.pydantic_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.llms.openai.pydantic_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openai.pydantic_output",
        "description": "phidata.cookbook.llms.openai.pydantic_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-4-turbo-preview\"),\n    description=\"You help people write movie ideas.\",\n    output_model=MovieScript,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.openai.pydantic_output",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.openai.pydantic_output_list",
        "description": "phidata.cookbook.llms.openai.pydantic_output_list",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    genre: str = Field(..., description=\"Genre of the movie. If not available, select action comedy.\")\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"2 sentence storyline for the movie. Make it punchy!\")\n# Generate a list of pydantic models\nclass MovieScripts(BaseModel):\n    movie_scripts: List[MovieScript] = Field(\n        ..., description=\"List of movie scripts for the given theme. Provide 3 different scripts.\"",
        "detail": "phidata.cookbook.llms.openai.pydantic_output_list",
        "documentation": {}
    },
    {
        "label": "MovieScripts",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.openai.pydantic_output_list",
        "description": "phidata.cookbook.llms.openai.pydantic_output_list",
        "peekOfCode": "class MovieScripts(BaseModel):\n    movie_scripts: List[MovieScript] = Field(\n        ..., description=\"List of movie scripts for the given theme. Provide 3 different scripts.\"\n    )\n# Define the Assistant\nmovie_assistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-4-turbo\"),\n    description=\"You help people write movie ideas. For every theme, provide 3 different scripts\",\n    output_model=MovieScripts,\n)",
        "detail": "phidata.cookbook.llms.openai.pydantic_output_list",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openai.pydantic_output_list",
        "description": "phidata.cookbook.llms.openai.pydantic_output_list",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-4-turbo\"),\n    description=\"You help people write movie ideas. For every theme, provide 3 different scripts\",\n    output_model=MovieScripts,\n)\n# Run the assistant\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.openai.pydantic_output_list",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openai.tool_call",
        "description": "phidata.cookbook.llms.openai.tool_call",
        "peekOfCode": "assistant = Assistant(llm=OpenAIChat(model=\"gpt-4-turbo\"), tools=[DuckDuckGo()], show_tool_calls=True)\nassistant.print_response(\"Whats happening in France?\", markdown=True)",
        "detail": "phidata.cookbook.llms.openai.tool_call",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openhermes.assistant",
        "description": "phidata.cookbook.llms.openhermes.assistant",
        "peekOfCode": "assistant = Assistant(\n    llm=Ollama(model=\"openhermes\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.openhermes.assistant",
        "documentation": {}
    },
    {
        "label": "duckdb_tools",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openhermes.data_analyst",
        "description": "phidata.cookbook.llms.openhermes.data_analyst",
        "peekOfCode": "duckdb_tools = DuckDbTools(create_tables=False, export_tables=False, summarize_tables=False)\nduckdb_tools.create_table_from_path(\n    path=\"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\", table=\"movies\"\n)\nassistant = Assistant(\n    llm=Ollama(model=\"openhermes\"),\n    tools=[duckdb_tools],\n    show_tool_calls=True,\n    add_to_system_prompt=\"\"\"\n    Here are the tables you have access to:",
        "detail": "phidata.cookbook.llms.openhermes.data_analyst",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openhermes.data_analyst",
        "description": "phidata.cookbook.llms.openhermes.data_analyst",
        "peekOfCode": "assistant = Assistant(\n    llm=Ollama(model=\"openhermes\"),\n    tools=[duckdb_tools],\n    show_tool_calls=True,\n    add_to_system_prompt=\"\"\"\n    Here are the tables you have access to:\n    - movies: Contains information about movies from IMDB.\n    \"\"\",\n    debug_mode=True,\n)",
        "detail": "phidata.cookbook.llms.openhermes.data_analyst",
        "documentation": {}
    },
    {
        "label": "embedder",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openhermes.embeddings",
        "description": "phidata.cookbook.llms.openhermes.embeddings",
        "peekOfCode": "embedder = OllamaEmbedder(model=\"openhermes\", dimensions=4096)\nembeddings = embedder.get_embedding(\"Embed me\")\nprint(f\"Embeddings: {embeddings[:10]}\")\nprint(f\"Dimensions: {len(embeddings)}\")",
        "detail": "phidata.cookbook.llms.openhermes.embeddings",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openhermes.embeddings",
        "description": "phidata.cookbook.llms.openhermes.embeddings",
        "peekOfCode": "embeddings = embedder.get_embedding(\"Embed me\")\nprint(f\"Embeddings: {embeddings[:10]}\")\nprint(f\"Dimensions: {len(embeddings)}\")",
        "detail": "phidata.cookbook.llms.openhermes.embeddings",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.openhermes.pydantic_output",
        "description": "phidata.cookbook.llms.openhermes.pydantic_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.llms.openhermes.pydantic_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openhermes.pydantic_output",
        "description": "phidata.cookbook.llms.openhermes.pydantic_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=Ollama(model=\"openhermes\"),\n    description=\"You help people write movie ideas.\",\n    output_model=MovieScript,\n    # debug_mode=True,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.openhermes.pydantic_output",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openhermes.tool_call",
        "description": "phidata.cookbook.llms.openhermes.tool_call",
        "peekOfCode": "assistant = Assistant(\n    llm=Ollama(model=\"openhermes\"),\n    tools=[DuckDuckGo()],\n    show_tool_calls=True,\n    # debug_mode=True\n)\nassistant.print_response(\"Tell me about OpenAI Sora\", markdown=True)",
        "detail": "phidata.cookbook.llms.openhermes.tool_call",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openrouter.assistant",
        "description": "phidata.cookbook.llms.openrouter.assistant",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenRouter(model=\"mistralai/mistral-7b-instruct:free\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a 2 sentence quick and healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.openrouter.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openrouter.assistant_stream_off",
        "description": "phidata.cookbook.llms.openrouter.assistant_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenRouter(model=\"mistralai/mistral-7b-instruct:free\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a 2 sentence quick and healthy breakfast recipe.\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.openrouter.assistant_stream_off",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.openrouter.pydantic_output",
        "description": "phidata.cookbook.llms.openrouter.pydantic_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.llms.openrouter.pydantic_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openrouter.pydantic_output",
        "description": "phidata.cookbook.llms.openrouter.pydantic_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=OpenRouter(),\n    description=\"You help people write movie ideas.\",\n    output_model=MovieScript,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.openrouter.pydantic_output",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.openrouter.tool_call",
        "description": "phidata.cookbook.llms.openrouter.tool_call",
        "peekOfCode": "assistant = Assistant(\n    llm=OpenRouter(model=\"openai/gpt-3.5-turbo\"), tools=[DuckDuckGo()], show_tool_calls=True, debug_mode=True\n)\nassistant.print_response(\"Whats happening in France?\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.openrouter.tool_call",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.together.assistant",
        "description": "phidata.cookbook.llms.together.assistant",
        "peekOfCode": "assistant = Assistant(\n    llm=Together(model=\"mistralai/Mixtral-8x7B-Instruct-v0.1\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True)",
        "detail": "phidata.cookbook.llms.together.assistant",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.together.assistant_stream_off",
        "description": "phidata.cookbook.llms.together.assistant_stream_off",
        "peekOfCode": "assistant = Assistant(\n    llm=Together(model=\"mistralai/Mixtral-8x7B-Instruct-v0.1\"),\n    description=\"You help people with their health and fitness goals.\",\n)\nassistant.print_response(\"Share a quick healthy breakfast recipe.\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.together.assistant_stream_off",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.together.cli",
        "description": "phidata.cookbook.llms.together.cli",
        "peekOfCode": "assistant = Assistant(llm=Together(), description=\"You help people with their health and fitness goals.\")\nassistant.cli_app(markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.together.cli",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.together.embeddings",
        "description": "phidata.cookbook.llms.together.embeddings",
        "peekOfCode": "embeddings = TogetherEmbedder().get_embedding(\"Embed me\")\nprint(f\"Embeddings: {embeddings}\")\nprint(f\"Dimensions: {len(embeddings)}\")",
        "detail": "phidata.cookbook.llms.together.embeddings",
        "documentation": {}
    },
    {
        "label": "MovieScript",
        "kind": 6,
        "importPath": "phidata.cookbook.llms.together.pydantic_output",
        "description": "phidata.cookbook.llms.together.pydantic_output",
        "peekOfCode": "class MovieScript(BaseModel):\n    setting: str = Field(..., description=\"Provide a nice setting for a blockbuster movie.\")\n    ending: str = Field(..., description=\"Ending of the movie. If not available, provide a happy ending.\")\n    genre: str = Field(\n        ..., description=\"Genre of the movie. If not available, select action, thriller or romantic comedy.\"\n    )\n    name: str = Field(..., description=\"Give a name to this movie\")\n    characters: List[str] = Field(..., description=\"Name of characters for this movie.\")\n    storyline: str = Field(..., description=\"3 sentence storyline for the movie. Make it exciting!\")\nmovie_assistant = Assistant(",
        "detail": "phidata.cookbook.llms.together.pydantic_output",
        "documentation": {}
    },
    {
        "label": "movie_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.together.pydantic_output",
        "description": "phidata.cookbook.llms.together.pydantic_output",
        "peekOfCode": "movie_assistant = Assistant(\n    llm=Together(),\n    description=\"You help people write movie ideas.\",\n    output_model=MovieScript,\n)\npprint(movie_assistant.run(\"New York\"))",
        "detail": "phidata.cookbook.llms.together.pydantic_output",
        "documentation": {}
    },
    {
        "label": "get_top_hackernews_stories",
        "kind": 2,
        "importPath": "phidata.cookbook.llms.together.tool_call",
        "description": "phidata.cookbook.llms.together.tool_call",
        "peekOfCode": "def get_top_hackernews_stories(num_stories: int = 10) -> str:\n    \"\"\"Use this function to get top stories from Hacker News.\n    Args:\n        num_stories (int): Number of stories to return. Defaults to 10.\n    Returns:\n        str: JSON string of top stories.\n    \"\"\"\n    # Fetch top story IDs\n    response = httpx.get(\"https://hacker-news.firebaseio.com/v0/topstories.json\")\n    story_ids = response.json()",
        "detail": "phidata.cookbook.llms.together.tool_call",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.together.tool_call",
        "description": "phidata.cookbook.llms.together.tool_call",
        "peekOfCode": "assistant = Assistant(\n    llm=Together(),\n    tools=[get_top_hackernews_stories],\n    show_tool_calls=True,\n    # debug_mode=True,\n)\nassistant.print_response(\"Summarize the top stories on hackernews?\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.together.tool_call",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.llms.together.web_search",
        "description": "phidata.cookbook.llms.together.web_search",
        "peekOfCode": "assistant = Assistant(llm=Together(), tools=[DuckDuckGo()], show_tool_calls=True)\nassistant.print_response(\"Whats happening in France? Summarize top stories with sources.\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.llms.together.web_search",
        "documentation": {}
    },
    {
        "label": "searcher",
        "kind": 5,
        "importPath": "phidata.cookbook.teams.journalist.team",
        "description": "phidata.cookbook.teams.journalist.team",
        "peekOfCode": "searcher = Assistant(\n    name=\"Searcher\",\n    role=\"Searches for top URLs based on a topic\",\n    description=dedent(\n        \"\"\"\\\n    You are a world-class journalist for the New York Times. Given a topic, generate a list of 3 search terms\n    for writing an article on that topic. Then search the web for each term, analyse the results\n    and return the 10 most relevant URLs.\n    \"\"\"\n    ),",
        "detail": "phidata.cookbook.teams.journalist.team",
        "documentation": {}
    },
    {
        "label": "writer",
        "kind": 5,
        "importPath": "phidata.cookbook.teams.journalist.team",
        "description": "phidata.cookbook.teams.journalist.team",
        "peekOfCode": "writer = Assistant(\n    name=\"Writer\",\n    role=\"Retrieves text from URLs and writes a high-quality article\",\n    description=dedent(\n        \"\"\"\\\n    You are a senior writer for the New York Times. Given a topic and a list of URLs,\n    your goal is to write a high-quality NYT-worthy article on the topic.\n    \"\"\"\n    ),\n    instructions=[",
        "detail": "phidata.cookbook.teams.journalist.team",
        "documentation": {}
    },
    {
        "label": "editor",
        "kind": 5,
        "importPath": "phidata.cookbook.teams.journalist.team",
        "description": "phidata.cookbook.teams.journalist.team",
        "peekOfCode": "editor = Assistant(\n    name=\"Editor\",\n    team=[searcher, writer],\n    description=\"You are a senior NYT editor. Given a topic, your goal is to write a NYT worthy article.\",\n    instructions=[\n        \"Given a topic, ask the search journalist to search for the most relevant URLs for that topic.\",\n        \"Then pass a description of the topic and URLs to the writer to get a draft of the article.\",\n        \"Edit, proofread, and refine the article to ensure it meets the high standards of the New York Times.\",\n        \"The article should be extremely articulate and well written. \"\n        \"Focus on clarity, coherence, and overall quality.\",",
        "detail": "phidata.cookbook.teams.journalist.team",
        "documentation": {}
    },
    {
        "label": "story_researcher",
        "kind": 5,
        "importPath": "phidata.cookbook.teams.hackernews",
        "description": "phidata.cookbook.teams.hackernews",
        "peekOfCode": "story_researcher = Assistant(\n    name=\"HackerNews Story Researcher\",\n    role=\"Researches hackernews stories and users.\",\n    tools=[HackerNews()],\n)\nuser_researcher = Assistant(\n    name=\"HackerNews User Researcher\",\n    role=\"Reads articles from URLs.\",\n    tools=[HackerNews()],\n)",
        "detail": "phidata.cookbook.teams.hackernews",
        "documentation": {}
    },
    {
        "label": "user_researcher",
        "kind": 5,
        "importPath": "phidata.cookbook.teams.hackernews",
        "description": "phidata.cookbook.teams.hackernews",
        "peekOfCode": "user_researcher = Assistant(\n    name=\"HackerNews User Researcher\",\n    role=\"Reads articles from URLs.\",\n    tools=[HackerNews()],\n)\nhn_assistant = Assistant(\n    name=\"Hackernews Team\",\n    team=[story_researcher, user_researcher],\n    # debug_mode=True,\n)",
        "detail": "phidata.cookbook.teams.hackernews",
        "documentation": {}
    },
    {
        "label": "hn_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.teams.hackernews",
        "description": "phidata.cookbook.teams.hackernews",
        "peekOfCode": "hn_assistant = Assistant(\n    name=\"Hackernews Team\",\n    team=[story_researcher, user_researcher],\n    # debug_mode=True,\n)\nhn_assistant.print_response(\"Write a report about the users with the top 2 stories on hackernews\", markdown=True)",
        "detail": "phidata.cookbook.teams.hackernews",
        "documentation": {}
    },
    {
        "label": "reports_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.teams.investment",
        "description": "phidata.cookbook.teams.investment",
        "peekOfCode": "reports_dir = Path(__file__).parent.parent.parent.joinpath(\"junk\", \"reports\")\nif reports_dir.exists():\n    rmtree(path=reports_dir, ignore_errors=True)\nreports_dir.mkdir(parents=True, exist_ok=True)\nstock_analyst = Assistant(\n    name=\"Stock Analyst\",\n    role=\"Get current stock price, analyst recommendations and news for a company.\",\n    tools=[\n        YFinanceTools(stock_price=True, analyst_recommendations=True, company_news=True),\n        Newspaper4k(),",
        "detail": "phidata.cookbook.teams.investment",
        "documentation": {}
    },
    {
        "label": "stock_analyst",
        "kind": 5,
        "importPath": "phidata.cookbook.teams.investment",
        "description": "phidata.cookbook.teams.investment",
        "peekOfCode": "stock_analyst = Assistant(\n    name=\"Stock Analyst\",\n    role=\"Get current stock price, analyst recommendations and news for a company.\",\n    tools=[\n        YFinanceTools(stock_price=True, analyst_recommendations=True, company_news=True),\n        Newspaper4k(),\n        FileTools(base_dir=reports_dir),\n    ],\n    description=\"You are an stock analyst tasked with producing factual reports on companies.\",\n    instructions=[",
        "detail": "phidata.cookbook.teams.investment",
        "documentation": {}
    },
    {
        "label": "research_analyst",
        "kind": 5,
        "importPath": "phidata.cookbook.teams.investment",
        "description": "phidata.cookbook.teams.investment",
        "peekOfCode": "research_analyst = Assistant(\n    name=\"Research Analyst\",\n    role=\"Writes research reports on stocks.\",\n    tools=[FileTools(base_dir=reports_dir)],\n    description=\"You are an investment researcher analyst tasked with producing a ranked list of companies based on their investment potential.\",\n    instructions=[\n        \"You will write your research report based on the information available in files produced by the stock analyst.\",\n        \"The investment lead will provide you with the files saved by the stock analyst.\"\n        \"If no files are provided, list all files in the entire folder and read the files with names matching company names.\",\n        \"Read each file 1 by 1.\",",
        "detail": "phidata.cookbook.teams.investment",
        "documentation": {}
    },
    {
        "label": "investment_lead",
        "kind": 5,
        "importPath": "phidata.cookbook.teams.investment",
        "description": "phidata.cookbook.teams.investment",
        "peekOfCode": "investment_lead = Assistant(\n    name=\"Investment Lead\",\n    team=[stock_analyst, research_analyst],\n    tools=[FileTools(base_dir=reports_dir)],\n    description=\"You are an investment lead tasked with producing a research report on companies for investment purposes.\",\n    instructions=[\n        \"Given a list of companies, first ask the stock analyst to get the current stock price, analyst recommendations and news for these companies.\",\n        \"Ask the stock analyst to write its results to files in markdown format with the name `company_name.md`.\",\n        \"If the stock analyst has not saved the file or saved it with an incorrect name, ask them to save the file again before proceeding.\"\n        \"Then ask the research_analyst to write a report on these companies based on the information provided by the stock analyst.\",",
        "detail": "phidata.cookbook.teams.investment",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.apify_tools",
        "description": "phidata.cookbook.tools.apify_tools",
        "peekOfCode": "assistant = Assistant(tools=[ApifyTools()], show_tool_calls=True)\nassistant.print_response(\"Tell me about https://docs.phidata.com/introduction\", markdown=True)",
        "detail": "phidata.cookbook.tools.apify_tools",
        "documentation": {}
    },
    {
        "label": "clear_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.tools.app",
        "description": "phidata.cookbook.tools.app",
        "peekOfCode": "def clear_assistant():\n    st.session_state[\"assistant\"] = None\ndef create_assistant(\n    web_search: bool = False, exa_search: bool = False, yfinance: bool = False, debug_mode: bool = False\n) -> Assistant:\n    logger.info(\"---*--- Creating Assistant ---*---\")\n    introduction = \"Hi, I'm an AI Assistant that uses function calling to answer questions.\\n\"\n    introduction += \"Select the tools from the sidebar and ask me questions.\"\n    description = dedent(\n        \"\"\"\\",
        "detail": "phidata.cookbook.tools.app",
        "documentation": {}
    },
    {
        "label": "create_assistant",
        "kind": 2,
        "importPath": "phidata.cookbook.tools.app",
        "description": "phidata.cookbook.tools.app",
        "peekOfCode": "def create_assistant(\n    web_search: bool = False, exa_search: bool = False, yfinance: bool = False, debug_mode: bool = False\n) -> Assistant:\n    logger.info(\"---*--- Creating Assistant ---*---\")\n    introduction = \"Hi, I'm an AI Assistant that uses function calling to answer questions.\\n\"\n    introduction += \"Select the tools from the sidebar and ask me questions.\"\n    description = dedent(\n        \"\"\"\\\n    You are a function calling AI model with access to various tools. Use your tools to assist the user in the best way possible.\n    \"\"\"",
        "detail": "phidata.cookbook.tools.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "phidata.cookbook.tools.app",
        "description": "phidata.cookbook.tools.app",
        "peekOfCode": "def main() -> None:\n    logger.info(\"---*--- Running App ---*---\")\n    # Sidebar checkboxes for selecting tools\n    st.sidebar.markdown(\"### Select Tools\")\n    st.session_state[\"selected_tools\"] = []\n    web_search = st.sidebar.checkbox(\"Web Search\", value=True, on_change=clear_assistant)\n    exa_search = st.sidebar.checkbox(\"Exa Search\", value=False, on_change=clear_assistant)\n    yfinance = st.sidebar.checkbox(\"YFinance\", value=False, on_change=clear_assistant)\n    if not web_search and not exa_search and not yfinance:\n        st.sidebar.warning(\"Please select at least one tool\")",
        "detail": "phidata.cookbook.tools.app",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.arxiv_tools",
        "description": "phidata.cookbook.tools.arxiv_tools",
        "peekOfCode": "assistant = Assistant(tools=[ArxivToolkit()], show_tool_calls=True)\nassistant.print_response(\"Search arxiv for 'language models'\", markdown=True)",
        "detail": "phidata.cookbook.tools.arxiv_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.calculator_tools",
        "description": "phidata.cookbook.tools.calculator_tools",
        "peekOfCode": "assistant = Assistant(\n    tools=[Calculator()],\n    show_tool_calls=True,\n    markdown=True,\n)\nassistant.print_response(\"What is the square root of 16?\")\nassistant.print_response(\"What is 5!?\")\nassistant.print_response(\"Is 17 a prime number?\")",
        "detail": "phidata.cookbook.tools.calculator_tools",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.csv_tools",
        "description": "phidata.cookbook.tools.csv_tools",
        "peekOfCode": "url = \"https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\"\nresponse = httpx.get(url)\n# Create a file in the wip dir which is ignored by git\nimdb_csv = Path(__file__).parent.joinpath(\"wip\").joinpath(\"imdb.csv\")\nimdb_csv.parent.mkdir(parents=True, exist_ok=True)\nimdb_csv.write_bytes(response.content)\nassistant = Assistant(\n    tools=[CsvTools(csvs=[imdb_csv])],\n    markdown=True,\n    show_tool_calls=True,",
        "detail": "phidata.cookbook.tools.csv_tools",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.csv_tools",
        "description": "phidata.cookbook.tools.csv_tools",
        "peekOfCode": "response = httpx.get(url)\n# Create a file in the wip dir which is ignored by git\nimdb_csv = Path(__file__).parent.joinpath(\"wip\").joinpath(\"imdb.csv\")\nimdb_csv.parent.mkdir(parents=True, exist_ok=True)\nimdb_csv.write_bytes(response.content)\nassistant = Assistant(\n    tools=[CsvTools(csvs=[imdb_csv])],\n    markdown=True,\n    show_tool_calls=True,\n    instructions=[",
        "detail": "phidata.cookbook.tools.csv_tools",
        "documentation": {}
    },
    {
        "label": "imdb_csv",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.csv_tools",
        "description": "phidata.cookbook.tools.csv_tools",
        "peekOfCode": "imdb_csv = Path(__file__).parent.joinpath(\"wip\").joinpath(\"imdb.csv\")\nimdb_csv.parent.mkdir(parents=True, exist_ok=True)\nimdb_csv.write_bytes(response.content)\nassistant = Assistant(\n    tools=[CsvTools(csvs=[imdb_csv])],\n    markdown=True,\n    show_tool_calls=True,\n    instructions=[\n        \"First always get the list of files\",\n        \"Then check the columns in the file\",",
        "detail": "phidata.cookbook.tools.csv_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.csv_tools",
        "description": "phidata.cookbook.tools.csv_tools",
        "peekOfCode": "assistant = Assistant(\n    tools=[CsvTools(csvs=[imdb_csv])],\n    markdown=True,\n    show_tool_calls=True,\n    instructions=[\n        \"First always get the list of files\",\n        \"Then check the columns in the file\",\n        \"Then run the query to answer the question\",\n    ],\n    # debug_mode=True,",
        "detail": "phidata.cookbook.tools.csv_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.duckdb_tools",
        "description": "phidata.cookbook.tools.duckdb_tools",
        "peekOfCode": "assistant = Assistant(\n    tools=[DuckDbTools()],\n    show_tool_calls=True,\n    system_prompt=\"Use this file for Movies data: https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv\",\n)\nassistant.print_response(\"What is the average rating of movies?\", markdown=True, stream=False)",
        "detail": "phidata.cookbook.tools.duckdb_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.duckduckgo",
        "description": "phidata.cookbook.tools.duckduckgo",
        "peekOfCode": "assistant = Assistant(tools=[DuckDuckGo()], show_tool_calls=True)\nassistant.print_response(\"Whats happening in France?\", markdown=True)",
        "detail": "phidata.cookbook.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "news_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.duckduckgo_2",
        "description": "phidata.cookbook.tools.duckduckgo_2",
        "peekOfCode": "news_assistant = Assistant(\n    tools=[DuckDuckGo()],\n    description=\"You are a news assistant that helps users find the latest news.\",\n    instructions=[\n        \"Given a topic by the user, respond with 2 latest news items about that topic.\",\n        \"Search for 5 news items and select the top 2 unique items.\",\n    ],\n    show_tool_calls=True,\n)\nnews_assistant.print_response(\"US Stocks\", markdown=True)",
        "detail": "phidata.cookbook.tools.duckduckgo_2",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.duckduckgo_3",
        "description": "phidata.cookbook.tools.duckduckgo_3",
        "peekOfCode": "assistant = Assistant(tools=[DuckDuckGo()], show_tool_calls=True)\nassistant.print_response(\"Give me news from 3 different countries.\", markdown=True)",
        "detail": "phidata.cookbook.tools.duckduckgo_3",
        "documentation": {}
    },
    {
        "label": "receiver_email",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.email_tools",
        "description": "phidata.cookbook.tools.email_tools",
        "peekOfCode": "receiver_email = \"<receiver_email>\"\nsender_email = \"<sender_email>\"\nsender_name = \"<sender_name>\"\nsender_passkey = \"<sender_passkey>\"\nassistant = Assistant(\n    tools=[\n        EmailTools(\n            receiver_email=receiver_email,\n            sender_email=sender_email,\n            sender_name=sender_name,",
        "detail": "phidata.cookbook.tools.email_tools",
        "documentation": {}
    },
    {
        "label": "sender_email",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.email_tools",
        "description": "phidata.cookbook.tools.email_tools",
        "peekOfCode": "sender_email = \"<sender_email>\"\nsender_name = \"<sender_name>\"\nsender_passkey = \"<sender_passkey>\"\nassistant = Assistant(\n    tools=[\n        EmailTools(\n            receiver_email=receiver_email,\n            sender_email=sender_email,\n            sender_name=sender_name,\n            sender_passkey=sender_passkey,",
        "detail": "phidata.cookbook.tools.email_tools",
        "documentation": {}
    },
    {
        "label": "sender_name",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.email_tools",
        "description": "phidata.cookbook.tools.email_tools",
        "peekOfCode": "sender_name = \"<sender_name>\"\nsender_passkey = \"<sender_passkey>\"\nassistant = Assistant(\n    tools=[\n        EmailTools(\n            receiver_email=receiver_email,\n            sender_email=sender_email,\n            sender_name=sender_name,\n            sender_passkey=sender_passkey,\n        )",
        "detail": "phidata.cookbook.tools.email_tools",
        "documentation": {}
    },
    {
        "label": "sender_passkey",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.email_tools",
        "description": "phidata.cookbook.tools.email_tools",
        "peekOfCode": "sender_passkey = \"<sender_passkey>\"\nassistant = Assistant(\n    tools=[\n        EmailTools(\n            receiver_email=receiver_email,\n            sender_email=sender_email,\n            sender_name=sender_name,\n            sender_passkey=sender_passkey,\n        )\n    ]",
        "detail": "phidata.cookbook.tools.email_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.email_tools",
        "description": "phidata.cookbook.tools.email_tools",
        "peekOfCode": "assistant = Assistant(\n    tools=[\n        EmailTools(\n            receiver_email=receiver_email,\n            sender_email=sender_email,\n            sender_name=sender_name,\n            sender_passkey=sender_passkey,\n        )\n    ]\n)",
        "detail": "phidata.cookbook.tools.email_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.exa_tools",
        "description": "phidata.cookbook.tools.exa_tools",
        "peekOfCode": "assistant = Assistant(tools=[ExaTools()], show_tool_calls=True)\nassistant.print_response(\"Search arxiv for 'language models'\", markdown=True)",
        "detail": "phidata.cookbook.tools.exa_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.file_tools",
        "description": "phidata.cookbook.tools.file_tools",
        "peekOfCode": "assistant = Assistant(tools=[FileTools()], show_tool_calls=True)\nassistant.print_response(\"What is the most advanced LLM currently? Save the answer to a file.\", markdown=True)",
        "detail": "phidata.cookbook.tools.file_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.newspaper4k_tools",
        "description": "phidata.cookbook.tools.newspaper4k_tools",
        "peekOfCode": "assistant = Assistant(tools=[Newspaper4k()], debug_mode=True, show_tool_calls=True)\nassistant.print_response(\n    \"https://www.rockymountaineer.com/blog/experience-icefields-parkway-scenic-drive-lifetime\",\n    markdown=True,\n)",
        "detail": "phidata.cookbook.tools.newspaper4k_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.pubmed",
        "description": "phidata.cookbook.tools.pubmed",
        "peekOfCode": "assistant = Assistant(tools=[PubmedTools()], debug_mode=True, show_tool_calls=True)\nassistant.print_response(\n    \"ulcerative colitis.\",\n    markdown=True,\n)",
        "detail": "phidata.cookbook.tools.pubmed",
        "documentation": {}
    },
    {
        "label": "NewsItem",
        "kind": 6,
        "importPath": "phidata.cookbook.tools.pydantic_web_search",
        "description": "phidata.cookbook.tools.pydantic_web_search",
        "peekOfCode": "class NewsItem(BaseModel):\n    position: int = Field(..., description=\"Rank of this news item.\")\n    title: Optional[str] = Field(None, description=\"Title of the news item.\")\n    link: Optional[str] = Field(None, description=\"Link to the news item.\")\n    snippet: Optional[str] = Field(None, description=\"Snippet of the news item.\")\n    source: Optional[str] = Field(None, description=\"Source of the news item.\")\n    date: Optional[str] = Field(None, description=\"Date of the news item.\")\n    thumbnail: Optional[str] = Field(None, description=\"Thumbnail of the news item.\")\nclass NewsItems(BaseModel):\n    items: List[NewsItem] = Field(..., description=\"List of news items.\")",
        "detail": "phidata.cookbook.tools.pydantic_web_search",
        "documentation": {}
    },
    {
        "label": "NewsItems",
        "kind": 6,
        "importPath": "phidata.cookbook.tools.pydantic_web_search",
        "description": "phidata.cookbook.tools.pydantic_web_search",
        "peekOfCode": "class NewsItems(BaseModel):\n    items: List[NewsItem] = Field(..., description=\"List of news items.\")\nnews_assistant = Assistant(\n    tools=[DuckDuckGo(timeout=120)],\n    # show_tool_calls=True,\n    output_model=NewsItems,\n    description=\"You are a news assistant that helps users find the latest news.\",\n    instructions=[\n        \"Given a topic by the user, respond with 2 latest news items about that topic.\",\n        \"Make sure you provide only unique news items.\",",
        "detail": "phidata.cookbook.tools.pydantic_web_search",
        "documentation": {}
    },
    {
        "label": "news_assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.pydantic_web_search",
        "description": "phidata.cookbook.tools.pydantic_web_search",
        "peekOfCode": "news_assistant = Assistant(\n    tools=[DuckDuckGo(timeout=120)],\n    # show_tool_calls=True,\n    output_model=NewsItems,\n    description=\"You are a news assistant that helps users find the latest news.\",\n    instructions=[\n        \"Given a topic by the user, respond with 2 latest news items about that topic.\",\n        \"Make sure you provide only unique news items.\",\n        \"Use the `duckduckgo_news` tool to get the latest news about a topic. \"\n        + \"Search for 5 news items and select the top 10 unique items.\",",
        "detail": "phidata.cookbook.tools.pydantic_web_search",
        "documentation": {}
    },
    {
        "label": "latest_news",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.pydantic_web_search",
        "description": "phidata.cookbook.tools.pydantic_web_search",
        "peekOfCode": "latest_news = news_assistant.run(\"US Stocks\")\npprint(latest_news)",
        "detail": "phidata.cookbook.tools.pydantic_web_search",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.python_tools",
        "description": "phidata.cookbook.tools.python_tools",
        "peekOfCode": "assistant = Assistant(tools=[PythonTools()], show_tool_calls=True)\nassistant.print_response(\n    \"Write a python script for fibonacci series and display the result till the 10th number\", markdown=True\n)",
        "detail": "phidata.cookbook.tools.python_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.resend_tools",
        "description": "phidata.cookbook.tools.resend_tools",
        "peekOfCode": "assistant = Assistant(tools=[ResendTools(from_email=\"<enter_from_email>\")], debug_mode=True)\nassistant.print_response(\"send email to <enter_to_email> greeting them with hello world\")",
        "detail": "phidata.cookbook.tools.resend_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.serpapi_tools",
        "description": "phidata.cookbook.tools.serpapi_tools",
        "peekOfCode": "assistant = Assistant(\n    tools=[SerpApiTools()],\n    show_tool_calls=True,\n    debug_mode=True,\n)\nassistant.print_response(\"Whats happening in the USA?\", markdown=True)",
        "detail": "phidata.cookbook.tools.serpapi_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.shell_tools",
        "description": "phidata.cookbook.tools.shell_tools",
        "peekOfCode": "assistant = Assistant(tools=[ShellTools()], show_tool_calls=True)\nassistant.print_response(\"Show me the contents of the current directory\", markdown=True)",
        "detail": "phidata.cookbook.tools.shell_tools",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.sql_tools",
        "description": "phidata.cookbook.tools.sql_tools",
        "peekOfCode": "db_url = \"postgresql+psycopg://ai:ai@localhost:5532/ai\"\nassistant = Assistant(\n    tools=[\n        SQLTools(\n            db_url=db_url,\n        )\n    ],\n    show_tool_calls=True,\n)\nassistant.print_response(\"List the tables in the database. Tell me about contents of one of the tables\", markdown=True)",
        "detail": "phidata.cookbook.tools.sql_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.sql_tools",
        "description": "phidata.cookbook.tools.sql_tools",
        "peekOfCode": "assistant = Assistant(\n    tools=[\n        SQLTools(\n            db_url=db_url,\n        )\n    ],\n    show_tool_calls=True,\n)\nassistant.print_response(\"List the tables in the database. Tell me about contents of one of the tables\", markdown=True)",
        "detail": "phidata.cookbook.tools.sql_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.tavily_tools",
        "description": "phidata.cookbook.tools.tavily_tools",
        "peekOfCode": "assistant = Assistant(tools=[TavilyTools()], show_tool_calls=True)\nassistant.print_response(\"Search tavily for 'language models'\", markdown=True)",
        "detail": "phidata.cookbook.tools.tavily_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.website_tools",
        "description": "phidata.cookbook.tools.website_tools",
        "peekOfCode": "assistant = Assistant(tools=[WebsiteTools()], show_tool_calls=True)\nassistant.print_response(\"Search web page: 'https://docs.phidata.com/introduction'\", markdown=True)",
        "detail": "phidata.cookbook.tools.website_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.wikipedia_tools",
        "description": "phidata.cookbook.tools.wikipedia_tools",
        "peekOfCode": "assistant = Assistant(tools=[WikipediaTools()], show_tool_calls=True)\nassistant.print_response(\"Search wikipedia for 'ai'\", markdown=True)",
        "detail": "phidata.cookbook.tools.wikipedia_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.yfinance_tools",
        "description": "phidata.cookbook.tools.yfinance_tools",
        "peekOfCode": "assistant = Assistant(\n    name=\"Finance Assistant\",\n    llm=OpenAIChat(model=\"gpt-4-turbo\"),\n    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, stock_fundamentals=True)],\n    show_tool_calls=True,\n    description=\"You are an investment analyst that researches stock prices, analyst recommendations, and stock fundamentals.\",\n    instructions=[\"Format your response using markdown and use tables to display data where possible.\"],\n)\nassistant.print_response(\"Share the NVDA stock price and analyst recommendations\", markdown=True)",
        "detail": "phidata.cookbook.tools.yfinance_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.youtube_tools",
        "description": "phidata.cookbook.tools.youtube_tools",
        "peekOfCode": "assistant = Assistant(\n    tools=[YouTubeTools()],\n    show_tool_calls=True,\n    description=\"You are a YouTube assistant. Obtain the captions of a YouTube video and answer questions.\",\n    debug_mode=True,\n)\nassistant.print_response(\"Summarize this video https://www.youtube.com/watch?v=Iv9dewmcFbs&t\", markdown=True)",
        "detail": "phidata.cookbook.tools.youtube_tools",
        "documentation": {}
    },
    {
        "label": "zd_username",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.zendesk_tools",
        "description": "phidata.cookbook.tools.zendesk_tools",
        "peekOfCode": "zd_username = os.getenv(\"ZENDESK_USERNAME\")\nzd_password = os.getenv(\"ZENDESK_PW\")\nzd_company_name = os.getenv(\"ZENDESK_COMPANY_NAME\")\nif not zd_username or not zd_password or not zd_company_name:\n    raise EnvironmentError(\n        \"Please set the following environment variables: ZENDESK_USERNAME, ZENDESK_PW, ZENDESK_COMPANY_NAME\"\n    )\n# Initialize the ZendeskTools with the credentials\nzendesk_tools = ZendeskTools(username=zd_username, password=zd_password, company_name=zd_company_name)\n# Create an instance of Assistant and pass the initialized tool",
        "detail": "phidata.cookbook.tools.zendesk_tools",
        "documentation": {}
    },
    {
        "label": "zd_password",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.zendesk_tools",
        "description": "phidata.cookbook.tools.zendesk_tools",
        "peekOfCode": "zd_password = os.getenv(\"ZENDESK_PW\")\nzd_company_name = os.getenv(\"ZENDESK_COMPANY_NAME\")\nif not zd_username or not zd_password or not zd_company_name:\n    raise EnvironmentError(\n        \"Please set the following environment variables: ZENDESK_USERNAME, ZENDESK_PW, ZENDESK_COMPANY_NAME\"\n    )\n# Initialize the ZendeskTools with the credentials\nzendesk_tools = ZendeskTools(username=zd_username, password=zd_password, company_name=zd_company_name)\n# Create an instance of Assistant and pass the initialized tool\nassistant = Assistant(tools=[zendesk_tools], show_tool_calls=True)",
        "detail": "phidata.cookbook.tools.zendesk_tools",
        "documentation": {}
    },
    {
        "label": "zd_company_name",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.zendesk_tools",
        "description": "phidata.cookbook.tools.zendesk_tools",
        "peekOfCode": "zd_company_name = os.getenv(\"ZENDESK_COMPANY_NAME\")\nif not zd_username or not zd_password or not zd_company_name:\n    raise EnvironmentError(\n        \"Please set the following environment variables: ZENDESK_USERNAME, ZENDESK_PW, ZENDESK_COMPANY_NAME\"\n    )\n# Initialize the ZendeskTools with the credentials\nzendesk_tools = ZendeskTools(username=zd_username, password=zd_password, company_name=zd_company_name)\n# Create an instance of Assistant and pass the initialized tool\nassistant = Assistant(tools=[zendesk_tools], show_tool_calls=True)\nassistant.print_response(\"How do I login?\", markdown=True)",
        "detail": "phidata.cookbook.tools.zendesk_tools",
        "documentation": {}
    },
    {
        "label": "zendesk_tools",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.zendesk_tools",
        "description": "phidata.cookbook.tools.zendesk_tools",
        "peekOfCode": "zendesk_tools = ZendeskTools(username=zd_username, password=zd_password, company_name=zd_company_name)\n# Create an instance of Assistant and pass the initialized tool\nassistant = Assistant(tools=[zendesk_tools], show_tool_calls=True)\nassistant.print_response(\"How do I login?\", markdown=True)",
        "detail": "phidata.cookbook.tools.zendesk_tools",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "phidata.cookbook.tools.zendesk_tools",
        "description": "phidata.cookbook.tools.zendesk_tools",
        "peekOfCode": "assistant = Assistant(tools=[zendesk_tools], show_tool_calls=True)\nassistant.print_response(\"How do I login?\", markdown=True)",
        "detail": "phidata.cookbook.tools.zendesk_tools",
        "documentation": {}
    },
    {
        "label": "get_top_hackernews_stories",
        "kind": 2,
        "importPath": "phidata.cookbook.workflows.hackernews",
        "description": "phidata.cookbook.workflows.hackernews",
        "peekOfCode": "def get_top_hackernews_stories(num_stories: int = 10) -> str:\n    \"\"\"Use this function to get top stories from Hacker News.\n    Args:\n        num_stories (int): Number of stories to return. Defaults to 10.\n    Returns:\n        str: JSON string of top stories.\n    \"\"\"\n    # Fetch top story IDs\n    response = httpx.get(\"https://hacker-news.firebaseio.com/v0/topstories.json\")\n    story_ids = response.json()",
        "detail": "phidata.cookbook.workflows.hackernews",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": "phidata.cookbook.workflows.hackernews",
        "description": "phidata.cookbook.workflows.hackernews",
        "peekOfCode": "def get_user_details(username: str) -> str:\n    \"\"\"Use this function to get the details of a Hacker News user using their username.\n    Args:\n        username (str): Username of the user to get details for.\n    Returns:\n        str: JSON string of the user details.\n    \"\"\"\n    try:\n        logger.info(f\"Getting details for user: {username}\")\n        user = httpx.get(f\"https://hacker-news.firebaseio.com/v0/user/{username}.json\").json()",
        "detail": "phidata.cookbook.workflows.hackernews",
        "documentation": {}
    },
    {
        "label": "hn_top_stories",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.hackernews",
        "description": "phidata.cookbook.workflows.hackernews",
        "peekOfCode": "hn_top_stories = Assistant(\n    name=\"HackerNews Top Stories\",\n    tools=[get_top_hackernews_stories],\n    show_tool_calls=True,\n)\nhn_user_researcher = Assistant(\n    name=\"HackerNews User Researcher\",\n    tools=[get_user_details],\n    show_tool_calls=True,\n)",
        "detail": "phidata.cookbook.workflows.hackernews",
        "documentation": {}
    },
    {
        "label": "hn_user_researcher",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.hackernews",
        "description": "phidata.cookbook.workflows.hackernews",
        "peekOfCode": "hn_user_researcher = Assistant(\n    name=\"HackerNews User Researcher\",\n    tools=[get_user_details],\n    show_tool_calls=True,\n)\nhn_workflow = Workflow(\n    name=\"HackerNews Workflow\",\n    tasks=[\n        Task(description=\"Get top hackernews stories\", assistant=hn_top_stories, show_output=False),\n        Task(description=\"Get information about hackernews users\", assistant=hn_user_researcher, show_output=False),",
        "detail": "phidata.cookbook.workflows.hackernews",
        "documentation": {}
    },
    {
        "label": "hn_workflow",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.hackernews",
        "description": "phidata.cookbook.workflows.hackernews",
        "peekOfCode": "hn_workflow = Workflow(\n    name=\"HackerNews Workflow\",\n    tasks=[\n        Task(description=\"Get top hackernews stories\", assistant=hn_top_stories, show_output=False),\n        Task(description=\"Get information about hackernews users\", assistant=hn_user_researcher, show_output=False),\n        Task(description=\"Write an engaging article\"),\n    ],\n    debug_mode=True,\n)\nhn_workflow.print_response(\"Write a report about the users with the top 2 stories on hackernews\", markdown=True)",
        "detail": "phidata.cookbook.workflows.hackernews",
        "documentation": {}
    },
    {
        "label": "reports_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.investment",
        "description": "phidata.cookbook.workflows.investment",
        "peekOfCode": "reports_dir = Path(__file__).parent.parent.parent.joinpath(\"wip\", \"reports\")\nif reports_dir.is_dir():\n    rmtree(path=reports_dir, ignore_errors=True)\nreports_dir.mkdir(parents=True, exist_ok=True)\nstock_analyst_report = str(reports_dir.joinpath(\"stock_analyst_report.md\"))\nresearch_analyst_report = str(reports_dir.joinpath(\"research_analyst_report.md\"))\ninvestment_report = str(reports_dir.joinpath(\"investment_report.md\"))\nstock_analyst = Assistant(\n    name=\"Stock Analyst\",\n    llm=Groq(model=\"llama3-70b-8192\"),",
        "detail": "phidata.cookbook.workflows.investment",
        "documentation": {}
    },
    {
        "label": "stock_analyst_report",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.investment",
        "description": "phidata.cookbook.workflows.investment",
        "peekOfCode": "stock_analyst_report = str(reports_dir.joinpath(\"stock_analyst_report.md\"))\nresearch_analyst_report = str(reports_dir.joinpath(\"research_analyst_report.md\"))\ninvestment_report = str(reports_dir.joinpath(\"investment_report.md\"))\nstock_analyst = Assistant(\n    name=\"Stock Analyst\",\n    llm=Groq(model=\"llama3-70b-8192\"),\n    tools=[YFinanceTools(company_info=True, analyst_recommendations=True, company_news=True)],\n    description=\"You are a Senior Investment Analyst for Goldman Sachs tasked with producing a research report for a very important client.\",\n    instructions=[\n        \"You will be provided with a list of companies to write a report on.\",",
        "detail": "phidata.cookbook.workflows.investment",
        "documentation": {}
    },
    {
        "label": "research_analyst_report",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.investment",
        "description": "phidata.cookbook.workflows.investment",
        "peekOfCode": "research_analyst_report = str(reports_dir.joinpath(\"research_analyst_report.md\"))\ninvestment_report = str(reports_dir.joinpath(\"investment_report.md\"))\nstock_analyst = Assistant(\n    name=\"Stock Analyst\",\n    llm=Groq(model=\"llama3-70b-8192\"),\n    tools=[YFinanceTools(company_info=True, analyst_recommendations=True, company_news=True)],\n    description=\"You are a Senior Investment Analyst for Goldman Sachs tasked with producing a research report for a very important client.\",\n    instructions=[\n        \"You will be provided with a list of companies to write a report on.\",\n        \"Get the company information, analyst recommendations and news for each company\",",
        "detail": "phidata.cookbook.workflows.investment",
        "documentation": {}
    },
    {
        "label": "investment_report",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.investment",
        "description": "phidata.cookbook.workflows.investment",
        "peekOfCode": "investment_report = str(reports_dir.joinpath(\"investment_report.md\"))\nstock_analyst = Assistant(\n    name=\"Stock Analyst\",\n    llm=Groq(model=\"llama3-70b-8192\"),\n    tools=[YFinanceTools(company_info=True, analyst_recommendations=True, company_news=True)],\n    description=\"You are a Senior Investment Analyst for Goldman Sachs tasked with producing a research report for a very important client.\",\n    instructions=[\n        \"You will be provided with a list of companies to write a report on.\",\n        \"Get the company information, analyst recommendations and news for each company\",\n        \"Generate an in-depth report for each company in markdown format with all the facts and details.\"",
        "detail": "phidata.cookbook.workflows.investment",
        "documentation": {}
    },
    {
        "label": "stock_analyst",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.investment",
        "description": "phidata.cookbook.workflows.investment",
        "peekOfCode": "stock_analyst = Assistant(\n    name=\"Stock Analyst\",\n    llm=Groq(model=\"llama3-70b-8192\"),\n    tools=[YFinanceTools(company_info=True, analyst_recommendations=True, company_news=True)],\n    description=\"You are a Senior Investment Analyst for Goldman Sachs tasked with producing a research report for a very important client.\",\n    instructions=[\n        \"You will be provided with a list of companies to write a report on.\",\n        \"Get the company information, analyst recommendations and news for each company\",\n        \"Generate an in-depth report for each company in markdown format with all the facts and details.\"\n        \"Note: This is only for educational purposes.\",",
        "detail": "phidata.cookbook.workflows.investment",
        "documentation": {}
    },
    {
        "label": "research_analyst",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.investment",
        "description": "phidata.cookbook.workflows.investment",
        "peekOfCode": "research_analyst = Assistant(\n    name=\"Research Analyst\",\n    llm=Groq(model=\"llama3-70b-8192\"),\n    description=\"You are a Senior Investment Analyst for Goldman Sachs tasked with producing a ranked list of companies based on their investment potential.\",\n    instructions=[\n        \"You will write a research report based on the information provided by the Stock Analyst.\",\n        \"Think deeply about the value of each stock.\",\n        \"Be discerning, you are a skeptical investor focused on maximising growth.\",\n        \"Then rank the companies in order of investment potential, with as much detail about your decision as possible.\",\n        \"Prepare a markdown report with your findings with as much detail as possible.\",",
        "detail": "phidata.cookbook.workflows.investment",
        "documentation": {}
    },
    {
        "label": "investment_lead",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.investment",
        "description": "phidata.cookbook.workflows.investment",
        "peekOfCode": "investment_lead = Assistant(\n    name=\"Investment Lead\",\n    llm=Groq(model=\"llama3-70b-8192\"),\n    description=\"You are a Senior Investment Analyst for Goldman Sachs tasked with producing a research report for a very important client.\",\n    instructions=[\n        \"Review the report provided and produce a final client-worth report\",\n    ],\n    save_output_to_file=investment_report,\n)\ninvestment_workflow = Workflow(",
        "detail": "phidata.cookbook.workflows.investment",
        "documentation": {}
    },
    {
        "label": "investment_workflow",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.investment",
        "description": "phidata.cookbook.workflows.investment",
        "peekOfCode": "investment_workflow = Workflow(\n    name=\"Investment Research Workflow\",\n    tasks=[\n        Task(\n            description=\"Collect information about NVDA & TSLA.\",\n            assistant=stock_analyst,\n            show_output=False,\n        ),\n        Task(\n            description=\"Produce a ranked list based on the information provided by the stock analyst.\",",
        "detail": "phidata.cookbook.workflows.investment",
        "documentation": {}
    },
    {
        "label": "NewsArticle",
        "kind": 6,
        "importPath": "phidata.cookbook.workflows.news_article",
        "description": "phidata.cookbook.workflows.news_article",
        "peekOfCode": "class NewsArticle(BaseModel):\n    title: str = Field(..., description=\"Title of the article.\")\n    url: str = Field(..., description=\"Link to the article.\")\n    summary: Optional[str] = Field(..., description=\"Summary of the article if available.\")\nresearcher = Assistant(\n    name=\"Article Researcher\",\n    tools=[DuckDuckGo()],\n    description=\"Given a topic, search for 15 articles and return the 7 most relevant articles.\",\n    output_model=NewsArticle,\n)",
        "detail": "phidata.cookbook.workflows.news_article",
        "documentation": {}
    },
    {
        "label": "articles_dir",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.news_article",
        "description": "phidata.cookbook.workflows.news_article",
        "peekOfCode": "articles_dir = Path(__file__).parent.parent.parent.joinpath(\"wip\", \"articles\")\nif articles_dir.exists():\n    rmtree(path=articles_dir, ignore_errors=True)\narticles_dir.mkdir(parents=True, exist_ok=True)\nclass NewsArticle(BaseModel):\n    title: str = Field(..., description=\"Title of the article.\")\n    url: str = Field(..., description=\"Link to the article.\")\n    summary: Optional[str] = Field(..., description=\"Summary of the article if available.\")\nresearcher = Assistant(\n    name=\"Article Researcher\",",
        "detail": "phidata.cookbook.workflows.news_article",
        "documentation": {}
    },
    {
        "label": "researcher",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.news_article",
        "description": "phidata.cookbook.workflows.news_article",
        "peekOfCode": "researcher = Assistant(\n    name=\"Article Researcher\",\n    tools=[DuckDuckGo()],\n    description=\"Given a topic, search for 15 articles and return the 7 most relevant articles.\",\n    output_model=NewsArticle,\n)\nwriter = Assistant(\n    name=\"Article Writer\",\n    tools=[Newspaper4k()],\n    description=\"You are a Senior NYT Editor and your task is to write a NYT cover story worthy article due tomorrow.\",",
        "detail": "phidata.cookbook.workflows.news_article",
        "documentation": {}
    },
    {
        "label": "writer",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.news_article",
        "description": "phidata.cookbook.workflows.news_article",
        "peekOfCode": "writer = Assistant(\n    name=\"Article Writer\",\n    tools=[Newspaper4k()],\n    description=\"You are a Senior NYT Editor and your task is to write a NYT cover story worthy article due tomorrow.\",\n    instructions=[\n        \"You will be provided with news articles and their links.\",\n        \"Carefully read each article and think about the contents\",\n        \"Then generate a final New York Times worthy article in the <article_format> provided below.\",\n        \"Break the article into sections and provide key takeaways at the end.\",\n        \"Make sure the title is catchy and engaging.\",",
        "detail": "phidata.cookbook.workflows.news_article",
        "documentation": {}
    },
    {
        "label": "news_article",
        "kind": 5,
        "importPath": "phidata.cookbook.workflows.news_article",
        "description": "phidata.cookbook.workflows.news_article",
        "peekOfCode": "news_article = Workflow(\n    name=\"News Article Workflow\",\n    tasks=[\n        Task(\n            description=\"Find the 7 most relevant articles on a topic.\",\n            assistant=researcher,\n            show_output=False,\n        ),\n        Task(\n            description=\"Read each article and and write a NYT worthy news article.\",",
        "detail": "phidata.cookbook.workflows.news_article",
        "documentation": {}
    },
    {
        "label": "ConversationType",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.ai",
        "description": "phidata.phi.api.schemas.ai",
        "peekOfCode": "class ConversationType(str, Enum):\n    RAG = \"RAG\"\n    AUTO = \"AUTO\"\nclass ConversationClient(str, Enum):\n    CLI = \"CLI\"\n    WEB = \"WEB\"\nclass ConversationCreateResponse(BaseModel):\n    id: str\n    chat_history: List[Dict[str, Any]]",
        "detail": "phidata.phi.api.schemas.ai",
        "documentation": {}
    },
    {
        "label": "ConversationClient",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.ai",
        "description": "phidata.phi.api.schemas.ai",
        "peekOfCode": "class ConversationClient(str, Enum):\n    CLI = \"CLI\"\n    WEB = \"WEB\"\nclass ConversationCreateResponse(BaseModel):\n    id: str\n    chat_history: List[Dict[str, Any]]",
        "detail": "phidata.phi.api.schemas.ai",
        "documentation": {}
    },
    {
        "label": "ConversationCreateResponse",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.ai",
        "description": "phidata.phi.api.schemas.ai",
        "peekOfCode": "class ConversationCreateResponse(BaseModel):\n    id: str\n    chat_history: List[Dict[str, Any]]",
        "detail": "phidata.phi.api.schemas.ai",
        "documentation": {}
    },
    {
        "label": "AssistantRunCreate",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.assistant",
        "description": "phidata.phi.api.schemas.assistant",
        "peekOfCode": "class AssistantRunCreate(BaseModel):\n    \"\"\"Data sent to API to create an assistant run\"\"\"\n    run_id: str\n    assistant_data: Optional[Dict[str, Any]] = None\nclass AssistantEventCreate(BaseModel):\n    \"\"\"Data sent to API to create a new assistant event\"\"\"\n    run_id: str\n    assistant_data: Optional[Dict[str, Any]] = None\n    event_type: str\n    event_data: Optional[Dict[str, Any]] = None",
        "detail": "phidata.phi.api.schemas.assistant",
        "documentation": {}
    },
    {
        "label": "AssistantEventCreate",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.assistant",
        "description": "phidata.phi.api.schemas.assistant",
        "peekOfCode": "class AssistantEventCreate(BaseModel):\n    \"\"\"Data sent to API to create a new assistant event\"\"\"\n    run_id: str\n    assistant_data: Optional[Dict[str, Any]] = None\n    event_type: str\n    event_data: Optional[Dict[str, Any]] = None",
        "detail": "phidata.phi.api.schemas.assistant",
        "documentation": {}
    },
    {
        "label": "MonitorEventSchema",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.monitor",
        "description": "phidata.phi.api.schemas.monitor",
        "peekOfCode": "class MonitorEventSchema(BaseModel):\n    event_type: str\n    event_status: str\n    object_name: str\n    event_data: Optional[Dict[str, Any]] = None\n    object_data: Optional[Dict[str, Any]] = None\nclass MonitorResponseSchema(BaseModel):\n    id_monitor: Optional[int] = None\n    id_event: Optional[int] = None",
        "detail": "phidata.phi.api.schemas.monitor",
        "documentation": {}
    },
    {
        "label": "MonitorResponseSchema",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.monitor",
        "description": "phidata.phi.api.schemas.monitor",
        "peekOfCode": "class MonitorResponseSchema(BaseModel):\n    id_monitor: Optional[int] = None\n    id_event: Optional[int] = None",
        "detail": "phidata.phi.api.schemas.monitor",
        "documentation": {}
    },
    {
        "label": "PromptRegistrySync",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.prompt",
        "description": "phidata.phi.api.schemas.prompt",
        "peekOfCode": "class PromptRegistrySync(BaseModel):\n    \"\"\"Data sent to API to sync a prompt registry\"\"\"\n    registry_name: str\n    registry_data: Optional[Dict[str, Any]] = None\nclass PromptTemplateSync(BaseModel):\n    \"\"\"Data sent to API to sync a single prompt template\"\"\"\n    template_id: str\n    template_data: Optional[Dict[str, Any]] = None\nclass PromptTemplatesSync(BaseModel):\n    \"\"\"Data sent to API to sync prompt templates\"\"\"",
        "detail": "phidata.phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "PromptTemplateSync",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.prompt",
        "description": "phidata.phi.api.schemas.prompt",
        "peekOfCode": "class PromptTemplateSync(BaseModel):\n    \"\"\"Data sent to API to sync a single prompt template\"\"\"\n    template_id: str\n    template_data: Optional[Dict[str, Any]] = None\nclass PromptTemplatesSync(BaseModel):\n    \"\"\"Data sent to API to sync prompt templates\"\"\"\n    templates: Dict[str, PromptTemplateSync] = {}\nclass PromptRegistrySchema(BaseModel):\n    \"\"\"Schema for a prompt registry returned by API\"\"\"\n    id_user: Optional[int] = None",
        "detail": "phidata.phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "PromptTemplatesSync",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.prompt",
        "description": "phidata.phi.api.schemas.prompt",
        "peekOfCode": "class PromptTemplatesSync(BaseModel):\n    \"\"\"Data sent to API to sync prompt templates\"\"\"\n    templates: Dict[str, PromptTemplateSync] = {}\nclass PromptRegistrySchema(BaseModel):\n    \"\"\"Schema for a prompt registry returned by API\"\"\"\n    id_user: Optional[int] = None\n    id_workspace: Optional[int] = None\n    id_registry: Optional[UUID] = None\n    registry_name: Optional[str] = None\n    registry_data: Optional[Dict[str, Any]] = None",
        "detail": "phidata.phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "PromptRegistrySchema",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.prompt",
        "description": "phidata.phi.api.schemas.prompt",
        "peekOfCode": "class PromptRegistrySchema(BaseModel):\n    \"\"\"Schema for a prompt registry returned by API\"\"\"\n    id_user: Optional[int] = None\n    id_workspace: Optional[int] = None\n    id_registry: Optional[UUID] = None\n    registry_name: Optional[str] = None\n    registry_data: Optional[Dict[str, Any]] = None\nclass PromptTemplateSchema(BaseModel):\n    \"\"\"Schema for a prompt template returned by API\"\"\"\n    id_template: Optional[UUID] = None",
        "detail": "phidata.phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "PromptTemplateSchema",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.prompt",
        "description": "phidata.phi.api.schemas.prompt",
        "peekOfCode": "class PromptTemplateSchema(BaseModel):\n    \"\"\"Schema for a prompt template returned by API\"\"\"\n    id_template: Optional[UUID] = None\n    id_registry: Optional[UUID] = None\n    template_id: Optional[str] = None\n    template_data: Optional[Dict[str, Any]] = None",
        "detail": "phidata.phi.api.schemas.prompt",
        "documentation": {}
    },
    {
        "label": "ApiResponseSchema",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.response",
        "description": "phidata.phi.api.schemas.response",
        "peekOfCode": "class ApiResponseSchema(BaseModel):\n    status: str = \"fail\"\n    message: str = \"invalid request\"",
        "detail": "phidata.phi.api.schemas.response",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.user",
        "description": "phidata.phi.api.schemas.user",
        "peekOfCode": "class UserSchema(BaseModel):\n    \"\"\"Schema for user data returned by the API.\"\"\"\n    id_user: int\n    email: Optional[str] = None\n    username: Optional[str] = None\n    is_active: Optional[bool] = True\n    is_bot: Optional[bool] = False\n    name: Optional[str] = None\n    email_verified: Optional[bool] = False\nclass EmailPasswordAuthSchema(BaseModel):",
        "detail": "phidata.phi.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "EmailPasswordAuthSchema",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.user",
        "description": "phidata.phi.api.schemas.user",
        "peekOfCode": "class EmailPasswordAuthSchema(BaseModel):\n    email: str\n    password: str\n    auth_source: str = \"cli\"",
        "detail": "phidata.phi.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "WorkspaceCreate",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.workspace",
        "description": "phidata.phi.api.schemas.workspace",
        "peekOfCode": "class WorkspaceCreate(BaseModel):\n    ws_name: str\n    git_url: Optional[str] = None\n    is_primary_for_user: Optional[bool] = False\n    visibility: Optional[str] = None\n    ws_data: Optional[Dict[str, Any]] = None\nclass WorkspaceUpdate(BaseModel):\n    id_workspace: int\n    ws_name: Optional[str] = None\n    git_url: Optional[str] = None",
        "detail": "phidata.phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceUpdate",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.workspace",
        "description": "phidata.phi.api.schemas.workspace",
        "peekOfCode": "class WorkspaceUpdate(BaseModel):\n    id_workspace: int\n    ws_name: Optional[str] = None\n    git_url: Optional[str] = None\n    visibility: Optional[str] = None\n    ws_data: Optional[Dict[str, Any]] = None\n    is_active: Optional[bool] = None\nclass UpdatePrimaryWorkspace(BaseModel):\n    id_workspace: int\n    ws_name: Optional[str] = None",
        "detail": "phidata.phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "UpdatePrimaryWorkspace",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.workspace",
        "description": "phidata.phi.api.schemas.workspace",
        "peekOfCode": "class UpdatePrimaryWorkspace(BaseModel):\n    id_workspace: int\n    ws_name: Optional[str] = None\nclass WorkspaceDelete(BaseModel):\n    id_workspace: int\n    ws_name: Optional[str] = None\nclass WorkspaceEvent(BaseModel):\n    id_workspace: int\n    event_type: str\n    event_status: str",
        "detail": "phidata.phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceDelete",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.workspace",
        "description": "phidata.phi.api.schemas.workspace",
        "peekOfCode": "class WorkspaceDelete(BaseModel):\n    id_workspace: int\n    ws_name: Optional[str] = None\nclass WorkspaceEvent(BaseModel):\n    id_workspace: int\n    event_type: str\n    event_status: str\n    event_data: Optional[Dict[str, Any]] = None\nclass WorkspaceSchema(BaseModel):\n    \"\"\"Workspace data returned by the API.\"\"\"",
        "detail": "phidata.phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceEvent",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.workspace",
        "description": "phidata.phi.api.schemas.workspace",
        "peekOfCode": "class WorkspaceEvent(BaseModel):\n    id_workspace: int\n    event_type: str\n    event_status: str\n    event_data: Optional[Dict[str, Any]] = None\nclass WorkspaceSchema(BaseModel):\n    \"\"\"Workspace data returned by the API.\"\"\"\n    id_workspace: Optional[int] = None\n    ws_name: Optional[str] = None\n    is_active: Optional[bool] = None",
        "detail": "phidata.phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceSchema",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.workspace",
        "description": "phidata.phi.api.schemas.workspace",
        "peekOfCode": "class WorkspaceSchema(BaseModel):\n    \"\"\"Workspace data returned by the API.\"\"\"\n    id_workspace: Optional[int] = None\n    ws_name: Optional[str] = None\n    is_active: Optional[bool] = None\n    git_url: Optional[str] = None\n    ws_hash: Optional[str] = None\n    ws_data: Optional[Dict[str, Any]] = None\nclass WorkspaceIdentifier(BaseModel):\n    ws_key: Optional[str] = None",
        "detail": "phidata.phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "WorkspaceIdentifier",
        "kind": 6,
        "importPath": "phidata.phi.api.schemas.workspace",
        "description": "phidata.phi.api.schemas.workspace",
        "peekOfCode": "class WorkspaceIdentifier(BaseModel):\n    ws_key: Optional[str] = None\n    id_workspace: Optional[int] = None\n    ws_hash: Optional[str] = None",
        "detail": "phidata.phi.api.schemas.workspace",
        "documentation": {}
    },
    {
        "label": "Api",
        "kind": 6,
        "importPath": "phidata.phi.api.api",
        "description": "phidata.phi.api.api",
        "peekOfCode": "class Api:\n    def __init__(self):\n        self.headers: Dict[str, str] = {\n            \"user-agent\": f\"{phi_cli_settings.app_name}/{phi_cli_settings.app_version}\",\n            \"Content-Type\": \"application/json\",\n        }\n        self._auth_token: Optional[str] = None\n        self._authenticated_headers = None\n    @property\n    def auth_token(self) -> Optional[str]:",
        "detail": "phidata.phi.api.api",
        "documentation": {}
    },
    {
        "label": "invalid_response",
        "kind": 2,
        "importPath": "phidata.phi.api.api",
        "description": "phidata.phi.api.api",
        "peekOfCode": "def invalid_response(r: Response) -> bool:\n    \"\"\"Returns true if the response is invalid\"\"\"\n    if r.status_code >= 400:\n        return True\n    return False",
        "detail": "phidata.phi.api.api",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "phidata.phi.api.api",
        "description": "phidata.phi.api.api",
        "peekOfCode": "api = Api()\ndef invalid_response(r: Response) -> bool:\n    \"\"\"Returns true if the response is invalid\"\"\"\n    if r.status_code >= 400:\n        return True\n    return False",
        "detail": "phidata.phi.api.api",
        "documentation": {}
    },
    {
        "label": "create_assistant_run",
        "kind": 2,
        "importPath": "phidata.phi.api.assistant",
        "description": "phidata.phi.api.assistant",
        "peekOfCode": "def create_assistant_run(run: AssistantRunCreate) -> bool:\n    if not phi_cli_settings.api_enabled:\n        return True\n    logger.debug(\"--o-o-- Creating Assistant Run\")\n    with api.AuthenticatedClient() as api_client:\n        try:\n            r: Response = api_client.post(\n                ApiRoutes.ASSISTANT_RUN_CREATE,\n                headers={\n                    \"Authorization\": f\"Bearer {getenv(PHI_API_KEY_ENV_VAR)}\",",
        "detail": "phidata.phi.api.assistant",
        "documentation": {}
    },
    {
        "label": "create_assistant_event",
        "kind": 2,
        "importPath": "phidata.phi.api.assistant",
        "description": "phidata.phi.api.assistant",
        "peekOfCode": "def create_assistant_event(event: AssistantEventCreate) -> bool:\n    if not phi_cli_settings.api_enabled:\n        return True\n    logger.debug(\"--o-o-- Creating Assistant Event\")\n    with api.AuthenticatedClient() as api_client:\n        try:\n            r: Response = api_client.post(\n                ApiRoutes.ASSISTANT_EVENT_CREATE,\n                headers={\n                    \"Authorization\": f\"Bearer {getenv(PHI_API_KEY_ENV_VAR)}\",",
        "detail": "phidata.phi.api.assistant",
        "documentation": {}
    },
    {
        "label": "sync_prompt_registry_api",
        "kind": 2,
        "importPath": "phidata.phi.api.prompt",
        "description": "phidata.phi.api.prompt",
        "peekOfCode": "def sync_prompt_registry_api(\n    registry: PromptRegistrySync, templates: PromptTemplatesSync\n) -> Tuple[Optional[PromptRegistrySchema], Optional[Dict[str, PromptTemplateSchema]]]:\n    if not phi_cli_settings.api_enabled:\n        return None, None\n    logger.debug(\"--o-o-- Syncing Prompt Registry --o-o--\")\n    with api.AuthenticatedClient() as api_client:\n        try:\n            workspace_identifier = WorkspaceIdentifier(\n                id_workspace=str_to_int(getenv(WORKSPACE_ID_ENV_VAR)),",
        "detail": "phidata.phi.api.prompt",
        "documentation": {}
    },
    {
        "label": "sync_prompt_template_api",
        "kind": 2,
        "importPath": "phidata.phi.api.prompt",
        "description": "phidata.phi.api.prompt",
        "peekOfCode": "def sync_prompt_template_api(\n    registry: PromptRegistrySync, prompt_template: PromptTemplateSync\n) -> Optional[PromptTemplateSchema]:\n    if not phi_cli_settings.api_enabled:\n        return None\n    logger.debug(\"--o-o-- Syncing Prompt Template --o-o--\")\n    with api.AuthenticatedClient() as api_client:\n        try:\n            workspace_identifier = WorkspaceIdentifier(\n                id_workspace=str_to_int(getenv(WORKSPACE_ID_ENV_VAR)),",
        "detail": "phidata.phi.api.prompt",
        "documentation": {}
    },
    {
        "label": "ApiRoutes",
        "kind": 6,
        "importPath": "phidata.phi.api.routes",
        "description": "phidata.phi.api.routes",
        "peekOfCode": "class ApiRoutes:\n    # user paths\n    USER_HEALTH: str = \"/v1/user/health\"\n    USER_READ: str = \"/v1/user/read\"\n    USER_CREATE: str = \"/v1/user/create\"\n    USER_UPDATE: str = \"/v1/user/update\"\n    USER_SIGN_IN: str = \"/v1/user/signin\"\n    USER_CLI_AUTH: str = \"/v1/user/cliauth\"\n    USER_AUTHENTICATE: str = \"/v1/user/authenticate\"\n    USER_AUTH_REFRESH: str = \"/v1/user/authrefresh\"",
        "detail": "phidata.phi.api.routes",
        "documentation": {}
    },
    {
        "label": "user_ping",
        "kind": 2,
        "importPath": "phidata.phi.api.user",
        "description": "phidata.phi.api.user",
        "peekOfCode": "def user_ping() -> bool:\n    if not phi_cli_settings.api_enabled:\n        return False\n    logger.debug(\"--o-o-- Ping user api\")\n    with api.Client() as api_client:\n        try:\n            r: Response = api_client.get(ApiRoutes.USER_HEALTH)\n            if invalid_response(r):\n                return False\n            if r.status_code == codes.OK:",
        "detail": "phidata.phi.api.user",
        "documentation": {}
    },
    {
        "label": "authenticate_and_get_user",
        "kind": 2,
        "importPath": "phidata.phi.api.user",
        "description": "phidata.phi.api.user",
        "peekOfCode": "def authenticate_and_get_user(tmp_auth_token: str, existing_user: Optional[UserSchema] = None) -> Optional[UserSchema]:\n    if not phi_cli_settings.api_enabled:\n        return None\n    from phi.cli.credentials import save_auth_token, read_auth_token\n    logger.debug(\"--o-o-- Getting user\")\n    auth_header = {phi_cli_settings.auth_token_header: tmp_auth_token}\n    anon_user = None\n    if existing_user is not None:\n        if existing_user.email == \"anon\":\n            logger.debug(f\"Claiming anonymous user: {existing_user.id_user}\")",
        "detail": "phidata.phi.api.user",
        "documentation": {}
    },
    {
        "label": "sign_in_user",
        "kind": 2,
        "importPath": "phidata.phi.api.user",
        "description": "phidata.phi.api.user",
        "peekOfCode": "def sign_in_user(sign_in_data: EmailPasswordAuthSchema) -> Optional[UserSchema]:\n    if not phi_cli_settings.api_enabled:\n        return None\n    from phi.cli.credentials import save_auth_token\n    logger.debug(\"--o-o-- Signing in user\")\n    with api.Client() as api_client:\n        try:\n            r: Response = api_client.post(ApiRoutes.USER_SIGN_IN, json=sign_in_data.model_dump())\n            if invalid_response(r):\n                return None",
        "detail": "phidata.phi.api.user",
        "documentation": {}
    },
    {
        "label": "user_is_authenticated",
        "kind": 2,
        "importPath": "phidata.phi.api.user",
        "description": "phidata.phi.api.user",
        "peekOfCode": "def user_is_authenticated() -> bool:\n    if not phi_cli_settings.api_enabled:\n        return False\n    logger.debug(\"--o-o-- Checking if user is authenticated\")\n    phi_config: Optional[PhiCliConfig] = PhiCliConfig.from_saved_config()\n    if phi_config is None:\n        return False\n    user: Optional[UserSchema] = phi_config.user\n    if user is None:\n        return False",
        "detail": "phidata.phi.api.user",
        "documentation": {}
    },
    {
        "label": "create_anon_user",
        "kind": 2,
        "importPath": "phidata.phi.api.user",
        "description": "phidata.phi.api.user",
        "peekOfCode": "def create_anon_user() -> Optional[UserSchema]:\n    if not phi_cli_settings.api_enabled:\n        return None\n    from phi.cli.credentials import save_auth_token\n    logger.debug(\"--o-o-- Creating anon user\")\n    with api.Client() as api_client:\n        try:\n            r: Response = api_client.post(\n                ApiRoutes.USER_CREATE, json={\"user\": {\"email\": \"anon\", \"username\": \"anon\", \"is_bot\": True}}\n            )",
        "detail": "phidata.phi.api.user",
        "documentation": {}
    },
    {
        "label": "get_primary_workspace",
        "kind": 2,
        "importPath": "phidata.phi.api.workspace",
        "description": "phidata.phi.api.workspace",
        "peekOfCode": "def get_primary_workspace(user: UserSchema) -> Optional[WorkspaceSchema]:\n    if not phi_cli_settings.api_enabled:\n        return None\n    logger.debug(\"--o-o-- Get primary workspace\")\n    with api.AuthenticatedClient() as api_client:\n        try:\n            r: Response = api_client.post(\n                ApiRoutes.WORKSPACE_READ_PRIMARY, json=user.model_dump(include={\"id_user\", \"email\"})\n            )\n            if invalid_response(r):",
        "detail": "phidata.phi.api.workspace",
        "documentation": {}
    },
    {
        "label": "get_available_workspaces",
        "kind": 2,
        "importPath": "phidata.phi.api.workspace",
        "description": "phidata.phi.api.workspace",
        "peekOfCode": "def get_available_workspaces(user: UserSchema) -> Optional[List[WorkspaceSchema]]:\n    if not phi_cli_settings.api_enabled:\n        return None\n    logger.debug(\"--o-o-- Get available workspaces\")\n    with api.AuthenticatedClient() as api_client:\n        try:\n            r: Response = api_client.post(\n                ApiRoutes.WORKSPACE_READ_AVAILABLE, json=user.model_dump(include={\"id_user\", \"email\"})\n            )\n            if invalid_response(r):",
        "detail": "phidata.phi.api.workspace",
        "documentation": {}
    },
    {
        "label": "create_workspace_for_user",
        "kind": 2,
        "importPath": "phidata.phi.api.workspace",
        "description": "phidata.phi.api.workspace",
        "peekOfCode": "def create_workspace_for_user(user: UserSchema, workspace: WorkspaceCreate) -> Optional[WorkspaceSchema]:\n    if not phi_cli_settings.api_enabled:\n        return None\n    logger.debug(\"--o-o-- Create workspace\")\n    with api.AuthenticatedClient() as api_client:\n        try:\n            r: Response = api_client.post(\n                ApiRoutes.WORKSPACE_CREATE,\n                json={\n                    \"user\": user.model_dump(include={\"id_user\", \"email\"}),",
        "detail": "phidata.phi.api.workspace",
        "documentation": {}
    },
    {
        "label": "update_workspace_for_user",
        "kind": 2,
        "importPath": "phidata.phi.api.workspace",
        "description": "phidata.phi.api.workspace",
        "peekOfCode": "def update_workspace_for_user(user: UserSchema, workspace: WorkspaceUpdate) -> Optional[WorkspaceSchema]:\n    if not phi_cli_settings.api_enabled:\n        return None\n    logger.debug(\"--o-o-- Update workspace\")\n    with api.AuthenticatedClient() as api_client:\n        try:\n            r: Response = api_client.post(\n                ApiRoutes.WORKSPACE_UPDATE,\n                json={\n                    \"user\": user.model_dump(include={\"id_user\", \"email\"}),",
        "detail": "phidata.phi.api.workspace",
        "documentation": {}
    },
    {
        "label": "update_primary_workspace_for_user",
        "kind": 2,
        "importPath": "phidata.phi.api.workspace",
        "description": "phidata.phi.api.workspace",
        "peekOfCode": "def update_primary_workspace_for_user(user: UserSchema, workspace: UpdatePrimaryWorkspace) -> Optional[WorkspaceSchema]:\n    if not phi_cli_settings.api_enabled:\n        return None\n    logger.debug(f\"--o-o-- Update primary workspace to: {workspace.ws_name}\")\n    with api.AuthenticatedClient() as api_client:\n        try:\n            r: Response = api_client.post(\n                ApiRoutes.WORKSPACE_UPDATE_PRIMARY,\n                json={\n                    \"user\": user.model_dump(include={\"id_user\", \"email\"}),",
        "detail": "phidata.phi.api.workspace",
        "documentation": {}
    },
    {
        "label": "delete_workspace_for_user",
        "kind": 2,
        "importPath": "phidata.phi.api.workspace",
        "description": "phidata.phi.api.workspace",
        "peekOfCode": "def delete_workspace_for_user(user: UserSchema, workspace: WorkspaceDelete) -> Optional[WorkspaceSchema]:\n    if not phi_cli_settings.api_enabled:\n        return None\n    logger.debug(\"--o-o-- Delete workspace\")\n    with api.AuthenticatedClient() as api_client:\n        try:\n            r: Response = api_client.post(\n                ApiRoutes.WORKSPACE_DELETE,\n                json={\n                    \"user\": user.model_dump(include={\"id_user\", \"email\"}),",
        "detail": "phidata.phi.api.workspace",
        "documentation": {}
    },
    {
        "label": "log_workspace_event",
        "kind": 2,
        "importPath": "phidata.phi.api.workspace",
        "description": "phidata.phi.api.workspace",
        "peekOfCode": "def log_workspace_event(user: UserSchema, workspace_event: WorkspaceEvent) -> bool:\n    if not phi_cli_settings.api_enabled:\n        return False\n    logger.debug(\"--o-o-- Log workspace event\")\n    with api.AuthenticatedClient() as api_client:\n        try:\n            r: Response = api_client.post(\n                ApiRoutes.WORKSPACE_EVENT_CREATE,\n                json={\n                    \"user\": user.model_dump(include={\"id_user\", \"email\"}),",
        "detail": "phidata.phi.api.workspace",
        "documentation": {}
    },
    {
        "label": "AppBase",
        "kind": 6,
        "importPath": "phidata.phi.app.base",
        "description": "phidata.phi.app.base",
        "peekOfCode": "class AppBase(PhiBase):\n    # -*- App Name (required)\n    name: str\n    # -*- Image Configuration\n    # Image can be provided as a DockerImage object\n    image: Optional[Any] = None\n    # OR as image_name:image_tag str\n    image_str: Optional[str] = None\n    # OR as image_name and image_tag\n    image_name: Optional[str] = None",
        "detail": "phidata.phi.app.base",
        "documentation": {}
    },
    {
        "label": "ContainerContext",
        "kind": 6,
        "importPath": "phidata.phi.app.context",
        "description": "phidata.phi.app.context",
        "peekOfCode": "class ContainerContext(BaseModel):\n    workspace_name: str\n    # Path to the workspace directory inside the container\n    workspace_root: str\n    # Path to the workspace parent directory inside the container\n    workspace_parent: str\n    scripts_dir: Optional[str] = None\n    storage_dir: Optional[str] = None\n    workflows_dir: Optional[str] = None\n    workspace_dir: Optional[str] = None",
        "detail": "phidata.phi.app.context",
        "documentation": {}
    },
    {
        "label": "DbApp",
        "kind": 6,
        "importPath": "phidata.phi.app.db_app",
        "description": "phidata.phi.app.db_app",
        "peekOfCode": "class DbApp(AppBase):\n    db_user: Optional[str] = None\n    db_password: Optional[str] = None\n    db_database: Optional[str] = None\n    db_driver: Optional[str] = None\n    def get_db_user(self) -> Optional[str]:\n        return self.db_user or self.get_secret_from_file(\"DB_USER\")\n    def get_db_password(self) -> Optional[str]:\n        return self.db_password or self.get_secret_from_file(\"DB_PASSWORD\")\n    def get_db_database(self) -> Optional[str]:",
        "detail": "phidata.phi.app.db_app",
        "documentation": {}
    },
    {
        "label": "AppGroup",
        "kind": 6,
        "importPath": "phidata.phi.app.group",
        "description": "phidata.phi.app.group",
        "peekOfCode": "class AppGroup(BaseModel):\n    \"\"\"AppGroup is a collection of Apps\"\"\"\n    name: Optional[str] = None\n    enabled: bool = True\n    apps: Optional[List[AppBase]] = None\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n    def get_apps(self) -> List[AppBase]:\n        if self.enabled and self.apps is not None:\n            for app in self.apps:\n                if app.group is None and self.name is not None:",
        "detail": "phidata.phi.app.group",
        "documentation": {}
    },
    {
        "label": "File",
        "kind": 6,
        "importPath": "phidata.phi.assistant.openai.file.file",
        "description": "phidata.phi.assistant.openai.file.file",
        "peekOfCode": "class File(BaseModel):\n    # -*- File settings\n    name: Optional[str] = None\n    # File id which can be referenced in API endpoints.\n    id: Optional[str] = None\n    # The object type, populated by the API. Always file.\n    object: Optional[str] = None\n    # The size of the file, in bytes.\n    bytes: Optional[int] = None\n    # The name of the file.",
        "detail": "phidata.phi.assistant.openai.file.file",
        "documentation": {}
    },
    {
        "label": "LocalFile",
        "kind": 6,
        "importPath": "phidata.phi.assistant.openai.file.local",
        "description": "phidata.phi.assistant.openai.file.local",
        "peekOfCode": "class LocalFile(File):\n    path: Union[str, Path]\n    @property\n    def filepath(self) -> Path:\n        if isinstance(self.path, str):\n            return Path(self.path)\n        return self.path\n    def get_filename(self) -> Optional[str]:\n        return self.filepath.name or self.filename\n    def read(self) -> Any:",
        "detail": "phidata.phi.assistant.openai.file.local",
        "documentation": {}
    },
    {
        "label": "UrlFile",
        "kind": 6,
        "importPath": "phidata.phi.assistant.openai.file.url",
        "description": "phidata.phi.assistant.openai.file.url",
        "peekOfCode": "class UrlFile(File):\n    url: str\n    # Manually provide a filename\n    name: Optional[str] = None\n    def get_filename(self) -> Optional[str]:\n        return self.name or self.url.split(\"/\")[-1] or self.filename\n    def read(self) -> Any:\n        try:\n            import httpx\n        except ImportError:",
        "detail": "phidata.phi.assistant.openai.file.url",
        "documentation": {}
    },
    {
        "label": "OpenAIAssistant",
        "kind": 6,
        "importPath": "phidata.phi.assistant.openai.assistant",
        "description": "phidata.phi.assistant.openai.assistant",
        "peekOfCode": "class OpenAIAssistant(BaseModel):\n    # -*- LLM settings\n    model: str = \"gpt-4-1106-preview\"\n    openai: Optional[OpenAI] = None\n    # -*- OpenAIAssistant settings\n    # OpenAIAssistant id which can be referenced in API endpoints.\n    id: Optional[str] = None\n    # The object type, populated by the API. Always assistant.\n    object: Optional[str] = None\n    # The name of the assistant. The maximum length is 256 characters.",
        "detail": "phidata.phi.assistant.openai.assistant",
        "documentation": {}
    },
    {
        "label": "AssistantIdNotSet",
        "kind": 6,
        "importPath": "phidata.phi.assistant.openai.exceptions",
        "description": "phidata.phi.assistant.openai.exceptions",
        "peekOfCode": "class AssistantIdNotSet(Exception):\n    \"\"\"Exception raised when the assistant.id is not set.\"\"\"\n    pass\nclass ThreadIdNotSet(Exception):\n    \"\"\"Exception raised when the thread.id is not set.\"\"\"\n    pass\nclass MessageIdNotSet(Exception):\n    \"\"\"Exception raised when the message.id is not set.\"\"\"\n    pass\nclass RunIdNotSet(Exception):",
        "detail": "phidata.phi.assistant.openai.exceptions",
        "documentation": {}
    },
    {
        "label": "ThreadIdNotSet",
        "kind": 6,
        "importPath": "phidata.phi.assistant.openai.exceptions",
        "description": "phidata.phi.assistant.openai.exceptions",
        "peekOfCode": "class ThreadIdNotSet(Exception):\n    \"\"\"Exception raised when the thread.id is not set.\"\"\"\n    pass\nclass MessageIdNotSet(Exception):\n    \"\"\"Exception raised when the message.id is not set.\"\"\"\n    pass\nclass RunIdNotSet(Exception):\n    \"\"\"Exception raised when the run.id is not set.\"\"\"\n    pass\nclass FileIdNotSet(Exception):",
        "detail": "phidata.phi.assistant.openai.exceptions",
        "documentation": {}
    },
    {
        "label": "MessageIdNotSet",
        "kind": 6,
        "importPath": "phidata.phi.assistant.openai.exceptions",
        "description": "phidata.phi.assistant.openai.exceptions",
        "peekOfCode": "class MessageIdNotSet(Exception):\n    \"\"\"Exception raised when the message.id is not set.\"\"\"\n    pass\nclass RunIdNotSet(Exception):\n    \"\"\"Exception raised when the run.id is not set.\"\"\"\n    pass\nclass FileIdNotSet(Exception):\n    \"\"\"Exception raised when the file.id is not set.\"\"\"\n    pass",
        "detail": "phidata.phi.assistant.openai.exceptions",
        "documentation": {}
    },
    {
        "label": "RunIdNotSet",
        "kind": 6,
        "importPath": "phidata.phi.assistant.openai.exceptions",
        "description": "phidata.phi.assistant.openai.exceptions",
        "peekOfCode": "class RunIdNotSet(Exception):\n    \"\"\"Exception raised when the run.id is not set.\"\"\"\n    pass\nclass FileIdNotSet(Exception):\n    \"\"\"Exception raised when the file.id is not set.\"\"\"\n    pass",
        "detail": "phidata.phi.assistant.openai.exceptions",
        "documentation": {}
    },
    {
        "label": "FileIdNotSet",
        "kind": 6,
        "importPath": "phidata.phi.assistant.openai.exceptions",
        "description": "phidata.phi.assistant.openai.exceptions",
        "peekOfCode": "class FileIdNotSet(Exception):\n    \"\"\"Exception raised when the file.id is not set.\"\"\"\n    pass",
        "detail": "phidata.phi.assistant.openai.exceptions",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "phidata.phi.assistant.openai.message",
        "description": "phidata.phi.assistant.openai.message",
        "peekOfCode": "class Message(BaseModel):\n    # -*- Message settings\n    # Message id which can be referenced in API endpoints.\n    id: Optional[str] = None\n    # The object type, populated by the API. Always thread.message.\n    object: Optional[str] = None\n    # The entity that produced the message. One of user or assistant.\n    role: Optional[Literal[\"user\", \"assistant\"]] = None\n    # The content of the message in array of text and/or images.\n    content: Optional[Union[List[Content], str]] = None",
        "detail": "phidata.phi.assistant.openai.message",
        "documentation": {}
    },
    {
        "label": "AssistantRow",
        "kind": 6,
        "importPath": "phidata.phi.assistant.openai.row",
        "description": "phidata.phi.assistant.openai.row",
        "peekOfCode": "class AssistantRow(BaseModel):\n    \"\"\"Interface between OpenAIAssistant class and the database\"\"\"\n    # OpenAIAssistant id which can be referenced in API endpoints.\n    id: str\n    # The object type, which is always assistant.\n    object: str\n    # The name of the assistant. The maximum length is 256 characters.\n    name: Optional[str] = None\n    # The description of the assistant. The maximum length is 512 characters.\n    description: Optional[str] = None",
        "detail": "phidata.phi.assistant.openai.row",
        "documentation": {}
    },
    {
        "label": "Run",
        "kind": 6,
        "importPath": "phidata.phi.assistant.openai.run",
        "description": "phidata.phi.assistant.openai.run",
        "peekOfCode": "class Run(BaseModel):\n    # -*- Run settings\n    # Run id which can be referenced in API endpoints.\n    id: Optional[str] = None\n    # The object type, populated by the API. Always assistant.run.\n    object: Optional[str] = None\n    # The ID of the thread that was executed on as a part of this run.\n    thread_id: Optional[str] = None\n    # OpenAIAssistant used for this run\n    assistant: Optional[OpenAIAssistant] = None",
        "detail": "phidata.phi.assistant.openai.run",
        "documentation": {}
    },
    {
        "label": "Thread",
        "kind": 6,
        "importPath": "phidata.phi.assistant.openai.thread",
        "description": "phidata.phi.assistant.openai.thread",
        "peekOfCode": "class Thread(BaseModel):\n    # -*- Thread settings\n    # Thread id which can be referenced in API endpoints.\n    id: Optional[str] = None\n    # The object type, populated by the API. Always thread.\n    object: Optional[str] = None\n    # OpenAIAssistant used for this thread\n    assistant: Optional[OpenAIAssistant] = None\n    # The ID of the assistant for this thread.\n    assistant_id: Optional[str] = None",
        "detail": "phidata.phi.assistant.openai.thread",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "kind": 6,
        "importPath": "phidata.phi.assistant.assistant",
        "description": "phidata.phi.assistant.assistant",
        "peekOfCode": "class Assistant(BaseModel):\n    # -*- Assistant settings\n    # LLM to use for this Assistant\n    llm: Optional[LLM] = None\n    # Assistant introduction. This is added to the chat history when a run is started.\n    introduction: Optional[str] = None\n    # Assistant name\n    name: Optional[str] = None\n    # Metadata associated with this assistant\n    assistant_data: Optional[Dict[str, Any]] = None",
        "detail": "phidata.phi.assistant.assistant",
        "documentation": {}
    },
    {
        "label": "DuckDbAssistant",
        "kind": 6,
        "importPath": "phidata.phi.assistant.duckdb",
        "description": "phidata.phi.assistant.duckdb",
        "peekOfCode": "class DuckDbAssistant(Assistant):\n    name: str = \"DuckDbAssistant\"\n    semantic_model: Optional[str] = None\n    add_chat_history_to_messages: bool = True\n    num_history_messages: int = 6\n    followups: bool = False\n    read_tool_call_history: bool = True\n    db_path: Optional[str] = None\n    connection: Optional[duckdb.DuckDBPyConnection] = None\n    init_commands: Optional[List] = None",
        "detail": "phidata.phi.assistant.duckdb",
        "documentation": {}
    },
    {
        "label": "PythonAssistant",
        "kind": 6,
        "importPath": "phidata.phi.assistant.python",
        "description": "phidata.phi.assistant.python",
        "peekOfCode": "class PythonAssistant(Assistant):\n    name: str = \"PythonAssistant\"\n    files: Optional[List[File]] = None\n    file_information: Optional[str] = None\n    add_chat_history_to_messages: bool = True\n    num_history_messages: int = 6\n    charting_libraries: Optional[List[str]] = [\"plotly\", \"matplotlib\", \"seaborn\"]\n    followups: bool = False\n    read_tool_call_history: bool = True\n    base_dir: Optional[Path] = None",
        "detail": "phidata.phi.assistant.python",
        "documentation": {}
    },
    {
        "label": "AssistantRun",
        "kind": 6,
        "importPath": "phidata.phi.assistant.run",
        "description": "phidata.phi.assistant.run",
        "peekOfCode": "class AssistantRun(BaseModel):\n    \"\"\"Assistant Run that is stored in the database\"\"\"\n    # Assistant name\n    name: Optional[str] = None\n    # Run UUID\n    run_id: str\n    # Run name\n    run_name: Optional[str] = None\n    # ID of the user participating in this run\n    user_id: Optional[str] = None",
        "detail": "phidata.phi.assistant.run",
        "documentation": {}
    },
    {
        "label": "Django",
        "kind": 6,
        "importPath": "phidata.phi.aws.app.django.django",
        "description": "phidata.phi.aws.app.django.django",
        "peekOfCode": "class Django(AwsApp):\n    # -*- App Name\n    name: str = \"django\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/django\"\n    image_tag: str = \"4.2.2\"\n    command: Optional[Union[str, List[str]]] = \"python manage.py runserver 0.0.0.0:8000\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True",
        "detail": "phidata.phi.aws.app.django.django",
        "documentation": {}
    },
    {
        "label": "FastApi",
        "kind": 6,
        "importPath": "phidata.phi.aws.app.fastapi.fastapi",
        "description": "phidata.phi.aws.app.fastapi.fastapi",
        "peekOfCode": "class FastApi(AwsApp):\n    # -*- App Name\n    name: str = \"fastapi\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/fastapi\"\n    image_tag: str = \"0.104\"\n    command: Optional[Union[str, List[str]]] = \"uvicorn main:app --reload\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True",
        "detail": "phidata.phi.aws.app.fastapi.fastapi",
        "documentation": {}
    },
    {
        "label": "Jupyter",
        "kind": 6,
        "importPath": "phidata.phi.aws.app.jupyter.jupyter",
        "description": "phidata.phi.aws.app.jupyter.jupyter",
        "peekOfCode": "class Jupyter(AwsApp):\n    # -*- App Name\n    name: str = \"jupyter\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/jupyter\"\n    image_tag: str = \"4.0.5\"\n    command: Optional[Union[str, List[str]]] = \"jupyter lab\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True",
        "detail": "phidata.phi.aws.app.jupyter.jupyter",
        "documentation": {}
    },
    {
        "label": "Qdrant",
        "kind": 6,
        "importPath": "phidata.phi.aws.app.qdrant.qdrant",
        "description": "phidata.phi.aws.app.qdrant.qdrant",
        "peekOfCode": "class Qdrant(AwsApp):\n    # -*- App Name\n    name: str = \"qdrant\"\n    # -*- Image Configuration\n    image_name: str = \"qdrant/qdrant\"\n    image_tag: str = \"v1.3.1\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    # Port number on the container",
        "detail": "phidata.phi.aws.app.qdrant.qdrant",
        "documentation": {}
    },
    {
        "label": "Streamlit",
        "kind": 6,
        "importPath": "phidata.phi.aws.app.streamlit.streamlit",
        "description": "phidata.phi.aws.app.streamlit.streamlit",
        "peekOfCode": "class Streamlit(AwsApp):\n    # -*- App Name\n    name: str = \"streamlit\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/streamlit\"\n    image_tag: str = \"1.27\"\n    command: Optional[Union[str, List[str]]] = \"streamlit hello\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True",
        "detail": "phidata.phi.aws.app.streamlit.streamlit",
        "documentation": {}
    },
    {
        "label": "AwsApp",
        "kind": 6,
        "importPath": "phidata.phi.aws.app.base",
        "description": "phidata.phi.aws.app.base",
        "peekOfCode": "class AwsApp(AppBase):\n    # -*- Workspace Configuration\n    # Path to the workspace directory inside the container\n    workspace_dir_container_path: str = \"/usr/local/app\"\n    # -*- Networking Configuration\n    # List of subnets for the app: Type: Union[str, Subnet]\n    # Added to the load balancer, target group, and ECS service\n    subnets: Optional[List[Any]] = None\n    # -*- ECS Configuration\n    ecs_cluster: Optional[Any] = None",
        "detail": "phidata.phi.aws.app.base",
        "documentation": {}
    },
    {
        "label": "AwsBuildContext",
        "kind": 6,
        "importPath": "phidata.phi.aws.app.context",
        "description": "phidata.phi.aws.app.context",
        "peekOfCode": "class AwsBuildContext(BaseModel):\n    aws_region: Optional[str] = None\n    aws_profile: Optional[str] = None",
        "detail": "phidata.phi.aws.app.context",
        "documentation": {}
    },
    {
        "label": "CertificateSummary",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.acm.certificate",
        "description": "phidata.phi.aws.resource.acm.certificate",
        "peekOfCode": "class CertificateSummary(BaseModel):\n    CertificateArn: str\n    DomainName: Optional[str] = None\nclass AcmCertificate(AwsResource):\n    \"\"\"\n    You can use Amazon Web Services Certificate Manager (ACM) to manage SSL/TLS\n    certificates for your Amazon Web Services-based websites and applications.\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/acm.html\n    \"\"\"",
        "detail": "phidata.phi.aws.resource.acm.certificate",
        "documentation": {}
    },
    {
        "label": "AcmCertificate",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.acm.certificate",
        "description": "phidata.phi.aws.resource.acm.certificate",
        "peekOfCode": "class AcmCertificate(AwsResource):\n    \"\"\"\n    You can use Amazon Web Services Certificate Manager (ACM) to manage SSL/TLS\n    certificates for your Amazon Web Services-based websites and applications.\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/acm.html\n    \"\"\"\n    resource_type: Optional[str] = \"AcmCertificate\"\n    service_name: str = \"acm\"\n    # website base domain name, such as example.com",
        "detail": "phidata.phi.aws.resource.acm.certificate",
        "documentation": {}
    },
    {
        "label": "CloudFormationStack",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.cloudformation.stack",
        "description": "phidata.phi.aws.resource.cloudformation.stack",
        "peekOfCode": "class CloudFormationStack(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudformation.html#service-resource\n    \"\"\"\n    resource_type: Optional[str] = \"CloudFormationStack\"\n    service_name: str = \"cloudformation\"\n    # StackName: The name must be unique in the Region in which you are creating the stack.\n    name: str\n    # Location of file containing the template body.",
        "detail": "phidata.phi.aws.resource.cloudformation.stack",
        "documentation": {}
    },
    {
        "label": "InboundRule",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.ec2.security_group",
        "description": "phidata.phi.aws.resource.ec2.security_group",
        "peekOfCode": "class InboundRule(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2/client/authorize_security_group_ingress.html\n    \"\"\"\n    name: str = \"InboundRule\"\n    resource_type: Optional[str] = \"InboundRule\"\n    service_name: str = \"ec2\"\n    # What to enable ingress for.\n    # The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both.",
        "detail": "phidata.phi.aws.resource.ec2.security_group",
        "documentation": {}
    },
    {
        "label": "OutboundRule",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.ec2.security_group",
        "description": "phidata.phi.aws.resource.ec2.security_group",
        "peekOfCode": "class OutboundRule(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2/client/authorize_security_group_ingress.html\n    \"\"\"\n    name: str = \"OutboundRule\"\n    resource_type: Optional[str] = \"OutboundRule\"\n    service_name: str = \"ec2\"\n    # What to enable egress for.\n    # The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both.",
        "detail": "phidata.phi.aws.resource.ec2.security_group",
        "documentation": {}
    },
    {
        "label": "SecurityGroup",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.ec2.security_group",
        "description": "phidata.phi.aws.resource.ec2.security_group",
        "peekOfCode": "class SecurityGroup(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2/securitygroup/index.html\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2/client/create_security_group.html\n    \"\"\"\n    resource_type: Optional[str] = \"SecurityGroup\"\n    resource_type_list: List[str] = [\"sg\"]\n    service_name: str = \"ec2\"\n    # The name of the security group.",
        "detail": "phidata.phi.aws.resource.ec2.security_group",
        "documentation": {}
    },
    {
        "label": "get_my_ip",
        "kind": 2,
        "importPath": "phidata.phi.aws.resource.ec2.security_group",
        "description": "phidata.phi.aws.resource.ec2.security_group",
        "peekOfCode": "def get_my_ip() -> str:\n    \"\"\"Returns the network ip\"\"\"\n    import httpx\n    external_ip = httpx.get(\"https://checkip.amazonaws.com\").text.strip()\n    return f\"{external_ip}/32\"\nclass InboundRule(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2/client/authorize_security_group_ingress.html\n    \"\"\"",
        "detail": "phidata.phi.aws.resource.ec2.security_group",
        "documentation": {}
    },
    {
        "label": "Subnet",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.ec2.subnet",
        "description": "phidata.phi.aws.resource.ec2.subnet",
        "peekOfCode": "class Subnet(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#subnet\n    \"\"\"\n    name: str\n    resource_type: Optional[str] = \"Subnet\"\n    service_name: str = \"ec2\"\n    def get_availability_zone(self, aws_client: Optional[AwsApiClient] = None) -> Optional[str]:\n        # logger.debug(f\"Reading {self.get_resource_type()}: {self.get_resource_name()}\")",
        "detail": "phidata.phi.aws.resource.ec2.subnet",
        "documentation": {}
    },
    {
        "label": "get_vpc_id_from_subnet_ids",
        "kind": 2,
        "importPath": "phidata.phi.aws.resource.ec2.subnet",
        "description": "phidata.phi.aws.resource.ec2.subnet",
        "peekOfCode": "def get_vpc_id_from_subnet_ids(\n    subnet_ids: Optional[List[str]], aws_client: Optional[AwsApiClient] = None\n) -> Optional[str]:\n    if subnet_ids is None:\n        return None\n    # Get VPC ID from subnets\n    vpc_ids = set()\n    for subnet in subnet_ids:\n        _vpc = Subnet(name=subnet).get_vpc_id(aws_client)\n        vpc_ids.add(_vpc)",
        "detail": "phidata.phi.aws.resource.ec2.subnet",
        "documentation": {}
    },
    {
        "label": "EbsVolume",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.ec2.volume",
        "description": "phidata.phi.aws.resource.ec2.volume",
        "peekOfCode": "class EbsVolume(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#volume\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.create_volume\n    \"\"\"\n    resource_type: Optional[str] = \"EbsVolume\"\n    service_name: str = \"ec2\"\n    # The unique name to give to your volume.\n    name: str",
        "detail": "phidata.phi.aws.resource.ec2.volume",
        "documentation": {}
    },
    {
        "label": "EcsCluster",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.ecs.cluster",
        "description": "phidata.phi.aws.resource.ecs.cluster",
        "peekOfCode": "class EcsCluster(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html\n    \"\"\"\n    resource_type: Optional[str] = \"EcsCluster\"\n    service_name: str = \"ecs\"\n    # Name of the cluster.\n    name: str\n    # Name for the cluster.",
        "detail": "phidata.phi.aws.resource.ecs.cluster",
        "documentation": {}
    },
    {
        "label": "EcsContainer",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.ecs.container",
        "description": "phidata.phi.aws.resource.ecs.container",
        "peekOfCode": "class EcsContainer(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html\n    \"\"\"\n    resource_type: Optional[str] = \"EcsContainer\"\n    service_name: str = \"ecs\"\n    # The name of a container.\n    # If you're linking multiple containers together in a task definition, the name of one container can be entered in\n    # the links of another container to connect the containers.",
        "detail": "phidata.phi.aws.resource.ecs.container",
        "documentation": {}
    },
    {
        "label": "EcsService",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.ecs.service",
        "description": "phidata.phi.aws.resource.ecs.service",
        "peekOfCode": "class EcsService(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html\n    \"\"\"\n    resource_type: Optional[str] = \"Service\"\n    service_name: str = \"ecs\"\n    # Name for the service.\n    name: str\n    # Name for the service.",
        "detail": "phidata.phi.aws.resource.ecs.service",
        "documentation": {}
    },
    {
        "label": "EcsTaskDefinition",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.ecs.task_definition",
        "description": "phidata.phi.aws.resource.ecs.task_definition",
        "peekOfCode": "class EcsTaskDefinition(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs/client/register_task_definition.html\n    \"\"\"\n    resource_type: Optional[str] = \"TaskDefinition\"\n    service_name: str = \"ecs\"\n    # Name of the task definition.\n    # Used as task definition family.\n    name: str",
        "detail": "phidata.phi.aws.resource.ecs.task_definition",
        "documentation": {}
    },
    {
        "label": "EcsVolume",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.ecs.volume",
        "description": "phidata.phi.aws.resource.ecs.volume",
        "peekOfCode": "class EcsVolume(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html\n    \"\"\"\n    resource_type: Optional[str] = \"EcsVolume\"\n    service_name: str = \"ecs\"\n    name: str\n    host: Optional[Dict[str, Any]] = None\n    docker_volume_configuration: Optional[Dict[str, Any]] = None",
        "detail": "phidata.phi.aws.resource.ecs.volume",
        "documentation": {}
    },
    {
        "label": "EksAddon",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.eks.addon",
        "description": "phidata.phi.aws.resource.eks.addon",
        "peekOfCode": "class EksAddon(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/eks.html\n    \"\"\"\n    resource_type: Optional[str] = \"EksAddon\"\n    service_name: str = \"eks\"\n    # Addon name\n    name: str\n    # EKS cluster name",
        "detail": "phidata.phi.aws.resource.eks.addon",
        "documentation": {}
    },
    {
        "label": "EksCluster",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.eks.cluster",
        "description": "phidata.phi.aws.resource.eks.cluster",
        "peekOfCode": "class EksCluster(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/eks.html\n    \"\"\"\n    resource_type: Optional[str] = \"EksCluster\"\n    service_name: str = \"eks\"\n    # The unique name to give to your cluster.\n    name: str\n    # version: The desired Kubernetes version for your cluster.",
        "detail": "phidata.phi.aws.resource.eks.cluster",
        "documentation": {}
    },
    {
        "label": "EksFargateProfile",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.eks.fargate_profile",
        "description": "phidata.phi.aws.resource.eks.fargate_profile",
        "peekOfCode": "class EksFargateProfile(AwsResource):\n    \"\"\"\n    The Fargate profile allows an administrator to declare which pods run on Fargate and specify which pods\n    run on which Fargate profile. This declaration is done through the profile’s selectors.\n    Each profile can have up to five selectors that contain a namespace and labels.\n    A namespace is required for every selector. The label field consists of multiple optional key-value pairs.\n    Pods that match the selectors are scheduled on Fargate.\n    If a to-be-scheduled pod matches any of the selectors in the Fargate profile, then that pod is run on Fargate.\n    fargate_role:\n    When you create a Fargate profile, you must specify a pod execution role to use with the pods that are scheduled",
        "detail": "phidata.phi.aws.resource.eks.fargate_profile",
        "documentation": {}
    },
    {
        "label": "EksKubeconfig",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.eks.kubeconfig",
        "description": "phidata.phi.aws.resource.eks.kubeconfig",
        "peekOfCode": "class EksKubeconfig(AwsResource):\n    resource_type: Optional[str] = \"Kubeconfig\"\n    service_name: str = \"na\"\n    # Optional: kubeconfig name, used for filtering during phi ws up/down\n    name: str = \"kubeconfig\"\n    # Required: EksCluster to generate the kubeconfig for\n    eks_cluster: EksCluster\n    # Required: Path to kubeconfig file\n    kubeconfig_path: Path = Path.home().joinpath(\".kube\").joinpath(\"config\").resolve()\n    # Optional: cluster_name to use in kubeconfig, defaults to eks_cluster.name",
        "detail": "phidata.phi.aws.resource.eks.kubeconfig",
        "documentation": {}
    },
    {
        "label": "EksNodeGroup",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.eks.node_group",
        "description": "phidata.phi.aws.resource.eks.node_group",
        "peekOfCode": "class EksNodeGroup(AwsResource):\n    \"\"\"\n    An Amazon EKS managed node group is an Amazon EC2 Auto Scaling group and associated EC2\n    instances that are managed by Amazon Web Services for an Amazon EKS cluster.\n    An Auto Scaling group is a group of EC2 instances that are combined into one management unit.\n    When you set up an auto-scaling group, you specify a scaling policy and AWS will apply that policy to make sure\n    that a certain number of instances is automatically running in your group. If the number of instances drops below a\n    certain value, or if the load increases (depending on the policy),\n    then AWS will automatically spin up new instances for you.\n    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/eks.html",
        "detail": "phidata.phi.aws.resource.eks.node_group",
        "documentation": {}
    },
    {
        "label": "CacheCluster",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.elasticache.cluster",
        "description": "phidata.phi.aws.resource.elasticache.cluster",
        "peekOfCode": "class CacheCluster(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/elasticache.html\n    \"\"\"\n    resource_type: Optional[str] = \"CacheCluster\"\n    service_name: str = \"elasticache\"\n    # Name of the cluster.\n    name: str\n    # The node group (shard) identifier. This parameter is stored as a lowercase string.",
        "detail": "phidata.phi.aws.resource.elasticache.cluster",
        "documentation": {}
    },
    {
        "label": "CacheSubnetGroup",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.elasticache.subnet_group",
        "description": "phidata.phi.aws.resource.elasticache.subnet_group",
        "peekOfCode": "class CacheSubnetGroup(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/elasticache.html#ElastiCache.Client.create_cache_subnet_group\n    Creates a cache subnet group.\n    \"\"\"\n    resource_type: Optional[str] = \"CacheSubnetGroup\"\n    service_name: str = \"elasticache\"\n    # A name for the cache subnet group. This value is stored as a lowercase string.\n    # Constraints: Must contain no more than 255 alphanumeric characters or hyphens.",
        "detail": "phidata.phi.aws.resource.elasticache.subnet_group",
        "documentation": {}
    },
    {
        "label": "Listener",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.elb.listener",
        "description": "phidata.phi.aws.resource.elb.listener",
        "peekOfCode": "class Listener(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/elbv2/client/create_listener.html\n    \"\"\"\n    resource_type: Optional[str] = \"Listener\"\n    service_name: str = \"elbv2\"\n    # Name of the Listener\n    name: str\n    load_balancer: Optional[LoadBalancer] = None",
        "detail": "phidata.phi.aws.resource.elb.listener",
        "documentation": {}
    },
    {
        "label": "LoadBalancer",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.elb.load_balancer",
        "description": "phidata.phi.aws.resource.elb.load_balancer",
        "peekOfCode": "class LoadBalancer(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/elbv2.html\n    \"\"\"\n    resource_type: Optional[str] = \"LoadBalancer\"\n    service_name: str = \"elbv2\"\n    # Name of the Load Balancer.\n    name: str\n    subnets: Optional[List[Union[str, Subnet]]] = None",
        "detail": "phidata.phi.aws.resource.elb.load_balancer",
        "documentation": {}
    },
    {
        "label": "TargetGroup",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.elb.target_group",
        "description": "phidata.phi.aws.resource.elb.target_group",
        "peekOfCode": "class TargetGroup(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/elbv2/client/create_target_group.html\n    \"\"\"\n    resource_type: Optional[str] = \"TargetGroup\"\n    service_name: str = \"elbv2\"\n    # Name of the Target Group\n    name: str\n    protocol: Optional[str] = None",
        "detail": "phidata.phi.aws.resource.elb.target_group",
        "documentation": {}
    },
    {
        "label": "EmrCluster",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.emr.cluster",
        "description": "phidata.phi.aws.resource.emr.cluster",
        "peekOfCode": "class EmrCluster(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/emr.html\n    \"\"\"\n    resource_type: Optional[str] = \"EmrCluster\"\n    service_name: str = \"emr\"\n    # Name of the cluster.\n    name: str\n    # The location in Amazon S3 to write the log files of the job flow.",
        "detail": "phidata.phi.aws.resource.emr.cluster",
        "documentation": {}
    },
    {
        "label": "GlueS3Target",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.glue.crawler",
        "description": "phidata.phi.aws.resource.glue.crawler",
        "peekOfCode": "class GlueS3Target(AwsResource):\n    # The directory path in the S3 bucket to target\n    dir: str = \"\"\n    # The s3 bucket to target\n    bucket: S3Bucket\n    # A list of glob patterns used to exclude from the crawl.\n    # For more information, see https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\n    exclusions: Optional[List[str]] = None\n    # The name of a connection which allows a job or crawler to access data in Amazon S3 within an\n    # Amazon Virtual Private Cloud environment (Amazon VPC).",
        "detail": "phidata.phi.aws.resource.glue.crawler",
        "documentation": {}
    },
    {
        "label": "GlueCrawler",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.glue.crawler",
        "description": "phidata.phi.aws.resource.glue.crawler",
        "peekOfCode": "class GlueCrawler(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/glue.html\n    \"\"\"\n    resource_type: Optional[str] = \"GlueCrawler\"\n    service_name: str = \"glue\"\n    # Name of the crawler.\n    name: str\n    # The IAM role for the crawler",
        "detail": "phidata.phi.aws.resource.glue.crawler",
        "documentation": {}
    },
    {
        "label": "IamPolicy",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.iam.policy",
        "description": "phidata.phi.aws.resource.iam.policy",
        "peekOfCode": "class IamPolicy(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iam.html#policy\n    \"\"\"\n    resource_type: Optional[str] = \"IamPolicy\"\n    service_name: str = \"iam\"\n    # PolicyName\n    # The friendly name of the policy.\n    name: str",
        "detail": "phidata.phi.aws.resource.iam.policy",
        "documentation": {}
    },
    {
        "label": "IamRole",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.iam.role",
        "description": "phidata.phi.aws.resource.iam.role",
        "peekOfCode": "class IamRole(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iam.html#service-resource\n    \"\"\"\n    resource_type: Optional[str] = \"IamRole\"\n    service_name: str = \"iam\"\n    # RoleName: The name of the role to create.\n    name: str\n    # The trust relationship policy document that grants an entity permission to assume the role.",
        "detail": "phidata.phi.aws.resource.iam.role",
        "documentation": {}
    },
    {
        "label": "DbCluster",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.rds.db_cluster",
        "description": "phidata.phi.aws.resource.rds.db_cluster",
        "peekOfCode": "class DbCluster(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/rds.html\n    \"\"\"\n    resource_type: Optional[str] = \"DbCluster\"\n    service_name: str = \"rds\"\n    # Name of the cluster.\n    name: str\n    # The name of the database engine to be used for this DB cluster.",
        "detail": "phidata.phi.aws.resource.rds.db_cluster",
        "documentation": {}
    },
    {
        "label": "DbInstance",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.rds.db_instance",
        "description": "phidata.phi.aws.resource.rds.db_instance",
        "peekOfCode": "class DbInstance(AwsResource):\n    \"\"\"\n    The DBInstance can be an RDS DB instance, or it can be a DB instance in an Aurora DB cluster.\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/rds.html\n    \"\"\"\n    resource_type: Optional[str] = \"DbInstance\"\n    service_name: str = \"rds\"\n    # Name of the db instance.\n    name: str",
        "detail": "phidata.phi.aws.resource.rds.db_instance",
        "documentation": {}
    },
    {
        "label": "DbSubnetGroup",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.rds.db_subnet_group",
        "description": "phidata.phi.aws.resource.rds.db_subnet_group",
        "peekOfCode": "class DbSubnetGroup(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/rds.html#RDS.Client.create_db_subnet_group\n    Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least\n    two AZs in the Amazon Web Services Region.\n    \"\"\"\n    resource_type: Optional[str] = \"DbSubnetGroup\"\n    service_name: str = \"rds\"\n    # The name for the DB subnet group. This value is stored as a lowercase string.",
        "detail": "phidata.phi.aws.resource.rds.db_subnet_group",
        "documentation": {}
    },
    {
        "label": "S3Bucket",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.s3.bucket",
        "description": "phidata.phi.aws.resource.s3.bucket",
        "peekOfCode": "class S3Bucket(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#service-resource\n    \"\"\"\n    resource_type: str = \"s3\"\n    service_name: str = \"s3\"\n    # Name of the bucket\n    name: str\n    # The canned ACL to apply to the bucket.",
        "detail": "phidata.phi.aws.resource.s3.bucket",
        "documentation": {}
    },
    {
        "label": "S3Object",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.s3.object",
        "description": "phidata.phi.aws.resource.s3.object",
        "peekOfCode": "class S3Object(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/object/index.html\n    \"\"\"\n    resource_type: str = \"s3\"\n    service_name: str = \"s3\"\n    # The Object’s bucket_name identifier. This must be set.\n    bucket_name: str\n    # The Object’s key identifier. This must be set.",
        "detail": "phidata.phi.aws.resource.s3.object",
        "documentation": {}
    },
    {
        "label": "SecretsManager",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.secret.manager",
        "description": "phidata.phi.aws.resource.secret.manager",
        "peekOfCode": "class SecretsManager(AwsResource):\n    \"\"\"\n    Reference:\n    - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/secretsmanager.html\n    \"\"\"\n    resource_type: Optional[str] = \"Secret\"\n    service_name: str = \"secretsmanager\"\n    # The name of the secret.\n    name: str\n    client_request_token: Optional[str] = None",
        "detail": "phidata.phi.aws.resource.secret.manager",
        "documentation": {}
    },
    {
        "label": "read_secrets",
        "kind": 2,
        "importPath": "phidata.phi.aws.resource.secret.reader",
        "description": "phidata.phi.aws.resource.secret.reader",
        "peekOfCode": "def read_secrets(\n    secrets: Union[SecretsManager, List[SecretsManager]],\n    aws_client: Optional[AwsApiClient] = None,\n) -> Dict[str, Any]:\n    secret_dict: Dict[str, str] = {}\n    if secrets is not None:\n        if isinstance(secrets, SecretsManager):\n            _secret_dict = secrets.get_secrets_as_dict(aws_client=aws_client)\n            if _secret_dict is not None and isinstance(_secret_dict, dict):\n                secret_dict.update(_secret_dict)",
        "detail": "phidata.phi.aws.resource.secret.reader",
        "documentation": {}
    },
    {
        "label": "AwsResource",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.base",
        "description": "phidata.phi.aws.resource.base",
        "peekOfCode": "class AwsResource(ResourceBase):\n    service_name: str\n    service_client: Optional[Any] = None\n    service_resource: Optional[Any] = None\n    aws_region: Optional[str] = None\n    aws_profile: Optional[str] = None\n    aws_client: Optional[AwsApiClient] = None\n    def get_aws_region(self) -> Optional[str]:\n        # Priority 1: Use aws_region from resource\n        if self.aws_region:",
        "detail": "phidata.phi.aws.resource.base",
        "documentation": {}
    },
    {
        "label": "AwsReference",
        "kind": 6,
        "importPath": "phidata.phi.aws.resource.reference",
        "description": "phidata.phi.aws.resource.reference",
        "peekOfCode": "class AwsReference:\n    def __init__(self, reference):\n        self.reference = reference\n    def get_reference(self, aws_client: Optional[AwsApiClient] = None):\n        return self.reference(aws_client=aws_client)",
        "detail": "phidata.phi.aws.resource.reference",
        "documentation": {}
    },
    {
        "label": "AwsResourceType",
        "kind": 5,
        "importPath": "phidata.phi.aws.resource.types",
        "description": "phidata.phi.aws.resource.types",
        "peekOfCode": "AwsResourceType = Union[\n    AcmCertificate,\n    CloudFormationStack,\n    EbsVolume,\n    EksCluster,\n    EksKubeconfig,\n    EksFargateProfile,\n    EksNodeGroup,\n    IamRole,\n    IamPolicy,",
        "detail": "phidata.phi.aws.resource.types",
        "documentation": {}
    },
    {
        "label": "AwsApiClient",
        "kind": 6,
        "importPath": "phidata.phi.aws.api_client",
        "description": "phidata.phi.aws.api_client",
        "peekOfCode": "class AwsApiClient:\n    def __init__(\n        self,\n        aws_region: Optional[str] = None,\n        aws_profile: Optional[str] = None,\n    ):\n        super().__init__()\n        self.aws_region: Optional[str] = aws_region\n        self.aws_profile: Optional[str] = aws_profile\n        # aws boto3 session",
        "detail": "phidata.phi.aws.api_client",
        "documentation": {}
    },
    {
        "label": "AwsResources",
        "kind": 6,
        "importPath": "phidata.phi.aws.resources",
        "description": "phidata.phi.aws.resources",
        "peekOfCode": "class AwsResources(InfraResources):\n    apps: Optional[List[Union[AwsApp, AppGroup]]] = None\n    resources: Optional[List[Union[AwsResource, ResourceGroup]]] = None\n    aws_region: Optional[str] = None\n    aws_profile: Optional[str] = None\n    # -*- Cached Data\n    _api_client: Optional[AwsApiClient] = None\n    def get_aws_region(self) -> Optional[str]:\n        # Priority 1: Use aws_region from ResourceGroup (or cached value)\n        if self.aws_region:",
        "detail": "phidata.phi.aws.resources",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "phidata.phi.cli.k.k_cli",
        "description": "phidata.phi.cli.k.k_cli",
        "peekOfCode": "def save(\n    resource_filter: Optional[str] = typer.Argument(\n        None,\n        help=\"Resource filter. Format - ENV:GROUP:NAME:TYPE\",\n    ),\n    env_filter: Optional[str] = typer.Option(None, \"-e\", \"--env\", metavar=\"\", help=\"Filter the environment to deploy.\"),\n    group_filter: Optional[str] = typer.Option(\n        None, \"-g\", \"--group\", metavar=\"\", help=\"Filter resources using group name.\"\n    ),\n    name_filter: Optional[str] = typer.Option(None, \"-n\", \"--name\", metavar=\"\", help=\"Filter resource using name.\"),",
        "detail": "phidata.phi.cli.k.k_cli",
        "documentation": {}
    },
    {
        "label": "k_cli",
        "kind": 5,
        "importPath": "phidata.phi.cli.k.k_cli",
        "description": "phidata.phi.cli.k.k_cli",
        "peekOfCode": "k_cli = typer.Typer(\n    name=\"k\",\n    short_help=\"Manage kubernetes resources\",\n    help=\"\"\"\\b\nUse `phi k [COMMAND]` to save, get, update kubernetes resources.\nRun `phi k [COMMAND] --help` for more info.\n\"\"\",\n    no_args_is_help=True,\n    add_completion=False,\n    invoke_without_command=True,",
        "detail": "phidata.phi.cli.k.k_cli",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "phidata.phi.cli.ws.ws_cli",
        "description": "phidata.phi.cli.ws.ws_cli",
        "peekOfCode": "def create(\n    name: Optional[str] = typer.Option(\n        None,\n        \"-n\",\n        \"--name\",\n        help=\"Name of the new workspace.\",\n        show_default=False,\n    ),\n    template: Optional[str] = typer.Option(\n        None,",
        "detail": "phidata.phi.cli.ws.ws_cli",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "phidata.phi.cli.ws.ws_cli",
        "description": "phidata.phi.cli.ws.ws_cli",
        "peekOfCode": "def setup(\n    path: Optional[str] = typer.Argument(\n        None,\n        help=\"Path to workspace [default: current directory]\",\n        show_default=False,\n    ),\n    print_debug_log: bool = typer.Option(\n        False,\n        \"-d\",\n        \"--debug\",",
        "detail": "phidata.phi.cli.ws.ws_cli",
        "documentation": {}
    },
    {
        "label": "up",
        "kind": 2,
        "importPath": "phidata.phi.cli.ws.ws_cli",
        "description": "phidata.phi.cli.ws.ws_cli",
        "peekOfCode": "def up(\n    resource_filter: Optional[str] = typer.Argument(\n        None,\n        help=\"Resource filter. Format - ENV:INFRA:GROUP:NAME:TYPE\",\n    ),\n    env_filter: Optional[str] = typer.Option(None, \"-e\", \"--env\", metavar=\"\", help=\"Filter the environment to deploy.\"),\n    infra_filter: Optional[str] = typer.Option(None, \"-i\", \"--infra\", metavar=\"\", help=\"Filter the infra to deploy.\"),\n    group_filter: Optional[str] = typer.Option(\n        None, \"-g\", \"--group\", metavar=\"\", help=\"Filter resources using group name.\"\n    ),",
        "detail": "phidata.phi.cli.ws.ws_cli",
        "documentation": {}
    },
    {
        "label": "down",
        "kind": 2,
        "importPath": "phidata.phi.cli.ws.ws_cli",
        "description": "phidata.phi.cli.ws.ws_cli",
        "peekOfCode": "def down(\n    resource_filter: Optional[str] = typer.Argument(\n        None,\n        help=\"Resource filter. Format - ENV:INFRA:GROUP:NAME:TYPE\",\n    ),\n    env_filter: str = typer.Option(None, \"-e\", \"--env\", metavar=\"\", help=\"Filter the environment to shut down.\"),\n    infra_filter: Optional[str] = typer.Option(\n        None, \"-i\", \"--infra\", metavar=\"\", help=\"Filter the infra to shut down.\"\n    ),\n    group_filter: Optional[str] = typer.Option(",
        "detail": "phidata.phi.cli.ws.ws_cli",
        "documentation": {}
    },
    {
        "label": "patch",
        "kind": 2,
        "importPath": "phidata.phi.cli.ws.ws_cli",
        "description": "phidata.phi.cli.ws.ws_cli",
        "peekOfCode": "def patch(\n    resource_filter: Optional[str] = typer.Argument(\n        None,\n        help=\"Resource filter. Format - ENV:INFRA:GROUP:NAME:TYPE\",\n    ),\n    env_filter: str = typer.Option(None, \"-e\", \"--env\", metavar=\"\", help=\"Filter the environment to patch.\"),\n    infra_filter: Optional[str] = typer.Option(None, \"-i\", \"--infra\", metavar=\"\", help=\"Filter the infra to patch.\"),\n    group_filter: Optional[str] = typer.Option(\n        None, \"-g\", \"--group\", metavar=\"\", help=\"Filter resources using group name.\"\n    ),",
        "detail": "phidata.phi.cli.ws.ws_cli",
        "documentation": {}
    },
    {
        "label": "restart",
        "kind": 2,
        "importPath": "phidata.phi.cli.ws.ws_cli",
        "description": "phidata.phi.cli.ws.ws_cli",
        "peekOfCode": "def restart(\n    resource_filter: Optional[str] = typer.Argument(\n        None,\n        help=\"Resource filter. Format - ENV:INFRA:GROUP:NAME:TYPE\",\n    ),\n    env_filter: str = typer.Option(None, \"-e\", \"--env\", metavar=\"\", help=\"Filter the environment to restart.\"),\n    infra_filter: Optional[str] = typer.Option(None, \"-i\", \"--infra\", metavar=\"\", help=\"Filter the infra to restart.\"),\n    group_filter: Optional[str] = typer.Option(\n        None, \"-g\", \"--group\", metavar=\"\", help=\"Filter resources using group name.\"\n    ),",
        "detail": "phidata.phi.cli.ws.ws_cli",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 2,
        "importPath": "phidata.phi.cli.ws.ws_cli",
        "description": "phidata.phi.cli.ws.ws_cli",
        "peekOfCode": "def config(\n    print_debug_log: bool = typer.Option(\n        False,\n        \"-d\",\n        \"--debug\",\n        help=\"Print debug logs.\",\n    ),\n):\n    \"\"\"\\b\n    Prints the active workspace config",
        "detail": "phidata.phi.cli.ws.ws_cli",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "phidata.phi.cli.ws.ws_cli",
        "description": "phidata.phi.cli.ws.ws_cli",
        "peekOfCode": "def delete(\n    ws_name: Optional[str] = typer.Option(None, \"-ws\", help=\"Name of the workspace to delete\"),\n    all_workspaces: bool = typer.Option(\n        False,\n        \"-a\",\n        \"--all\",\n        help=\"Delete all workspaces from phidata\",\n    ),\n    print_debug_log: bool = typer.Option(\n        False,",
        "detail": "phidata.phi.cli.ws.ws_cli",
        "documentation": {}
    },
    {
        "label": "ws_cli",
        "kind": 5,
        "importPath": "phidata.phi.cli.ws.ws_cli",
        "description": "phidata.phi.cli.ws.ws_cli",
        "peekOfCode": "ws_cli = typer.Typer(\n    name=\"ws\",\n    short_help=\"Manage workspaces\",\n    help=\"\"\"\\b\nUse `phi ws [COMMAND]` to create, setup, start or stop your workspace.\nRun `phi ws [COMMAND] --help` for more info.\n\"\"\",\n    no_args_is_help=True,\n    add_completion=False,\n    invoke_without_command=True,",
        "detail": "phidata.phi.cli.ws.ws_cli",
        "documentation": {}
    },
    {
        "label": "CliAuthRequestHandler",
        "kind": 6,
        "importPath": "phidata.phi.cli.auth_server",
        "description": "phidata.phi.cli.auth_server",
        "peekOfCode": "class CliAuthRequestHandler(BaseHTTPRequestHandler):\n    \"\"\"Request Handler to accept the CLI auth token after the web based auth flow.\n    References:\n        https://medium.com/@hasinthaindrajee/browser-sso-for-cli-applications-b0be743fa656\n        https://gist.github.com/mdonkers/63e115cc0c79b4f6b8b3a6b797e485c7\n    TODO:\n        * Fix the header and limit to only localhost or phidata.com\n    \"\"\"\n    def _set_response(self):\n        self.send_response(200)",
        "detail": "phidata.phi.cli.auth_server",
        "documentation": {}
    },
    {
        "label": "CliAuthServer",
        "kind": 6,
        "importPath": "phidata.phi.cli.auth_server",
        "description": "phidata.phi.cli.auth_server",
        "peekOfCode": "class CliAuthServer:\n    \"\"\"\n    Source: https://stackoverflow.com/a/38196725/10953921\n    \"\"\"\n    def __init__(self, port: int = 9191):\n        import threading\n        self._server = HTTPServer((\"\", port), CliAuthRequestHandler)\n        self._thread = threading.Thread(target=self.run)\n        self._thread.daemon = True\n        self._server.running = False  # type: ignore",
        "detail": "phidata.phi.cli.auth_server",
        "documentation": {}
    },
    {
        "label": "check_port",
        "kind": 2,
        "importPath": "phidata.phi.cli.auth_server",
        "description": "phidata.phi.cli.auth_server",
        "peekOfCode": "def check_port(port: int):\n    import socket\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        try:\n            return s.connect_ex((\"localhost\", port)) == 0\n        except Exception as e:\n            print(f\"Error occurred: {e}\")\n            return False\ndef get_port_for_auth_server():\n    starting_port = 9191",
        "detail": "phidata.phi.cli.auth_server",
        "documentation": {}
    },
    {
        "label": "get_port_for_auth_server",
        "kind": 2,
        "importPath": "phidata.phi.cli.auth_server",
        "description": "phidata.phi.cli.auth_server",
        "peekOfCode": "def get_port_for_auth_server():\n    starting_port = 9191\n    for port in range(starting_port, starting_port + 100):\n        if not check_port(port):\n            return port\ndef get_auth_token_from_web_flow(port: int) -> Optional[str]:\n    \"\"\"\n    GET request: curl http://localhost:9191\n    POST request: curl -d \"foo=bar&bin=baz\" http://localhost:9191\n    \"\"\"",
        "detail": "phidata.phi.cli.auth_server",
        "documentation": {}
    },
    {
        "label": "get_auth_token_from_web_flow",
        "kind": 2,
        "importPath": "phidata.phi.cli.auth_server",
        "description": "phidata.phi.cli.auth_server",
        "peekOfCode": "def get_auth_token_from_web_flow(port: int) -> Optional[str]:\n    \"\"\"\n    GET request: curl http://localhost:9191\n    POST request: curl -d \"foo=bar&bin=baz\" http://localhost:9191\n    \"\"\"\n    import json\n    server = CliAuthServer(port)\n    server.run()\n    if phi_cli_settings.tmp_token_path.exists() and phi_cli_settings.tmp_token_path.is_file():\n        auth_token_str = phi_cli_settings.tmp_token_path.read_text()",
        "detail": "phidata.phi.cli.auth_server",
        "documentation": {}
    },
    {
        "label": "PhiCliConfig",
        "kind": 6,
        "importPath": "phidata.phi.cli.config",
        "description": "phidata.phi.cli.config",
        "peekOfCode": "class PhiCliConfig:\n    \"\"\"The PhiCliConfig class manages user data for the phi cli\"\"\"\n    def __init__(\n        self,\n        user: Optional[UserSchema] = None,\n        active_ws_dir: Optional[str] = None,\n        ws_config_map: Optional[Dict[str, WorkspaceConfig]] = None,\n    ) -> None:\n        # Current user, populated after authenticating with the api\n        # To add a user, use the user setter",
        "detail": "phidata.phi.cli.config",
        "documentation": {}
    },
    {
        "label": "print_heading",
        "kind": 2,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "def print_heading(msg: str) -> None:\n    console.print(msg, style=heading_style)\ndef print_subheading(msg: str) -> None:\n    console.print(msg, style=subheading_style)\ndef print_horizontal_line() -> None:\n    console.rule()\ndef print_info(msg: str) -> None:\n    console.print(msg, style=info_style)\ndef log_config_not_available_msg() -> None:\n    logger.error(\"phi not initialized, please run `phi init`\")",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_subheading",
        "kind": 2,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "def print_subheading(msg: str) -> None:\n    console.print(msg, style=subheading_style)\ndef print_horizontal_line() -> None:\n    console.rule()\ndef print_info(msg: str) -> None:\n    console.print(msg, style=info_style)\ndef log_config_not_available_msg() -> None:\n    logger.error(\"phi not initialized, please run `phi init`\")\ndef log_active_workspace_not_available() -> None:\n    logger.error(\"No active workspace. You can:\")",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_horizontal_line",
        "kind": 2,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "def print_horizontal_line() -> None:\n    console.rule()\ndef print_info(msg: str) -> None:\n    console.print(msg, style=info_style)\ndef log_config_not_available_msg() -> None:\n    logger.error(\"phi not initialized, please run `phi init`\")\ndef log_active_workspace_not_available() -> None:\n    logger.error(\"No active workspace. You can:\")\n    logger.error(\"- Run `phi ws create` to create a new workspace\")\n    logger.error(\"- OR Run `phi ws setup` from an existing directory to setup the workspace\")",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_info",
        "kind": 2,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "def print_info(msg: str) -> None:\n    console.print(msg, style=info_style)\ndef log_config_not_available_msg() -> None:\n    logger.error(\"phi not initialized, please run `phi init`\")\ndef log_active_workspace_not_available() -> None:\n    logger.error(\"No active workspace. You can:\")\n    logger.error(\"- Run `phi ws create` to create a new workspace\")\n    logger.error(\"- OR Run `phi ws setup` from an existing directory to setup the workspace\")\n    logger.error(\"- OR Set an existing workspace as active using `phi set [ws_name]`\")\ndef print_available_workspaces(avl_ws_list) -> None:",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "log_config_not_available_msg",
        "kind": 2,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "def log_config_not_available_msg() -> None:\n    logger.error(\"phi not initialized, please run `phi init`\")\ndef log_active_workspace_not_available() -> None:\n    logger.error(\"No active workspace. You can:\")\n    logger.error(\"- Run `phi ws create` to create a new workspace\")\n    logger.error(\"- OR Run `phi ws setup` from an existing directory to setup the workspace\")\n    logger.error(\"- OR Set an existing workspace as active using `phi set [ws_name]`\")\ndef print_available_workspaces(avl_ws_list) -> None:\n    avl_ws_names = [w.ws_root_path.stem for w in avl_ws_list] if avl_ws_list else []\n    print_info(\"Available Workspaces:\\n  - {}\".format(\"\\n  - \".join(avl_ws_names)))",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "log_active_workspace_not_available",
        "kind": 2,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "def log_active_workspace_not_available() -> None:\n    logger.error(\"No active workspace. You can:\")\n    logger.error(\"- Run `phi ws create` to create a new workspace\")\n    logger.error(\"- OR Run `phi ws setup` from an existing directory to setup the workspace\")\n    logger.error(\"- OR Set an existing workspace as active using `phi set [ws_name]`\")\ndef print_available_workspaces(avl_ws_list) -> None:\n    avl_ws_names = [w.ws_root_path.stem for w in avl_ws_list] if avl_ws_list else []\n    print_info(\"Available Workspaces:\\n  - {}\".format(\"\\n  - \".join(avl_ws_names)))\ndef log_phi_init_failed_msg() -> None:\n    logger.error(\"phi initialization failed, please try again\")",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "print_available_workspaces",
        "kind": 2,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "def print_available_workspaces(avl_ws_list) -> None:\n    avl_ws_names = [w.ws_root_path.stem for w in avl_ws_list] if avl_ws_list else []\n    print_info(\"Available Workspaces:\\n  - {}\".format(\"\\n  - \".join(avl_ws_names)))\ndef log_phi_init_failed_msg() -> None:\n    logger.error(\"phi initialization failed, please try again\")\ndef confirm_yes_no(question, default: str = \"yes\") -> bool:\n    \"\"\"Ask a yes/no question via raw_input().\n    \"question\" is a string that is presented to the user.\n    \"default\" is the presumed answer if the user just hits <Enter>.\n            It must be \"yes\" (the default), \"no\" or None (meaning",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "log_phi_init_failed_msg",
        "kind": 2,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "def log_phi_init_failed_msg() -> None:\n    logger.error(\"phi initialization failed, please try again\")\ndef confirm_yes_no(question, default: str = \"yes\") -> bool:\n    \"\"\"Ask a yes/no question via raw_input().\n    \"question\" is a string that is presented to the user.\n    \"default\" is the presumed answer if the user just hits <Enter>.\n            It must be \"yes\" (the default), \"no\" or None (meaning\n            an answer is required of the user).\n    The \"answer\" return value is True for \"yes\" or False for \"no\".\n    \"\"\"",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "confirm_yes_no",
        "kind": 2,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "def confirm_yes_no(question, default: str = \"yes\") -> bool:\n    \"\"\"Ask a yes/no question via raw_input().\n    \"question\" is a string that is presented to the user.\n    \"default\" is the presumed answer if the user just hits <Enter>.\n            It must be \"yes\" (the default), \"no\" or None (meaning\n            an answer is required of the user).\n    The \"answer\" return value is True for \"yes\" or False for \"no\".\n    \"\"\"\n    inp_to_result_map = {\"yes\": True, \"y\": True, \"ye\": True, \"no\": False, \"n\": False}\n    if default is None:",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "console = Console()\n######################################################\n## Styles\n# Standard Colors: https://rich.readthedocs.io/en/stable/appendix/colors.html#appendix-colors\n######################################################\nheading_style = Style(\n    color=\"green\",\n    bold=True,\n    underline=True,\n)",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "heading_style",
        "kind": 5,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "heading_style = Style(\n    color=\"green\",\n    bold=True,\n    underline=True,\n)\nsubheading_style = Style(\n    color=\"chartreuse3\",\n    bold=True,\n)\nsuccess_style = Style(color=\"chartreuse3\")",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "subheading_style",
        "kind": 5,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "subheading_style = Style(\n    color=\"chartreuse3\",\n    bold=True,\n)\nsuccess_style = Style(color=\"chartreuse3\")\nfail_style = Style(color=\"red\")\nerror_style = Style(color=\"red\")\ninfo_style = Style()\nwarn_style = Style(color=\"magenta\")\n######################################################",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "success_style",
        "kind": 5,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "success_style = Style(color=\"chartreuse3\")\nfail_style = Style(color=\"red\")\nerror_style = Style(color=\"red\")\ninfo_style = Style()\nwarn_style = Style(color=\"magenta\")\n######################################################\n## Print functions\n######################################################\ndef print_heading(msg: str) -> None:\n    console.print(msg, style=heading_style)",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "fail_style",
        "kind": 5,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "fail_style = Style(color=\"red\")\nerror_style = Style(color=\"red\")\ninfo_style = Style()\nwarn_style = Style(color=\"magenta\")\n######################################################\n## Print functions\n######################################################\ndef print_heading(msg: str) -> None:\n    console.print(msg, style=heading_style)\ndef print_subheading(msg: str) -> None:",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "error_style",
        "kind": 5,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "error_style = Style(color=\"red\")\ninfo_style = Style()\nwarn_style = Style(color=\"magenta\")\n######################################################\n## Print functions\n######################################################\ndef print_heading(msg: str) -> None:\n    console.print(msg, style=heading_style)\ndef print_subheading(msg: str) -> None:\n    console.print(msg, style=subheading_style)",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "info_style",
        "kind": 5,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "info_style = Style()\nwarn_style = Style(color=\"magenta\")\n######################################################\n## Print functions\n######################################################\ndef print_heading(msg: str) -> None:\n    console.print(msg, style=heading_style)\ndef print_subheading(msg: str) -> None:\n    console.print(msg, style=subheading_style)\ndef print_horizontal_line() -> None:",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "warn_style",
        "kind": 5,
        "importPath": "phidata.phi.cli.console",
        "description": "phidata.phi.cli.console",
        "peekOfCode": "warn_style = Style(color=\"magenta\")\n######################################################\n## Print functions\n######################################################\ndef print_heading(msg: str) -> None:\n    console.print(msg, style=heading_style)\ndef print_subheading(msg: str) -> None:\n    console.print(msg, style=subheading_style)\ndef print_horizontal_line() -> None:\n    console.rule()",
        "detail": "phidata.phi.cli.console",
        "documentation": {}
    },
    {
        "label": "save_auth_token",
        "kind": 2,
        "importPath": "phidata.phi.cli.credentials",
        "description": "phidata.phi.cli.credentials",
        "peekOfCode": "def save_auth_token(auth_token: str):\n    # logger.debug(f\"Storing {auth_token} to {str(phi_cli_settings.credentials_path)}\")\n    _data = {\"token\": auth_token}\n    write_json_file(phi_cli_settings.credentials_path, _data)\ndef read_auth_token() -> Optional[str]:\n    # logger.debug(f\"Reading token from {str(phi_cli_settings.credentials_path)}\")\n    _data: Dict = read_json_file(phi_cli_settings.credentials_path)  # type: ignore\n    if _data is None:\n        return None\n    try:",
        "detail": "phidata.phi.cli.credentials",
        "documentation": {}
    },
    {
        "label": "read_auth_token",
        "kind": 2,
        "importPath": "phidata.phi.cli.credentials",
        "description": "phidata.phi.cli.credentials",
        "peekOfCode": "def read_auth_token() -> Optional[str]:\n    # logger.debug(f\"Reading token from {str(phi_cli_settings.credentials_path)}\")\n    _data: Dict = read_json_file(phi_cli_settings.credentials_path)  # type: ignore\n    if _data is None:\n        return None\n    try:\n        return _data.get(\"token\")\n    except Exception:\n        pass\n    return None",
        "detail": "phidata.phi.cli.credentials",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "phidata.phi.cli.entrypoint",
        "description": "phidata.phi.cli.entrypoint",
        "peekOfCode": "def init(\n    reset: bool = typer.Option(False, \"--reset\", \"-r\", help=\"Reset phidata\", show_default=True),\n    print_debug_log: bool = typer.Option(\n        False,\n        \"-d\",\n        \"--debug\",\n        help=\"Print debug logs.\",\n    ),\n    login: bool = typer.Option(False, \"--login\", \"-l\", help=\"Login with phidata.com\", show_default=True),\n):",
        "detail": "phidata.phi.cli.entrypoint",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 2,
        "importPath": "phidata.phi.cli.entrypoint",
        "description": "phidata.phi.cli.entrypoint",
        "peekOfCode": "def reset(\n    print_debug_log: bool = typer.Option(\n        False,\n        \"-d\",\n        \"--debug\",\n        help=\"Print debug logs.\",\n    ),\n):\n    \"\"\"\n    \\b",
        "detail": "phidata.phi.cli.entrypoint",
        "documentation": {}
    },
    {
        "label": "auth",
        "kind": 2,
        "importPath": "phidata.phi.cli.entrypoint",
        "description": "phidata.phi.cli.entrypoint",
        "peekOfCode": "def auth(\n    print_debug_log: bool = typer.Option(\n        False,\n        \"-d\",\n        \"--debug\",\n        help=\"Print debug logs.\",\n    ),\n):\n    \"\"\"\n    \\b",
        "detail": "phidata.phi.cli.entrypoint",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "phidata.phi.cli.entrypoint",
        "description": "phidata.phi.cli.entrypoint",
        "peekOfCode": "def login(\n    print_debug_log: bool = typer.Option(\n        False,\n        \"-d\",\n        \"--debug\",\n        help=\"Print debug logs.\",\n    ),\n):\n    \"\"\"\n    \\b",
        "detail": "phidata.phi.cli.entrypoint",
        "documentation": {}
    },
    {
        "label": "ping",
        "kind": 2,
        "importPath": "phidata.phi.cli.entrypoint",
        "description": "phidata.phi.cli.entrypoint",
        "peekOfCode": "def ping(\n    print_debug_log: bool = typer.Option(\n        False,\n        \"-d\",\n        \"--debug\",\n        help=\"Print debug logs.\",\n    ),\n):\n    \"\"\"Ping the phidata servers and check if you are authenticated\"\"\"\n    if print_debug_log:",
        "detail": "phidata.phi.cli.entrypoint",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 2,
        "importPath": "phidata.phi.cli.entrypoint",
        "description": "phidata.phi.cli.entrypoint",
        "peekOfCode": "def config(\n    print_debug_log: bool = typer.Option(\n        False,\n        \"-d\",\n        \"--debug\",\n        help=\"Print debug logs.\",\n    ),\n    show_all: bool = typer.Option(\n        False,\n        \"-a\",",
        "detail": "phidata.phi.cli.entrypoint",
        "documentation": {}
    },
    {
        "label": "set",
        "kind": 2,
        "importPath": "phidata.phi.cli.entrypoint",
        "description": "phidata.phi.cli.entrypoint",
        "peekOfCode": "def set(\n    ws_name: str = typer.Option(None, \"-ws\", help=\"Active workspace name\"),\n    print_debug_log: bool = typer.Option(\n        False,\n        \"-d\",\n        \"--debug\",\n        help=\"Print debug logs.\",\n    ),\n):\n    \"\"\"",
        "detail": "phidata.phi.cli.entrypoint",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "phidata.phi.cli.entrypoint",
        "description": "phidata.phi.cli.entrypoint",
        "peekOfCode": "def start(\n    resources_file: str = typer.Argument(\n        \"resources.py\",\n        help=\"Path to workspace file.\",\n        show_default=False,\n    ),\n    env_filter: Optional[str] = typer.Option(None, \"-e\", \"--env\", metavar=\"\", help=\"Filter the environment to deploy\"),\n    infra_filter: Optional[str] = typer.Option(None, \"-i\", \"--infra\", metavar=\"\", help=\"Filter the infra to deploy.\"),\n    group_filter: Optional[str] = typer.Option(\n        None, \"-g\", \"--group\", metavar=\"\", help=\"Filter resources using group name.\"",
        "detail": "phidata.phi.cli.entrypoint",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 2,
        "importPath": "phidata.phi.cli.entrypoint",
        "description": "phidata.phi.cli.entrypoint",
        "peekOfCode": "def stop(\n    resources_file: str = typer.Argument(\n        \"resources.py\",\n        help=\"Path to workspace file.\",\n        show_default=False,\n    ),\n    env_filter: Optional[str] = typer.Option(None, \"-e\", \"--env\", metavar=\"\", help=\"Filter the environment to deploy\"),\n    infra_filter: Optional[str] = typer.Option(None, \"-i\", \"--infra\", metavar=\"\", help=\"Filter the infra to deploy.\"),\n    group_filter: Optional[str] = typer.Option(\n        None, \"-g\", \"--group\", metavar=\"\", help=\"Filter resources using group name.\"",
        "detail": "phidata.phi.cli.entrypoint",
        "documentation": {}
    },
    {
        "label": "patch",
        "kind": 2,
        "importPath": "phidata.phi.cli.entrypoint",
        "description": "phidata.phi.cli.entrypoint",
        "peekOfCode": "def patch(\n    resources_file: str = typer.Argument(\n        \"resources.py\",\n        help=\"Path to workspace file.\",\n        show_default=False,\n    ),\n    env_filter: Optional[str] = typer.Option(None, \"-e\", \"--env\", metavar=\"\", help=\"Filter the environment to deploy\"),\n    infra_filter: Optional[str] = typer.Option(None, \"-i\", \"--infra\", metavar=\"\", help=\"Filter the infra to deploy.\"),\n    config_filter: Optional[str] = typer.Option(None, \"-c\", \"--config\", metavar=\"\", help=\"Filter the config to deploy\"),\n    group_filter: Optional[str] = typer.Option(",
        "detail": "phidata.phi.cli.entrypoint",
        "documentation": {}
    },
    {
        "label": "restart",
        "kind": 2,
        "importPath": "phidata.phi.cli.entrypoint",
        "description": "phidata.phi.cli.entrypoint",
        "peekOfCode": "def restart(\n    resources_file: str = typer.Argument(\n        \"resources.py\",\n        help=\"Path to workspace file.\",\n        show_default=False,\n    ),\n    env_filter: Optional[str] = typer.Option(None, \"-e\", \"--env\", metavar=\"\", help=\"Filter the environment to deploy\"),\n    infra_filter: Optional[str] = typer.Option(None, \"-i\", \"--infra\", metavar=\"\", help=\"Filter the infra to deploy.\"),\n    group_filter: Optional[str] = typer.Option(\n        None, \"-g\", \"--group\", metavar=\"\", help=\"Filter resources using group name.\"",
        "detail": "phidata.phi.cli.entrypoint",
        "documentation": {}
    },
    {
        "label": "phi_cli",
        "kind": 5,
        "importPath": "phidata.phi.cli.entrypoint",
        "description": "phidata.phi.cli.entrypoint",
        "peekOfCode": "phi_cli = typer.Typer(\n    help=\"\"\"\\b\nPhidata is an AI toolkit for engineers.\n\\b\nUsage:\n1. Run `phi ws create` to create a new workspace\n2. Run `phi ws up` to start the workspace\n3. Run `phi ws down` to stop the workspace\n\"\"\",\n    no_args_is_help=True,",
        "detail": "phidata.phi.cli.entrypoint",
        "documentation": {}
    },
    {
        "label": "delete_phidata_conf",
        "kind": 2,
        "importPath": "phidata.phi.cli.operator",
        "description": "phidata.phi.cli.operator",
        "peekOfCode": "def delete_phidata_conf() -> None:\n    from phi.utils.filesystem import delete_from_fs\n    logger.debug(\"Removing existing Phidata configuration\")\n    delete_from_fs(PHI_CLI_DIR)\ndef authenticate_user() -> None:\n    \"\"\"Authenticate the user using credentials from phidata.com\n    Steps:\n    1. Authenticate the user by opening the phidata sign-in url\n        and the web-app will post an auth token to a mini http server\n        running on the auth_server_port.",
        "detail": "phidata.phi.cli.operator",
        "documentation": {}
    },
    {
        "label": "authenticate_user",
        "kind": 2,
        "importPath": "phidata.phi.cli.operator",
        "description": "phidata.phi.cli.operator",
        "peekOfCode": "def authenticate_user() -> None:\n    \"\"\"Authenticate the user using credentials from phidata.com\n    Steps:\n    1. Authenticate the user by opening the phidata sign-in url\n        and the web-app will post an auth token to a mini http server\n        running on the auth_server_port.\n    2. Using the auth_token, authenticate the CLI with api and\n        save the auth_token. This step is handled by authenticate_and_get_user()\n    3. After the user is authenticated update the PhiCliConfig.\n    \"\"\"",
        "detail": "phidata.phi.cli.operator",
        "documentation": {}
    },
    {
        "label": "initialize_phi",
        "kind": 2,
        "importPath": "phidata.phi.cli.operator",
        "description": "phidata.phi.cli.operator",
        "peekOfCode": "def initialize_phi(reset: bool = False, login: bool = False) -> bool:\n    \"\"\"Initialize phi on the users machine.\n    Steps:\n    1. Check if PHI_CLI_DIR exists, if not, create it. If reset == True, recreate PHI_CLI_DIR.\n    2. Authenticates the user if login == True.\n    3. If PhiCliConfig exists and auth is valid, return True.\n    \"\"\"\n    from phi.utils.filesystem import delete_from_fs\n    from phi.api.user import create_anon_user\n    print_heading(\"Welcome to phidata!\")",
        "detail": "phidata.phi.cli.operator",
        "documentation": {}
    },
    {
        "label": "sign_in_using_cli",
        "kind": 2,
        "importPath": "phidata.phi.cli.operator",
        "description": "phidata.phi.cli.operator",
        "peekOfCode": "def sign_in_using_cli() -> None:\n    from getpass import getpass\n    from phi.api.user import sign_in_user\n    from phi.api.schemas.user import UserSchema, EmailPasswordAuthSchema\n    print_heading(\"Log in\")\n    email_raw = input(\"email: \")\n    pass_raw = getpass()\n    if email_raw is None or pass_raw is None:\n        logger.error(\"Incorrect email or password\")\n    try:",
        "detail": "phidata.phi.cli.operator",
        "documentation": {}
    },
    {
        "label": "start_resources",
        "kind": 2,
        "importPath": "phidata.phi.cli.operator",
        "description": "phidata.phi.cli.operator",
        "peekOfCode": "def start_resources(\n    phi_config: PhiCliConfig,\n    resources_file_path: Path,\n    target_env: Optional[str] = None,\n    target_infra: Optional[InfraType] = None,\n    target_group: Optional[str] = None,\n    target_name: Optional[str] = None,\n    target_type: Optional[str] = None,\n    dry_run: Optional[bool] = False,\n    auto_confirm: Optional[bool] = False,",
        "detail": "phidata.phi.cli.operator",
        "documentation": {}
    },
    {
        "label": "stop_resources",
        "kind": 2,
        "importPath": "phidata.phi.cli.operator",
        "description": "phidata.phi.cli.operator",
        "peekOfCode": "def stop_resources(\n    phi_config: PhiCliConfig,\n    resources_file_path: Path,\n    target_env: Optional[str] = None,\n    target_infra: Optional[InfraType] = None,\n    target_group: Optional[str] = None,\n    target_name: Optional[str] = None,\n    target_type: Optional[str] = None,\n    dry_run: Optional[bool] = False,\n    auto_confirm: Optional[bool] = False,",
        "detail": "phidata.phi.cli.operator",
        "documentation": {}
    },
    {
        "label": "patch_resources",
        "kind": 2,
        "importPath": "phidata.phi.cli.operator",
        "description": "phidata.phi.cli.operator",
        "peekOfCode": "def patch_resources(\n    phi_config: PhiCliConfig,\n    resources_file_path: Path,\n    target_env: Optional[str] = None,\n    target_infra: Optional[InfraType] = None,\n    target_group: Optional[str] = None,\n    target_name: Optional[str] = None,\n    target_type: Optional[str] = None,\n    dry_run: Optional[bool] = False,\n    auto_confirm: Optional[bool] = False,",
        "detail": "phidata.phi.cli.operator",
        "documentation": {}
    },
    {
        "label": "PhiCliSettings",
        "kind": 6,
        "importPath": "phidata.phi.cli.settings",
        "description": "phidata.phi.cli.settings",
        "peekOfCode": "class PhiCliSettings(BaseSettings):\n    app_name: str = \"phi\"\n    app_version: str = metadata.version(\"phidata\")\n    tmp_token_path: Path = PHI_CLI_DIR.joinpath(\"tmp_token\")\n    config_file_path: Path = PHI_CLI_DIR.joinpath(\"config.json\")\n    credentials_path: Path = PHI_CLI_DIR.joinpath(\"credentials.json\")\n    ai_conversations_path: Path = PHI_CLI_DIR.joinpath(\"ai_conversations.json\")\n    auth_token_cookie: str = \"__phi_session\"\n    auth_token_header: str = \"X-PHIDATA-AUTH-TOKEN\"\n    api_runtime: str = \"prd\"",
        "detail": "phidata.phi.cli.settings",
        "documentation": {}
    },
    {
        "label": "phi_cli_settings",
        "kind": 5,
        "importPath": "phidata.phi.cli.settings",
        "description": "phidata.phi.cli.settings",
        "peekOfCode": "phi_cli_settings = PhiCliSettings()",
        "detail": "phidata.phi.cli.settings",
        "documentation": {}
    },
    {
        "label": "AirflowLogsVolumeType",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.airflow.base",
        "description": "phidata.phi.docker.app.airflow.base",
        "peekOfCode": "class AirflowLogsVolumeType(str, Enum):\n    HostPath = \"HostPath\"\n    EmptyDir = \"EmptyDir\"\nclass AirflowBase(DockerApp):\n    # -*- App Name\n    name: str = \"airflow\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/airflow\"\n    image_tag: str = \"2.7.1\"\n    # -*- App Ports",
        "detail": "phidata.phi.docker.app.airflow.base",
        "documentation": {}
    },
    {
        "label": "AirflowBase",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.airflow.base",
        "description": "phidata.phi.docker.app.airflow.base",
        "peekOfCode": "class AirflowBase(DockerApp):\n    # -*- App Name\n    name: str = \"airflow\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/airflow\"\n    image_tag: str = \"2.7.1\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = False\n    port_number: int = 8080",
        "detail": "phidata.phi.docker.app.airflow.base",
        "documentation": {}
    },
    {
        "label": "AirflowFlower",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.airflow.flower",
        "description": "phidata.phi.docker.app.airflow.flower",
        "peekOfCode": "class AirflowFlower(AirflowBase):\n    # -*- App Name\n    name: str = \"airflow-flower\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"flower\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 5555",
        "detail": "phidata.phi.docker.app.airflow.flower",
        "documentation": {}
    },
    {
        "label": "AirflowScheduler",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.airflow.scheduler",
        "description": "phidata.phi.docker.app.airflow.scheduler",
        "peekOfCode": "class AirflowScheduler(AirflowBase):\n    # -*- App Name\n    name: str = \"airflow-scheduler\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"scheduler\"",
        "detail": "phidata.phi.docker.app.airflow.scheduler",
        "documentation": {}
    },
    {
        "label": "AirflowWebserver",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.airflow.webserver",
        "description": "phidata.phi.docker.app.airflow.webserver",
        "peekOfCode": "class AirflowWebserver(AirflowBase):\n    # -*- App Name\n    name: str = \"airflow-ws\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"webserver\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 8080",
        "detail": "phidata.phi.docker.app.airflow.webserver",
        "documentation": {}
    },
    {
        "label": "AirflowWorker",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.airflow.worker",
        "description": "phidata.phi.docker.app.airflow.worker",
        "peekOfCode": "class AirflowWorker(AirflowBase):\n    # -*- App Name\n    name: str = \"airflow-worker\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"worker\"\n    # Queue name for the worker\n    queue_name: str = \"default\"\n    # Open the worker_log_port if open_worker_log_port=True\n    # When you start an airflow worker, airflow starts a tiny web server subprocess to serve the workers\n    # local log files to the airflow main web server, which then builds pages and sends them to users.",
        "detail": "phidata.phi.docker.app.airflow.worker",
        "documentation": {}
    },
    {
        "label": "Django",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.django.django",
        "description": "phidata.phi.docker.app.django.django",
        "peekOfCode": "class Django(DockerApp):\n    # -*- App Name\n    name: str = \"django\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/django\"\n    image_tag: str = \"4.2.2\"\n    command: Optional[Union[str, List[str]]] = \"python manage.py runserver 0.0.0.0:8000\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True",
        "detail": "phidata.phi.docker.app.django.django",
        "documentation": {}
    },
    {
        "label": "FastApi",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.fastapi.fastapi",
        "description": "phidata.phi.docker.app.fastapi.fastapi",
        "peekOfCode": "class FastApi(DockerApp):\n    # -*- App Name\n    name: str = \"fastapi\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/fastapi\"\n    image_tag: str = \"0.104\"\n    command: Optional[Union[str, List[str]]] = \"uvicorn main:app --reload\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True",
        "detail": "phidata.phi.docker.app.fastapi.fastapi",
        "documentation": {}
    },
    {
        "label": "Jupyter",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.jupyter.jupyter",
        "description": "phidata.phi.docker.app.jupyter.jupyter",
        "peekOfCode": "class Jupyter(DockerApp):\n    # -*- App Name\n    name: str = \"jupyter\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/jupyter\"\n    image_tag: str = \"4.0.5\"\n    command: Optional[Union[str, List[str]]] = \"jupyter lab\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True",
        "detail": "phidata.phi.docker.app.jupyter.jupyter",
        "documentation": {}
    },
    {
        "label": "MySQLDb",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.mysql.mysql",
        "description": "phidata.phi.docker.app.mysql.mysql",
        "peekOfCode": "class MySQLDb(DockerApp, DbApp):\n    # -*- App Name\n    name: str = \"mysql\"\n    # -*- Image Configuration\n    image_name: str = \"mysql\"\n    image_tag: str = \"8.0.33\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 3306",
        "detail": "phidata.phi.docker.app.mysql.mysql",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.ollama.ollama",
        "description": "phidata.phi.docker.app.ollama.ollama",
        "peekOfCode": "class Ollama(DockerApp):\n    # -*- App Name\n    name: str = \"ollama\"\n    # -*- Image Configuration\n    image_name: str = \"ollama/ollama\"\n    image_tag: str = \"latest\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 11434",
        "detail": "phidata.phi.docker.app.ollama.ollama",
        "documentation": {}
    },
    {
        "label": "PgVectorDb",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.postgres.pgvector",
        "description": "phidata.phi.docker.app.postgres.pgvector",
        "peekOfCode": "class PgVectorDb(PostgresDb):\n    # -*- App Name\n    name: str = \"pgvector-db\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/pgvector\"\n    image_tag: str = \"16\"",
        "detail": "phidata.phi.docker.app.postgres.pgvector",
        "documentation": {}
    },
    {
        "label": "PostgresDb",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.postgres.postgres",
        "description": "phidata.phi.docker.app.postgres.postgres",
        "peekOfCode": "class PostgresDb(DockerApp, DbApp):\n    # -*- App Name\n    name: str = \"postgres\"\n    # -*- Image Configuration\n    image_name: str = \"postgres\"\n    image_tag: str = \"15.4\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 5432",
        "detail": "phidata.phi.docker.app.postgres.postgres",
        "documentation": {}
    },
    {
        "label": "Qdrant",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.qdrant.qdrant",
        "description": "phidata.phi.docker.app.qdrant.qdrant",
        "peekOfCode": "class Qdrant(DockerApp):\n    # -*- App Name\n    name: str = \"qdrant\"\n    # -*- Image Configuration\n    image_name: str = \"qdrant/qdrant\"\n    image_tag: str = \"v1.5.1\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 6333",
        "detail": "phidata.phi.docker.app.qdrant.qdrant",
        "documentation": {}
    },
    {
        "label": "Redis",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.redis.redis",
        "description": "phidata.phi.docker.app.redis.redis",
        "peekOfCode": "class Redis(DockerApp, DbApp):\n    # -*- App Name\n    name: str = \"redis\"\n    # -*- Image Configuration\n    image_name: str = \"redis\"\n    image_tag: str = \"7.2.1\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 6379",
        "detail": "phidata.phi.docker.app.redis.redis",
        "documentation": {}
    },
    {
        "label": "Streamlit",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.streamlit.streamlit",
        "description": "phidata.phi.docker.app.streamlit.streamlit",
        "peekOfCode": "class Streamlit(DockerApp):\n    # -*- App Name\n    name: str = \"streamlit\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/streamlit\"\n    image_tag: str = \"1.27\"\n    command: Optional[Union[str, List[str]]] = \"streamlit hello\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True",
        "detail": "phidata.phi.docker.app.streamlit.streamlit",
        "documentation": {}
    },
    {
        "label": "SupersetBase",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.superset.base",
        "description": "phidata.phi.docker.app.superset.base",
        "peekOfCode": "class SupersetBase(DockerApp):\n    # -*- App Name\n    name: str = \"superset\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/superset\"\n    image_tag: str = \"2.1.0\"\n    # -*- Python Configuration\n    # Set the PYTHONPATH env var\n    set_python_path: bool = True\n    # -*- App Ports",
        "detail": "phidata.phi.docker.app.superset.base",
        "documentation": {}
    },
    {
        "label": "SupersetInit",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.superset.init",
        "description": "phidata.phi.docker.app.superset.init",
        "peekOfCode": "class SupersetInit(SupersetBase):\n    # -*- App Name\n    name: str = \"superset-init\"\n    # Entrypoint for the container\n    entrypoint: Optional[Union[str, List]] = \"/scripts/init-superset.sh\"",
        "detail": "phidata.phi.docker.app.superset.init",
        "documentation": {}
    },
    {
        "label": "SupersetWebserver",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.superset.webserver",
        "description": "phidata.phi.docker.app.superset.webserver",
        "peekOfCode": "class SupersetWebserver(SupersetBase):\n    # -*- App Name\n    name: str = \"superset-ws\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"webserver\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 8088",
        "detail": "phidata.phi.docker.app.superset.webserver",
        "documentation": {}
    },
    {
        "label": "SupersetWorker",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.superset.worker",
        "description": "phidata.phi.docker.app.superset.worker",
        "peekOfCode": "class SupersetWorker(SupersetBase):\n    # -*- App Name\n    name: str = \"superset-worker\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"worker\"",
        "detail": "phidata.phi.docker.app.superset.worker",
        "documentation": {}
    },
    {
        "label": "SupersetWorkerBeat",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.superset.worker_beat",
        "description": "phidata.phi.docker.app.superset.worker_beat",
        "peekOfCode": "class SupersetWorkerBeat(SupersetBase):\n    # -*- App Name\n    name: str = \"superset-worker-beat\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"beat\"",
        "detail": "phidata.phi.docker.app.superset.worker_beat",
        "documentation": {}
    },
    {
        "label": "TraefikRouter",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.traefik.router",
        "description": "phidata.phi.docker.app.traefik.router",
        "peekOfCode": "class TraefikRouter(DockerApp):\n    # -*- App Name\n    name: str = \"traefik\"\n    # -*- Image Configuration\n    image_name: str = \"traefik\"\n    image_tag: str = \"v2.10\"\n    command: Optional[Union[str, List[str]]] = \"uvicorn main:app --reload\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True",
        "detail": "phidata.phi.docker.app.traefik.router",
        "documentation": {}
    },
    {
        "label": "Whoami",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.whoami.whoami",
        "description": "phidata.phi.docker.app.whoami.whoami",
        "peekOfCode": "class Whoami(DockerApp):\n    # -*- App Name\n    name: str = \"whoami\"\n    # -*- Image Configuration\n    image_name: str = \"traefik/whoami\"\n    image_tag: str = \"v1.10\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 80",
        "detail": "phidata.phi.docker.app.whoami.whoami",
        "documentation": {}
    },
    {
        "label": "DockerApp",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.base",
        "description": "phidata.phi.docker.app.base",
        "peekOfCode": "class DockerApp(AppBase):\n    # -*- Workspace Configuration\n    # Path to the workspace directory inside the container\n    workspace_dir_container_path: str = \"/usr/local/app\"\n    # Mount the workspace directory from host machine to the container\n    mount_workspace: bool = False\n    # -*- App Volume\n    # Create a volume for container storage\n    create_volume: bool = False\n    # If volume_dir is provided, mount this directory RELATIVE to the workspace_root",
        "detail": "phidata.phi.docker.app.base",
        "documentation": {}
    },
    {
        "label": "DockerBuildContext",
        "kind": 6,
        "importPath": "phidata.phi.docker.app.context",
        "description": "phidata.phi.docker.app.context",
        "peekOfCode": "class DockerBuildContext(BaseModel):\n    network: str",
        "detail": "phidata.phi.docker.app.context",
        "documentation": {}
    },
    {
        "label": "DockerResource",
        "kind": 6,
        "importPath": "phidata.phi.docker.resource.base",
        "description": "phidata.phi.docker.resource.base",
        "peekOfCode": "class DockerResource(ResourceBase):\n    \"\"\"Base class for Docker Resources.\"\"\"\n    # Fields received from the DockerApiClient\n    id: Optional[str] = None\n    short_id: Optional[str] = None\n    attrs: Optional[Dict[str, Any]] = None\n    # Pull latest image before create/update\n    pull: Optional[bool] = None\n    docker_client: Optional[DockerApiClient] = None\n    @staticmethod",
        "detail": "phidata.phi.docker.resource.base",
        "documentation": {}
    },
    {
        "label": "DockerContainerMount",
        "kind": 6,
        "importPath": "phidata.phi.docker.resource.container",
        "description": "phidata.phi.docker.resource.container",
        "peekOfCode": "class DockerContainerMount(DockerResource):\n    resource_type: str = \"ContainerMount\"\n    target: str\n    source: str\n    type: str = \"volume\"\n    read_only: bool = False\n    labels: Optional[Dict[str, Any]] = None\nclass DockerContainer(DockerResource):\n    resource_type: str = \"Container\"\n    # image (str) – The image to run.",
        "detail": "phidata.phi.docker.resource.container",
        "documentation": {}
    },
    {
        "label": "DockerContainer",
        "kind": 6,
        "importPath": "phidata.phi.docker.resource.container",
        "description": "phidata.phi.docker.resource.container",
        "peekOfCode": "class DockerContainer(DockerResource):\n    resource_type: str = \"Container\"\n    # image (str) – The image to run.\n    image: Optional[str] = None\n    # command (str or list) – The command to run in the container.\n    command: Optional[Union[str, List]] = None\n    # auto_remove (bool) – enable auto-removal of the container when the container’s process exits.\n    auto_remove: bool = True\n    # detach (bool) – Run container in the background and return a Container object.\n    detach: bool = True",
        "detail": "phidata.phi.docker.resource.container",
        "documentation": {}
    },
    {
        "label": "DockerImage",
        "kind": 6,
        "importPath": "phidata.phi.docker.resource.image",
        "description": "phidata.phi.docker.resource.image",
        "peekOfCode": "class DockerImage(DockerResource):\n    resource_type: str = \"Image\"\n    # Docker image name, usually as repo/image\n    name: str\n    # Docker image tag\n    tag: Optional[str] = None\n    # Path to the directory containing the Dockerfile\n    path: Optional[str] = None\n    # Path to the Dockerfile within the build context\n    dockerfile: Optional[str] = None",
        "detail": "phidata.phi.docker.resource.image",
        "documentation": {}
    },
    {
        "label": "DockerNetwork",
        "kind": 6,
        "importPath": "phidata.phi.docker.resource.network",
        "description": "phidata.phi.docker.resource.network",
        "peekOfCode": "class DockerNetwork(DockerResource):\n    resource_type: str = \"Network\"\n    # driver (str) – Name of the driver used to create the network\n    driver: Optional[str] = None\n    # options (dict) – Driver options as a key-value dictionary\n    options: Optional[Dict[str, Any]] = None\n    # check_duplicate (bool) – Request daemon to check for networks with same name. Default: None.\n    auto_remove: Optional[bool] = None\n    # internal (bool) – Restrict external access to the network. Default False.\n    internal: Optional[bool] = None",
        "detail": "phidata.phi.docker.resource.network",
        "documentation": {}
    },
    {
        "label": "DockerResourceType",
        "kind": 5,
        "importPath": "phidata.phi.docker.resource.types",
        "description": "phidata.phi.docker.resource.types",
        "peekOfCode": "DockerResourceType = Union[\n    DockerNetwork,\n    DockerImage,\n    DockerVolume,\n    DockerContainer,\n]\n# Use this as an ordered list to iterate over all DockerResource Classes\n# This list is the order in which resources are installed as well.\nDockerResourceTypeList: List[Type[DockerResource]] = [\n    DockerNetwork,",
        "detail": "phidata.phi.docker.resource.types",
        "documentation": {}
    },
    {
        "label": "DockerVolume",
        "kind": 6,
        "importPath": "phidata.phi.docker.resource.volume",
        "description": "phidata.phi.docker.resource.volume",
        "peekOfCode": "class DockerVolume(DockerResource):\n    resource_type: str = \"Volume\"\n    # driver (str) – Name of the driver used to create the volume\n    driver: Optional[str] = None\n    # driver_opts (dict) – Driver options as a key-value dictionary\n    driver_opts: Optional[Dict[str, Any]] = None\n    # labels (dict) – Labels to set on the volume\n    labels: Optional[Dict[str, Any]] = None\n    def _create(self, docker_client: DockerApiClient) -> bool:\n        \"\"\"Creates the Volume on docker",
        "detail": "phidata.phi.docker.resource.volume",
        "documentation": {}
    },
    {
        "label": "DockerApiClient",
        "kind": 6,
        "importPath": "phidata.phi.docker.api_client",
        "description": "phidata.phi.docker.api_client",
        "peekOfCode": "class DockerApiClient:\n    def __init__(self, base_url: Optional[str] = None, timeout: int = 30):\n        super().__init__()\n        self.base_url: Optional[str] = base_url\n        self.timeout: int = timeout\n        # DockerClient\n        self._api_client: Optional[Any] = None\n        logger.debug(\"**-+-** DockerApiClient created\")\n    def create_api_client(self) -> Optional[Any]:\n        \"\"\"Create a docker.DockerClient\"\"\"",
        "detail": "phidata.phi.docker.api_client",
        "documentation": {}
    },
    {
        "label": "DockerResources",
        "kind": 6,
        "importPath": "phidata.phi.docker.resources",
        "description": "phidata.phi.docker.resources",
        "peekOfCode": "class DockerResources(InfraResources):\n    env: str = \"dev\"\n    network: str = \"phi\"\n    # URL for the Docker server. For example, unix:///var/run/docker.sock or tcp://127.0.0.1:1234\n    base_url: Optional[str] = None\n    apps: Optional[List[Union[DockerApp, AppGroup]]] = None\n    resources: Optional[List[Union[DockerResource, ResourceGroup]]] = None\n    # -*- Cached Data\n    _api_client: Optional[DockerApiClient] = None\n    @property",
        "detail": "phidata.phi.docker.resources",
        "documentation": {}
    },
    {
        "label": "S3PDFReader",
        "kind": 6,
        "importPath": "phidata.phi.document.reader.s3.pdf",
        "description": "phidata.phi.document.reader.s3.pdf",
        "peekOfCode": "class S3PDFReader(Reader):\n    \"\"\"Reader for PDF files on S3\"\"\"\n    def read(self, s3_object: S3Object) -> List[Document]:\n        from io import BytesIO\n        if not s3_object:\n            raise ValueError(\"No s3_object provided\")\n        try:\n            from pypdf import PdfReader as DocumentReader  # noqa: F401\n        except ImportError:\n            raise ImportError(\"`pypdf` not installed\")",
        "detail": "phidata.phi.document.reader.s3.pdf",
        "documentation": {}
    },
    {
        "label": "S3TextReader",
        "kind": 6,
        "importPath": "phidata.phi.document.reader.s3.text",
        "description": "phidata.phi.document.reader.s3.text",
        "peekOfCode": "class S3TextReader(Reader):\n    \"\"\"Reader for text files on S3\"\"\"\n    def read(self, s3_object: S3Object) -> List[Document]:\n        if not s3_object:\n            raise ValueError(\"No s3_object provided\")\n        try:\n            import textract  # noqa: F401\n        except ImportError:\n            raise ImportError(\"`textract` not installed\")\n        try:",
        "detail": "phidata.phi.document.reader.s3.text",
        "documentation": {}
    },
    {
        "label": "ArxivReader",
        "kind": 6,
        "importPath": "phidata.phi.document.reader.arxiv",
        "description": "phidata.phi.document.reader.arxiv",
        "peekOfCode": "class ArxivReader(Reader):\n    max_results: int = 5  # Top articles\n    sort_by: arxiv.SortCriterion = arxiv.SortCriterion.Relevance\n    def read(self, query: str) -> List[Document]:\n        \"\"\"\n        Search a query from arXiv database\n        This function gets the top_k articles based on a user's query, sorted by relevance from arxiv\n        @param query:\n        @return: List of documents\n        \"\"\"",
        "detail": "phidata.phi.document.reader.arxiv",
        "documentation": {}
    },
    {
        "label": "Reader",
        "kind": 6,
        "importPath": "phidata.phi.document.reader.base",
        "description": "phidata.phi.document.reader.base",
        "peekOfCode": "class Reader(BaseModel):\n    chunk: bool = True\n    chunk_size: int = 3000\n    separators: List[str] = [\"\\n\", \"\\n\\n\", \"\\r\", \"\\r\\n\", \"\\n\\r\", \"\\t\", \" \", \"  \"]\n    def read(self, obj: Any) -> List[Document]:\n        raise NotImplementedError\n    def clean_text(self, text: str) -> str:\n        \"\"\"Clean the text by replacing multiple newlines with a single newline\"\"\"\n        import re\n        # Replace multiple newlines with a single newline",
        "detail": "phidata.phi.document.reader.base",
        "documentation": {}
    },
    {
        "label": "DocxReader",
        "kind": 6,
        "importPath": "phidata.phi.document.reader.docx",
        "description": "phidata.phi.document.reader.docx",
        "peekOfCode": "class DocxReader(Reader):\n    \"\"\"Reader for Doc/Docx files\"\"\"\n    def read(self, path: Path) -> List[Document]:\n        if not path:\n            raise ValueError(\"No path provided\")\n        if not path.exists():\n            raise FileNotFoundError(f\"Could not find file: {path}\")\n        try:\n            import textract  # noqa: F401\n        except ImportError:",
        "detail": "phidata.phi.document.reader.docx",
        "documentation": {}
    },
    {
        "label": "FirecrawlReader",
        "kind": 6,
        "importPath": "phidata.phi.document.reader.firecrawl_reader",
        "description": "phidata.phi.document.reader.firecrawl_reader",
        "peekOfCode": "class FirecrawlReader(Reader):\n    api_key: Optional[str] = None\n    params: Optional[Dict] = None\n    mode: Literal[\"scrape\", \"crawl\"] = \"scrape\"\n    def scrape(self, url: str) -> List[Document]:\n        \"\"\"\n        Scrapes a website and returns a list of documents.\n        Args:\n            url: The URL of the website to scrape\n        Returns:",
        "detail": "phidata.phi.document.reader.firecrawl_reader",
        "documentation": {}
    },
    {
        "label": "JSONReader",
        "kind": 6,
        "importPath": "phidata.phi.document.reader.json",
        "description": "phidata.phi.document.reader.json",
        "peekOfCode": "class JSONReader(Reader):\n    \"\"\"Reader for JSON files\"\"\"\n    chunk: bool = False\n    def read(self, path: Path) -> List[Document]:\n        if not path:\n            raise ValueError(\"No path provided\")\n        if not path.exists():\n            raise FileNotFoundError(f\"Could not find file: {path}\")\n        try:\n            logger.info(f\"Reading: {path}\")",
        "detail": "phidata.phi.document.reader.json",
        "documentation": {}
    },
    {
        "label": "PDFReader",
        "kind": 6,
        "importPath": "phidata.phi.document.reader.pdf",
        "description": "phidata.phi.document.reader.pdf",
        "peekOfCode": "class PDFReader(Reader):\n    \"\"\"Reader for PDF files\"\"\"\n    def read(self, pdf: Union[str, Path, IO[Any]]) -> List[Document]:\n        if not pdf:\n            raise ValueError(\"No pdf provided\")\n        try:\n            from pypdf import PdfReader as DocumentReader  # noqa: F401\n        except ImportError:\n            raise ImportError(\"`pypdf` not installed\")\n        doc_name = \"\"",
        "detail": "phidata.phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlReader",
        "kind": 6,
        "importPath": "phidata.phi.document.reader.pdf",
        "description": "phidata.phi.document.reader.pdf",
        "peekOfCode": "class PDFUrlReader(Reader):\n    \"\"\"Reader for PDF files from URL\"\"\"\n    def read(self, url: str) -> List[Document]:\n        if not url:\n            raise ValueError(\"No url provided\")\n        from io import BytesIO\n        try:\n            import httpx\n        except ImportError:\n            raise ImportError(\"`httpx` not installed\")",
        "detail": "phidata.phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFImageReader",
        "kind": 6,
        "importPath": "phidata.phi.document.reader.pdf",
        "description": "phidata.phi.document.reader.pdf",
        "peekOfCode": "class PDFImageReader(Reader):\n    \"\"\"Reader for PDF files with text and images extraction\"\"\"\n    def read(self, pdf: Union[str, Path, IO[Any]]) -> List[Document]:\n        if not pdf:\n            raise ValueError(\"No pdf provided\")\n        try:\n            import rapidocr_onnxruntime as rapidocr\n            from pypdf import PdfReader as DocumentReader  # noqa: F401\n        except ImportError:\n            raise ImportError(\"`pypdf` or `rapidocr_onnxruntime` not installed\")",
        "detail": "phidata.phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlImageReader",
        "kind": 6,
        "importPath": "phidata.phi.document.reader.pdf",
        "description": "phidata.phi.document.reader.pdf",
        "peekOfCode": "class PDFUrlImageReader(Reader):\n    \"\"\"Reader for PDF files from URL with text and images extraction\"\"\"\n    def read(self, url: str) -> List[Document]:\n        if not url:\n            raise ValueError(\"No url provided\")\n        from io import BytesIO\n        try:\n            import httpx\n            from pypdf import PdfReader as DocumentReader\n            import rapidocr_onnxruntime as rapidocr",
        "detail": "phidata.phi.document.reader.pdf",
        "documentation": {}
    },
    {
        "label": "TextReader",
        "kind": 6,
        "importPath": "phidata.phi.document.reader.text",
        "description": "phidata.phi.document.reader.text",
        "peekOfCode": "class TextReader(Reader):\n    \"\"\"Reader for Text files\"\"\"\n    def read(self, path: Path) -> List[Document]:\n        if not path:\n            raise ValueError(\"No path provided\")\n        if not path.exists():\n            raise FileNotFoundError(f\"Could not find file: {path}\")\n        try:\n            logger.info(f\"Reading: {path}\")\n            file_name = path.name.split(\"/\")[-1].split(\".\")[0].replace(\"/\", \"_\").replace(\" \", \"_\")",
        "detail": "phidata.phi.document.reader.text",
        "documentation": {}
    },
    {
        "label": "WebsiteReader",
        "kind": 6,
        "importPath": "phidata.phi.document.reader.website",
        "description": "phidata.phi.document.reader.website",
        "peekOfCode": "class WebsiteReader(Reader):\n    \"\"\"Reader for Websites\"\"\"\n    max_depth: int = 3\n    max_links: int = 10\n    _visited: Set[str] = set()\n    _urls_to_crawl: List[Tuple[str, int]] = []\n    def delay(self, min_seconds=1, max_seconds=3):\n        \"\"\"\n        Introduce a random delay.\n        :param min_seconds: Minimum number of seconds to delay. Default is 1.",
        "detail": "phidata.phi.document.reader.website",
        "documentation": {}
    },
    {
        "label": "Document",
        "kind": 6,
        "importPath": "phidata.phi.document.base",
        "description": "phidata.phi.document.base",
        "peekOfCode": "class Document(BaseModel):\n    \"\"\"Model for managing a document\"\"\"\n    content: str\n    id: Optional[str] = None\n    name: Optional[str] = None\n    meta_data: Dict[str, Any] = {}\n    embedder: Optional[Embedder] = None\n    embedding: Optional[List[float]] = None\n    usage: Optional[Dict[str, Any]] = None\n    model_config = ConfigDict(arbitrary_types_allowed=True)",
        "detail": "phidata.phi.document.base",
        "documentation": {}
    },
    {
        "label": "AnyscaleEmbedder",
        "kind": 6,
        "importPath": "phidata.phi.embedder.anyscale",
        "description": "phidata.phi.embedder.anyscale",
        "peekOfCode": "class AnyscaleEmbedder(OpenAIEmbedder):\n    model: str = \"thenlper/gte-large\"\n    dimensions: int = 1024\n    api_key: Optional[str] = getenv(\"ANYSCALE_API_KEY\")\n    base_url: str = \"https://api.endpoints.anyscale.com/v1\"",
        "detail": "phidata.phi.embedder.anyscale",
        "documentation": {}
    },
    {
        "label": "Embedder",
        "kind": 6,
        "importPath": "phidata.phi.embedder.base",
        "description": "phidata.phi.embedder.base",
        "peekOfCode": "class Embedder(BaseModel):\n    \"\"\"Base class for managing embedders\"\"\"\n    dimensions: int = 1536\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n    def get_embedding(self, text: str) -> List[float]:\n        raise NotImplementedError\n    def get_embedding_and_usage(self, text: str) -> Tuple[List[float], Optional[Dict]]:\n        raise NotImplementedError",
        "detail": "phidata.phi.embedder.base",
        "documentation": {}
    },
    {
        "label": "FireworksEmbedder",
        "kind": 6,
        "importPath": "phidata.phi.embedder.fireworks",
        "description": "phidata.phi.embedder.fireworks",
        "peekOfCode": "class FireworksEmbedder(OpenAIEmbedder):\n    model: str = \"nomic-ai/nomic-embed-text-v1.5\"\n    dimensions: int = 768\n    api_key: Optional[str] = getenv(\"FIREWORKS_API_KEY\")\n    base_url: str = \"https://api.fireworks.ai/inference/v1\"",
        "detail": "phidata.phi.embedder.fireworks",
        "documentation": {}
    },
    {
        "label": "MistralEmbedder",
        "kind": 6,
        "importPath": "phidata.phi.embedder.mistral",
        "description": "phidata.phi.embedder.mistral",
        "peekOfCode": "class MistralEmbedder(Embedder):\n    model: str = \"mistral-embed\"\n    dimensions: int = 1024\n    # -*- Request parameters\n    request_params: Optional[Dict[str, Any]] = None\n    # -*- Client parameters\n    api_key: Optional[str] = None\n    endpoint: Optional[str] = None\n    max_retries: Optional[int] = None\n    timeout: Optional[int] = None",
        "detail": "phidata.phi.embedder.mistral",
        "documentation": {}
    },
    {
        "label": "OllamaEmbedder",
        "kind": 6,
        "importPath": "phidata.phi.embedder.ollama",
        "description": "phidata.phi.embedder.ollama",
        "peekOfCode": "class OllamaEmbedder(Embedder):\n    model: str = \"openhermes\"\n    dimensions: int = 4096\n    host: Optional[str] = None\n    timeout: Optional[Any] = None\n    options: Optional[Any] = None\n    client_kwargs: Optional[Dict[str, Any]] = None\n    ollama_client: Optional[OllamaClient] = None\n    @property\n    def client(self) -> OllamaClient:",
        "detail": "phidata.phi.embedder.ollama",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbedder",
        "kind": 6,
        "importPath": "phidata.phi.embedder.openai",
        "description": "phidata.phi.embedder.openai",
        "peekOfCode": "class OpenAIEmbedder(Embedder):\n    model: str = \"text-embedding-ada-002\"\n    dimensions: int = 1536\n    encoding_format: Literal[\"float\", \"base64\"] = \"float\"\n    user: Optional[str] = None\n    api_key: Optional[str] = None\n    organization: Optional[str] = None\n    base_url: Optional[str] = None\n    request_params: Optional[Dict[str, Any]] = None\n    client_params: Optional[Dict[str, Any]] = None",
        "detail": "phidata.phi.embedder.openai",
        "documentation": {}
    },
    {
        "label": "TogetherEmbedder",
        "kind": 6,
        "importPath": "phidata.phi.embedder.together",
        "description": "phidata.phi.embedder.together",
        "peekOfCode": "class TogetherEmbedder(OpenAIEmbedder):\n    model: str = \"togethercomputer/m2-bert-80M-32k-retrieval\"\n    dimensions: int = 768\n    api_key: Optional[str] = getenv(\"TOGETHER_API_KEY\")\n    base_url: str = \"https://api.together.xyz/v1\"",
        "detail": "phidata.phi.embedder.together",
        "documentation": {}
    },
    {
        "label": "VoyageAIEmbedder",
        "kind": 6,
        "importPath": "phidata.phi.embedder.voyageai",
        "description": "phidata.phi.embedder.voyageai",
        "peekOfCode": "class VoyageAIEmbedder(Embedder):\n    model: str = \"voyage-2\"\n    dimensions: int = 1024\n    request_params: Optional[Dict[str, Any]] = None\n    api_key: Optional[str] = None\n    base_url: str = \"https://api.voyageai.com/v1/embeddings\"\n    max_retries: Optional[int] = None\n    timeout: Optional[float] = None\n    client_params: Optional[Dict[str, Any]] = None\n    voyage_client: Optional[Client] = None",
        "detail": "phidata.phi.embedder.voyageai",
        "documentation": {}
    },
    {
        "label": "CsvFile",
        "kind": 6,
        "importPath": "phidata.phi.file.local.csv",
        "description": "phidata.phi.file.local.csv",
        "peekOfCode": "class CsvFile(File):\n    path: str\n    type: str = \"CSV\"\n    def get_metadata(self) -> dict[str, Any]:\n        if self.name is None:\n            from pathlib import Path\n            self.name = Path(self.path).name\n        if self.columns is None:\n            try:\n                # Get the columns from the file",
        "detail": "phidata.phi.file.local.csv",
        "documentation": {}
    },
    {
        "label": "TextFile",
        "kind": 6,
        "importPath": "phidata.phi.file.local.txt",
        "description": "phidata.phi.file.local.txt",
        "peekOfCode": "class TextFile(File):\n    path: str\n    type: str = \"TEXT\"\n    def get_metadata(self) -> dict[str, Any]:\n        if self.name is None:\n            from pathlib import Path\n            self.name = Path(self.path).name\n        return self.model_dump(exclude_none=True)",
        "detail": "phidata.phi.file.local.txt",
        "documentation": {}
    },
    {
        "label": "File",
        "kind": 6,
        "importPath": "phidata.phi.file.file",
        "description": "phidata.phi.file.file",
        "peekOfCode": "class File(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    columns: Optional[List[str]] = None\n    path: Optional[str] = None\n    type: str = \"FILE\"\n    def get_metadata(self) -> dict[str, Any]:\n        return self.model_dump(exclude_none=True)",
        "detail": "phidata.phi.file.file",
        "documentation": {}
    },
    {
        "label": "InfraResources",
        "kind": 6,
        "importPath": "phidata.phi.infra.resources",
        "description": "phidata.phi.infra.resources",
        "peekOfCode": "class InfraResources(PhiBase):\n    apps: Optional[List[Any]] = None\n    resources: Optional[List[Any]] = None\n    def create_resources(\n        self,\n        group_filter: Optional[str] = None,\n        name_filter: Optional[str] = None,\n        type_filter: Optional[str] = None,\n        dry_run: Optional[bool] = False,\n        auto_confirm: Optional[bool] = False,",
        "detail": "phidata.phi.infra.resources",
        "documentation": {}
    },
    {
        "label": "InfraType",
        "kind": 6,
        "importPath": "phidata.phi.infra.type",
        "description": "phidata.phi.infra.type",
        "peekOfCode": "class InfraType(str, Enum):\n    local = \"local\"\n    docker = \"docker\"\n    k8s = \"k8s\"\n    aws = \"aws\"",
        "detail": "phidata.phi.infra.type",
        "documentation": {}
    },
    {
        "label": "AirflowBase",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.airflow.base",
        "description": "phidata.phi.k8s.app.airflow.base",
        "peekOfCode": "class AirflowBase(K8sApp):\n    # -*- App Name\n    name: str = \"airflow\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/airflow\"\n    image_tag: str = \"2.7.1\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = False\n    port_number: int = 8080",
        "detail": "phidata.phi.k8s.app.airflow.base",
        "documentation": {}
    },
    {
        "label": "AirflowFlower",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.airflow.flower",
        "description": "phidata.phi.k8s.app.airflow.flower",
        "peekOfCode": "class AirflowFlower(AirflowBase):\n    # -*- App Name\n    name: str = \"airflow-flower\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"flower\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 5555\n    # -*- Service Configuration",
        "detail": "phidata.phi.k8s.app.airflow.flower",
        "documentation": {}
    },
    {
        "label": "AirflowScheduler",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.airflow.scheduler",
        "description": "phidata.phi.k8s.app.airflow.scheduler",
        "peekOfCode": "class AirflowScheduler(AirflowBase):\n    # -*- App Name\n    name: str = \"airflow-scheduler\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"scheduler\"",
        "detail": "phidata.phi.k8s.app.airflow.scheduler",
        "documentation": {}
    },
    {
        "label": "AirflowWebserver",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.airflow.webserver",
        "description": "phidata.phi.k8s.app.airflow.webserver",
        "peekOfCode": "class AirflowWebserver(AirflowBase):\n    # -*- App Name\n    name: str = \"airflow-ws\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"webserver\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 8080\n    # -*- Service Configuration",
        "detail": "phidata.phi.k8s.app.airflow.webserver",
        "documentation": {}
    },
    {
        "label": "AirflowWorker",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.airflow.worker",
        "description": "phidata.phi.k8s.app.airflow.worker",
        "peekOfCode": "class AirflowWorker(AirflowBase):\n    # -*- App Name\n    name: str = \"airflow-worker\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"worker\"\n    # Queue name for the worker\n    queue_name: str = \"default\"\n    def get_container_env(self, container_context: ContainerContext) -> Dict[str, str]:\n        container_env: Dict[str, str] = super().get_container_env(container_context=container_context)\n        # Set the queue name",
        "detail": "phidata.phi.k8s.app.airflow.worker",
        "documentation": {}
    },
    {
        "label": "FastApi",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.fastapi.fastapi",
        "description": "phidata.phi.k8s.app.fastapi.fastapi",
        "peekOfCode": "class FastApi(K8sApp):\n    # -*- App Name\n    name: str = \"fastapi\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/fastapi\"\n    image_tag: str = \"0.104\"\n    command: Optional[Union[str, List[str]]] = \"uvicorn main:app --reload\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True",
        "detail": "phidata.phi.k8s.app.fastapi.fastapi",
        "documentation": {}
    },
    {
        "label": "Jupyter",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.jupyter.jupyter",
        "description": "phidata.phi.k8s.app.jupyter.jupyter",
        "peekOfCode": "class Jupyter(K8sApp):\n    # -*- App Name\n    name: str = \"jupyter\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/jupyter\"\n    image_tag: str = \"4.0.5\"\n    command: Optional[Union[str, List[str]]] = \"jupyter lab\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True",
        "detail": "phidata.phi.k8s.app.jupyter.jupyter",
        "documentation": {}
    },
    {
        "label": "PgVectorDb",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.postgres.pgvector",
        "description": "phidata.phi.k8s.app.postgres.pgvector",
        "peekOfCode": "class PgVectorDb(PostgresDb):\n    # -*- App Name\n    name: str = \"pgvector-db\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/pgvector\"\n    image_tag: str = \"16\"",
        "detail": "phidata.phi.k8s.app.postgres.pgvector",
        "documentation": {}
    },
    {
        "label": "PostgresDb",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.postgres.postgres",
        "description": "phidata.phi.k8s.app.postgres.postgres",
        "peekOfCode": "class PostgresDb(K8sApp, DbApp):\n    # -*- App Name\n    name: str = \"postgres\"\n    # -*- Image Configuration\n    image_name: str = \"postgres\"\n    image_tag: str = \"15.3\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 5432",
        "detail": "phidata.phi.k8s.app.postgres.postgres",
        "documentation": {}
    },
    {
        "label": "Redis",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.redis.redis",
        "description": "phidata.phi.k8s.app.redis.redis",
        "peekOfCode": "class Redis(K8sApp, DbApp):\n    # -*- App Name\n    name: str = \"redis\"\n    # -*- Image Configuration\n    image_name: str = \"redis\"\n    image_tag: str = \"7.2.0\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 6379",
        "detail": "phidata.phi.k8s.app.redis.redis",
        "documentation": {}
    },
    {
        "label": "Streamlit",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.streamlit.streamlit",
        "description": "phidata.phi.k8s.app.streamlit.streamlit",
        "peekOfCode": "class Streamlit(K8sApp):\n    # -*- App Name\n    name: str = \"streamlit\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/streamlit\"\n    image_tag: str = \"1.27\"\n    command: Optional[Union[str, List[str]]] = \"streamlit hello\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True",
        "detail": "phidata.phi.k8s.app.streamlit.streamlit",
        "documentation": {}
    },
    {
        "label": "SupersetBase",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.superset.base",
        "description": "phidata.phi.k8s.app.superset.base",
        "peekOfCode": "class SupersetBase(K8sApp):\n    # -*- App Name\n    name: str = \"superset\"\n    # -*- Image Configuration\n    image_name: str = \"phidata/superset\"\n    image_tag: str = \"2.1.1\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = False\n    port_number: int = 8088",
        "detail": "phidata.phi.k8s.app.superset.base",
        "documentation": {}
    },
    {
        "label": "SupersetInit",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.superset.init",
        "description": "phidata.phi.k8s.app.superset.init",
        "peekOfCode": "class SupersetInit(SupersetBase):\n    # -*- App Name\n    name: str = \"superset-init\"\n    # Command for the container\n    entrypoint: Optional[Union[str, List]] = \"/scripts/init-superset.sh\"",
        "detail": "phidata.phi.k8s.app.superset.init",
        "documentation": {}
    },
    {
        "label": "SupersetWebserver",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.superset.webserver",
        "description": "phidata.phi.k8s.app.superset.webserver",
        "peekOfCode": "class SupersetWebserver(SupersetBase):\n    # -*- App Name\n    name: str = \"superset-ws\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"webserver\"\n    # -*- App Ports\n    # Open a container port if open_port=True\n    open_port: bool = True\n    port_number: int = 8088\n    # -*- Service Configuration",
        "detail": "phidata.phi.k8s.app.superset.webserver",
        "documentation": {}
    },
    {
        "label": "SupersetWorker",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.superset.worker",
        "description": "phidata.phi.k8s.app.superset.worker",
        "peekOfCode": "class SupersetWorker(SupersetBase):\n    # -*- App Name\n    name: str = \"superset-worker\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"worker\"",
        "detail": "phidata.phi.k8s.app.superset.worker",
        "documentation": {}
    },
    {
        "label": "SupersetWorkerBeat",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.superset.worker_beat",
        "description": "phidata.phi.k8s.app.superset.worker_beat",
        "peekOfCode": "class SupersetWorkerBeat(SupersetBase):\n    # -*- App Name\n    name: str = \"superset-worker-beat\"\n    # Command for the container\n    command: Optional[Union[str, List[str]]] = \"beat\"",
        "detail": "phidata.phi.k8s.app.superset.worker_beat",
        "documentation": {}
    },
    {
        "label": "traefik_name",
        "kind": 5,
        "importPath": "phidata.phi.k8s.app.traefik.crds",
        "description": "phidata.phi.k8s.app.traefik.crds",
        "peekOfCode": "traefik_name = \"traefik\"\ningressroute_crd = CreateCustomResourceDefinition(\n    crd_name=\"ingressroutes.traefik.containo.us\",\n    app_name=traefik_name,\n    group=\"traefik.containo.us\",\n    names=CustomResourceDefinitionNames(\n        kind=\"IngressRoute\",\n        list_kind=\"IngressRouteList\",\n        plural=\"ingressroutes\",\n        singular=\"ingressroute\",",
        "detail": "phidata.phi.k8s.app.traefik.crds",
        "documentation": {}
    },
    {
        "label": "ingressroute_crd",
        "kind": 5,
        "importPath": "phidata.phi.k8s.app.traefik.crds",
        "description": "phidata.phi.k8s.app.traefik.crds",
        "peekOfCode": "ingressroute_crd = CreateCustomResourceDefinition(\n    crd_name=\"ingressroutes.traefik.containo.us\",\n    app_name=traefik_name,\n    group=\"traefik.containo.us\",\n    names=CustomResourceDefinitionNames(\n        kind=\"IngressRoute\",\n        list_kind=\"IngressRouteList\",\n        plural=\"ingressroutes\",\n        singular=\"ingressroute\",\n    ),",
        "detail": "phidata.phi.k8s.app.traefik.crds",
        "documentation": {}
    },
    {
        "label": "ingressroutetcp_crd",
        "kind": 5,
        "importPath": "phidata.phi.k8s.app.traefik.crds",
        "description": "phidata.phi.k8s.app.traefik.crds",
        "peekOfCode": "ingressroutetcp_crd = CreateCustomResourceDefinition(\n    crd_name=\"ingressroutetcps.traefik.containo.us\",\n    app_name=traefik_name,\n    group=\"traefik.containo.us\",\n    names=CustomResourceDefinitionNames(\n        kind=\"IngressRouteTCP\",\n        list_kind=\"IngressRouteTCPList\",\n        plural=\"ingressroutetcps\",\n        singular=\"ingressroutetcp\",\n    ),",
        "detail": "phidata.phi.k8s.app.traefik.crds",
        "documentation": {}
    },
    {
        "label": "ingressrouteudp_crd",
        "kind": 5,
        "importPath": "phidata.phi.k8s.app.traefik.crds",
        "description": "phidata.phi.k8s.app.traefik.crds",
        "peekOfCode": "ingressrouteudp_crd = CreateCustomResourceDefinition(\n    crd_name=\"ingressrouteudps.traefik.containo.us\",\n    app_name=traefik_name,\n    group=\"traefik.containo.us\",\n    names=CustomResourceDefinitionNames(\n        kind=\"IngressRouteUDP\",\n        list_kind=\"IngressRouteUDPList\",\n        plural=\"ingressrouteudps\",\n        singular=\"ingressrouteudp\",\n    ),",
        "detail": "phidata.phi.k8s.app.traefik.crds",
        "documentation": {}
    },
    {
        "label": "middleware_crd",
        "kind": 5,
        "importPath": "phidata.phi.k8s.app.traefik.crds",
        "description": "phidata.phi.k8s.app.traefik.crds",
        "peekOfCode": "middleware_crd = CreateCustomResourceDefinition(\n    crd_name=\"middlewares.traefik.containo.us\",\n    app_name=traefik_name,\n    group=\"traefik.containo.us\",\n    names=CustomResourceDefinitionNames(\n        kind=\"Middleware\",\n        list_kind=\"MiddlewareList\",\n        plural=\"middlewares\",\n        singular=\"middleware\",\n    ),",
        "detail": "phidata.phi.k8s.app.traefik.crds",
        "documentation": {}
    },
    {
        "label": "middlewaretcp_crd",
        "kind": 5,
        "importPath": "phidata.phi.k8s.app.traefik.crds",
        "description": "phidata.phi.k8s.app.traefik.crds",
        "peekOfCode": "middlewaretcp_crd = CreateCustomResourceDefinition(\n    crd_name=\"middlewaretcps.traefik.containo.us\",\n    app_name=traefik_name,\n    group=\"traefik.containo.us\",\n    names=CustomResourceDefinitionNames(\n        kind=\"MiddlewareTCP\",\n        list_kind=\"MiddlewareTCPList\",\n        plural=\"middlewaretcps\",\n        singular=\"middlewaretcp\",\n    ),",
        "detail": "phidata.phi.k8s.app.traefik.crds",
        "documentation": {}
    },
    {
        "label": "serverstransport_crd",
        "kind": 5,
        "importPath": "phidata.phi.k8s.app.traefik.crds",
        "description": "phidata.phi.k8s.app.traefik.crds",
        "peekOfCode": "serverstransport_crd = CreateCustomResourceDefinition(\n    crd_name=\"serverstransports.traefik.containo.us\",\n    app_name=traefik_name,\n    group=\"traefik.containo.us\",\n    names=CustomResourceDefinitionNames(\n        kind=\"ServersTransport\",\n        list_kind=\"ServersTransportList\",\n        plural=\"serverstransports\",\n        singular=\"serverstransport\",\n    ),",
        "detail": "phidata.phi.k8s.app.traefik.crds",
        "documentation": {}
    },
    {
        "label": "tlsoption_crd",
        "kind": 5,
        "importPath": "phidata.phi.k8s.app.traefik.crds",
        "description": "phidata.phi.k8s.app.traefik.crds",
        "peekOfCode": "tlsoption_crd = CreateCustomResourceDefinition(\n    crd_name=\"tlsoptions.traefik.containo.us\",\n    app_name=traefik_name,\n    group=\"traefik.containo.us\",\n    names=CustomResourceDefinitionNames(\n        kind=\"TLSOption\",\n        list_kind=\"TLSOptionList\",\n        plural=\"tlsoptions\",\n        singular=\"tlsoption\",\n    ),",
        "detail": "phidata.phi.k8s.app.traefik.crds",
        "documentation": {}
    },
    {
        "label": "tlsstore_crd",
        "kind": 5,
        "importPath": "phidata.phi.k8s.app.traefik.crds",
        "description": "phidata.phi.k8s.app.traefik.crds",
        "peekOfCode": "tlsstore_crd = CreateCustomResourceDefinition(\n    crd_name=\"tlsstores.traefik.containo.us\",\n    app_name=traefik_name,\n    group=\"traefik.containo.us\",\n    names=CustomResourceDefinitionNames(\n        kind=\"TLSStore\",\n        list_kind=\"TLSStoreList\",\n        plural=\"tlsstores\",\n        singular=\"tlsstore\",\n    ),",
        "detail": "phidata.phi.k8s.app.traefik.crds",
        "documentation": {}
    },
    {
        "label": "traefikservice_crd",
        "kind": 5,
        "importPath": "phidata.phi.k8s.app.traefik.crds",
        "description": "phidata.phi.k8s.app.traefik.crds",
        "peekOfCode": "traefikservice_crd = CreateCustomResourceDefinition(\n    crd_name=\"traefikservices.traefik.containo.us\",\n    app_name=traefik_name,\n    group=\"traefik.containo.us\",\n    names=CustomResourceDefinitionNames(\n        kind=\"TraefikService\",\n        list_kind=\"TraefikServiceList\",\n        plural=\"traefikservices\",\n        singular=\"traefikservice\",\n    ),",
        "detail": "phidata.phi.k8s.app.traefik.crds",
        "documentation": {}
    },
    {
        "label": "TraefikRouter",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.traefik.router",
        "description": "phidata.phi.k8s.app.traefik.router",
        "peekOfCode": "class TraefikRouter(K8sApp):\n    # -*- App Name\n    name: str = \"traefik\"\n    # -*- Image Configuration\n    image_name: str = \"traefik\"\n    image_tag: str = \"v2.10\"\n    # -*- RBAC Configuration\n    # Create a ServiceAccount, ClusterRole, and ClusterRoleBinding\n    create_rbac: bool = True\n    # -*- Install traefik CRDs",
        "detail": "phidata.phi.k8s.app.traefik.router",
        "documentation": {}
    },
    {
        "label": "K8sWorkspaceVolumeType",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.base",
        "description": "phidata.phi.k8s.app.base",
        "peekOfCode": "class K8sWorkspaceVolumeType(str, Enum):\n    HostPath = \"HostPath\"\n    EmptyDir = \"EmptyDir\"\nclass AppVolumeType(str, Enum):\n    HostPath = \"HostPath\"\n    EmptyDir = \"EmptyDir\"\n    AwsEbs = \"AwsEbs\"\n    AwsEfs = \"AwsEfs\"\n    PersistentVolume = \"PersistentVolume\"\nclass LoadBalancerProvider(str, Enum):",
        "detail": "phidata.phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "AppVolumeType",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.base",
        "description": "phidata.phi.k8s.app.base",
        "peekOfCode": "class AppVolumeType(str, Enum):\n    HostPath = \"HostPath\"\n    EmptyDir = \"EmptyDir\"\n    AwsEbs = \"AwsEbs\"\n    AwsEfs = \"AwsEfs\"\n    PersistentVolume = \"PersistentVolume\"\nclass LoadBalancerProvider(str, Enum):\n    AWS = \"AWS\"\nclass K8sApp(AppBase):\n    # -*- Workspace Configuration",
        "detail": "phidata.phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "LoadBalancerProvider",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.base",
        "description": "phidata.phi.k8s.app.base",
        "peekOfCode": "class LoadBalancerProvider(str, Enum):\n    AWS = \"AWS\"\nclass K8sApp(AppBase):\n    # -*- Workspace Configuration\n    # Path to the workspace directory inside the container\n    # NOTE: if workspace_parent_dir_container_path is provided\n    #   workspace_dir_container_path is ignored and\n    #   derived using {workspace_parent_dir_container_path}/{workspace_name}\n    workspace_dir_container_path: str = \"/usr/local/app\"\n    # Path to the parent directory of the workspace inside the container",
        "detail": "phidata.phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "K8sApp",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.base",
        "description": "phidata.phi.k8s.app.base",
        "peekOfCode": "class K8sApp(AppBase):\n    # -*- Workspace Configuration\n    # Path to the workspace directory inside the container\n    # NOTE: if workspace_parent_dir_container_path is provided\n    #   workspace_dir_container_path is ignored and\n    #   derived using {workspace_parent_dir_container_path}/{workspace_name}\n    workspace_dir_container_path: str = \"/usr/local/app\"\n    # Path to the parent directory of the workspace inside the container\n    # When using git-sync, the git repo is cloned inside this directory\n    #   i.e. this is the parent directory of the workspace",
        "detail": "phidata.phi.k8s.app.base",
        "documentation": {}
    },
    {
        "label": "K8sBuildContext",
        "kind": 6,
        "importPath": "phidata.phi.k8s.app.context",
        "description": "phidata.phi.k8s.app.context",
        "peekOfCode": "class K8sBuildContext(BaseModel):\n    namespace: str = \"default\"\n    context: Optional[str] = None\n    service_account_name: Optional[str] = None\n    labels: Optional[Dict[str, str]] = None",
        "detail": "phidata.phi.k8s.app.context",
        "documentation": {}
    },
    {
        "label": "CreateCustomObject",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.apiextensions_k8s_io.v1.custom_object",
        "description": "phidata.phi.k8s.create.apiextensions_k8s_io.v1.custom_object",
        "peekOfCode": "class CreateCustomObject(CreateK8sResource):\n    name: str\n    app_name: str\n    crd: CreateCustomResourceDefinition\n    version: Optional[str] = None\n    spec: Optional[Dict[str, Any]] = None\n    namespace: Optional[str] = None\n    service_account_name: Optional[str] = None\n    labels: Optional[Dict[str, str]] = None\n    def _create(self) -> CustomObject:",
        "detail": "phidata.phi.k8s.create.apiextensions_k8s_io.v1.custom_object",
        "documentation": {}
    },
    {
        "label": "CreateCustomResourceDefinition",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phidata.phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "peekOfCode": "class CreateCustomResourceDefinition(CreateK8sResource):\n    crd_name: str\n    app_name: str\n    group: str\n    names: CustomResourceDefinitionNames\n    scope: Literal[\"Cluster\", \"Namespaced\"] = \"Namespaced\"\n    versions: List[CustomResourceDefinitionVersion]\n    annotations: Optional[Dict[str, str]] = None\n    labels: Optional[Dict[str, str]] = None\n    def _create(self) -> CustomResourceDefinition:",
        "detail": "phidata.phi.k8s.create.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "CreateDeployment",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.apps.v1.deployment",
        "description": "phidata.phi.k8s.create.apps.v1.deployment",
        "peekOfCode": "class CreateDeployment(CreateK8sResource):\n    deploy_name: str\n    pod_name: str\n    app_name: str\n    namespace: Optional[str] = None\n    service_account_name: Optional[str] = None\n    replicas: Optional[int] = 1\n    containers: List[CreateContainer]\n    init_containers: Optional[List[CreateContainer]] = None\n    pod_node_selector: Optional[Dict[str, str]] = None",
        "detail": "phidata.phi.k8s.create.apps.v1.deployment",
        "documentation": {}
    },
    {
        "label": "create_component_labels_dict",
        "kind": 2,
        "importPath": "phidata.phi.k8s.create.common.labels",
        "description": "phidata.phi.k8s.create.common.labels",
        "peekOfCode": "def create_component_labels_dict(\n    component_name: str, app_name: str, labels: Optional[Dict[str, str]] = None\n) -> Dict[str, str]:\n    _labels = {\n        \"app.kubernetes.io/component\": component_name,\n        \"app.kubernetes.io/app\": app_name,\n    }\n    if labels:\n        _labels.update(labels)\n    return _labels",
        "detail": "phidata.phi.k8s.create.common.labels",
        "documentation": {}
    },
    {
        "label": "CreatePort",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.common.port",
        "description": "phidata.phi.k8s.create.common.port",
        "peekOfCode": "class CreatePort(BaseModel):\n    \"\"\"\n    Reference:\n    - https://matthewpalmer.net/kubernetes-app-developer/articles/kubernetes-ports-targetport-nodeport-service.html\n    \"\"\"\n    # If specified, this must be an IANA_SVC_NAME and unique within the pod.\n    # Each named port in a pod must have a unique name.\n    # Name for the port that can be referred to by services.\n    name: Optional[str] = None\n    # Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
        "detail": "phidata.phi.k8s.create.common.port",
        "documentation": {}
    },
    {
        "label": "CreateConfigMap",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.core.v1.config_map",
        "description": "phidata.phi.k8s.create.core.v1.config_map",
        "peekOfCode": "class CreateConfigMap(CreateK8sResource):\n    cm_name: str\n    app_name: str\n    namespace: Optional[str] = None\n    data: Optional[Dict[str, Any]] = None\n    labels: Optional[Dict[str, str]] = None\n    def _create(self) -> ConfigMap:\n        \"\"\"Creates the ConfigMap resource\"\"\"\n        cm_name = self.cm_name\n        # logger.debug(f\"Init ConfigMap resource: {cm_name}\")",
        "detail": "phidata.phi.k8s.create.core.v1.config_map",
        "documentation": {}
    },
    {
        "label": "CreateEnvVarFromConfigMap",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.core.v1.container",
        "description": "phidata.phi.k8s.create.core.v1.container",
        "peekOfCode": "class CreateEnvVarFromConfigMap(BaseModel):\n    env_var_name: str\n    configmap_name: str\n    configmap_key: Optional[str] = None\nclass CreateEnvVarFromSecret(BaseModel):\n    env_var_name: str\n    secret_name: str\n    secret_key: Optional[str] = None\nclass CreateContainer(CreateK8sObject):\n    container_name: str",
        "detail": "phidata.phi.k8s.create.core.v1.container",
        "documentation": {}
    },
    {
        "label": "CreateEnvVarFromSecret",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.core.v1.container",
        "description": "phidata.phi.k8s.create.core.v1.container",
        "peekOfCode": "class CreateEnvVarFromSecret(BaseModel):\n    env_var_name: str\n    secret_name: str\n    secret_key: Optional[str] = None\nclass CreateContainer(CreateK8sObject):\n    container_name: str\n    app_name: str\n    image_name: str\n    image_tag: str\n    args: Optional[List[str]] = None",
        "detail": "phidata.phi.k8s.create.core.v1.container",
        "documentation": {}
    },
    {
        "label": "CreateContainer",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.core.v1.container",
        "description": "phidata.phi.k8s.create.core.v1.container",
        "peekOfCode": "class CreateContainer(CreateK8sObject):\n    container_name: str\n    app_name: str\n    image_name: str\n    image_tag: str\n    args: Optional[List[str]] = None\n    command: Optional[List[str]] = None\n    image_pull_policy: Optional[ImagePullPolicy] = ImagePullPolicy.IF_NOT_PRESENT\n    env_vars: Optional[Dict[str, str]] = None\n    envs_from_configmap: Optional[List[str]] = None",
        "detail": "phidata.phi.k8s.create.core.v1.container",
        "documentation": {}
    },
    {
        "label": "CreateNamespace",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.core.v1.namespace",
        "description": "phidata.phi.k8s.create.core.v1.namespace",
        "peekOfCode": "class CreateNamespace(CreateK8sResource):\n    ns: str\n    app_name: str\n    # Finalizers is an opaque list of values that must be empty to permanently remove object from storage.\n    # More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/\n    finalizers: Optional[List[str]] = None\n    labels: Optional[Dict[str, str]] = None\n    def _create(self) -> Namespace:\n        ns_name = self.ns if self.ns else get_default_ns_name(self.app_name)\n        # logger.debug(f\"Init Namespace resource: {ns_name}\")",
        "detail": "phidata.phi.k8s.create.core.v1.namespace",
        "documentation": {}
    },
    {
        "label": "CreatePersistentVolume",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.core.v1.persistent_volume",
        "description": "phidata.phi.k8s.create.core.v1.persistent_volume",
        "peekOfCode": "class CreatePersistentVolume(CreateK8sResource):\n    pv_name: str\n    app_name: str\n    labels: Optional[Dict[str, str]] = None\n    # AccessModes contains all ways the volume can be mounted.\n    # More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes\n    access_modes: List[PVAccessMode] = [PVAccessMode.READ_WRITE_ONCE]\n    capacity: Optional[Dict[str, str]] = None\n    # A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid.\n    # More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options",
        "detail": "phidata.phi.k8s.create.core.v1.persistent_volume",
        "documentation": {}
    },
    {
        "label": "CreatePVC",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.core.v1.persistent_volume_claim",
        "description": "phidata.phi.k8s.create.core.v1.persistent_volume_claim",
        "peekOfCode": "class CreatePVC(CreateK8sResource):\n    pvc_name: str\n    app_name: str\n    namespace: Optional[str] = None\n    request_storage: str\n    storage_class_name: str\n    access_modes: List[PVAccessMode] = [PVAccessMode.READ_WRITE_ONCE]\n    labels: Optional[Dict[str, str]] = None\n    def _create(self) -> PersistentVolumeClaim:\n        \"\"\"Creates a PersistentVolumeClaim resource.\"\"\"",
        "detail": "phidata.phi.k8s.create.core.v1.persistent_volume_claim",
        "documentation": {}
    },
    {
        "label": "CreateSecret",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.core.v1.secret",
        "description": "phidata.phi.k8s.create.core.v1.secret",
        "peekOfCode": "class CreateSecret(CreateK8sResource):\n    secret_name: str\n    app_name: str\n    secret_type: Optional[str] = \"Opaque\"\n    namespace: Optional[str] = None\n    data: Optional[Dict[str, str]] = None\n    string_data: Optional[Dict[str, str]] = None\n    labels: Optional[Dict[str, str]] = None\n    def _create(self) -> Secret:\n        \"\"\"Creates a Secret resource\"\"\"",
        "detail": "phidata.phi.k8s.create.core.v1.secret",
        "documentation": {}
    },
    {
        "label": "CreateService",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.core.v1.service",
        "description": "phidata.phi.k8s.create.core.v1.service",
        "peekOfCode": "class CreateService(CreateK8sResource):\n    service_name: str\n    app_name: str\n    namespace: Optional[str] = None\n    service_account_name: Optional[str] = None\n    service_type: Optional[ServiceType] = None\n    # Deployment to expose using this service\n    deployment: CreateDeployment\n    # Ports to expose using this service\n    ports: Optional[List[CreatePort]] = None",
        "detail": "phidata.phi.k8s.create.core.v1.service",
        "documentation": {}
    },
    {
        "label": "CreateServiceAccount",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.core.v1.service_account",
        "description": "phidata.phi.k8s.create.core.v1.service_account",
        "peekOfCode": "class CreateServiceAccount(CreateK8sResource):\n    sa_name: str\n    app_name: str\n    automount_service_account_token: Optional[bool] = None\n    image_pull_secrets: Optional[List[str]] = None\n    secrets: Optional[List[ObjectReference]] = None\n    namespace: Optional[str] = None\n    labels: Optional[Dict[str, str]] = None\n    def _create(self) -> ServiceAccount:\n        sa_name = self.sa_name if self.sa_name else get_default_sa_name(self.app_name)",
        "detail": "phidata.phi.k8s.create.core.v1.service_account",
        "documentation": {}
    },
    {
        "label": "CreateVolume",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.core.v1.volume",
        "description": "phidata.phi.k8s.create.core.v1.volume",
        "peekOfCode": "class CreateVolume(CreateK8sObject):\n    volume_name: str\n    app_name: str\n    mount_path: str\n    volume_type: VolumeType\n    aws_ebs: Optional[AwsElasticBlockStoreVolumeSource] = None\n    config_map: Optional[ConfigMapVolumeSource] = None\n    empty_dir: Optional[EmptyDirVolumeSource] = None\n    gce_persistent_disk: Optional[GcePersistentDiskVolumeSource] = None\n    git_repo: Optional[GitRepoVolumeSource] = None",
        "detail": "phidata.phi.k8s.create.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "create_eks_admin_crb",
        "kind": 2,
        "importPath": "phidata.phi.k8s.create.crb.eks_admin_crb",
        "description": "phidata.phi.k8s.create.crb.eks_admin_crb",
        "peekOfCode": "def create_eks_admin_crb(\n    name: str = \"eks-admin-crb\",\n    cluster_role: str = \"cluster-admin\",\n    users: Optional[List[str]] = None,\n    groups: Optional[List[str]] = None,\n    service_accounts: Optional[List[str]] = None,\n    app_name: str = \"eks-admin\",\n    labels: Optional[Dict[str, str]] = None,\n    skip_create: bool = False,\n    skip_delete: bool = False,",
        "detail": "phidata.phi.k8s.create.crb.eks_admin_crb",
        "documentation": {}
    },
    {
        "label": "CreateIngress",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.networking_k8s_io.v1.ingress",
        "description": "phidata.phi.k8s.create.networking_k8s_io.v1.ingress",
        "peekOfCode": "class CreateIngress(CreateK8sResource):\n    ingress_name: str\n    app_name: str\n    namespace: Optional[str] = None\n    service_account_name: Optional[str] = None\n    rules: Optional[List[V1IngressRule]] = None\n    ingress_class_name: Optional[str] = None\n    default_backend: Optional[V1IngressBackend] = None\n    tls: Optional[List[V1IngressTLS]] = None\n    labels: Optional[Dict[str, str]] = None",
        "detail": "phidata.phi.k8s.create.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "CreateClusterRoleBinding",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "description": "phidata.phi.k8s.create.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "peekOfCode": "class CreateClusterRoleBinding(CreateK8sResource):\n    crb_name: str\n    cr_name: str\n    service_account_name: str\n    app_name: str\n    namespace: str\n    labels: Optional[Dict[str, str]] = None\n    def _create(self) -> ClusterRoleBinding:\n        \"\"\"Creates the ClusterRoleBinding resource\"\"\"\n        crb_name = self.crb_name",
        "detail": "phidata.phi.k8s.create.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "documentation": {}
    },
    {
        "label": "CreateClusterRole",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.rbac_authorization_k8s_io.v1.cluster_role",
        "description": "phidata.phi.k8s.create.rbac_authorization_k8s_io.v1.cluster_role",
        "peekOfCode": "class CreateClusterRole(CreateK8sResource):\n    cr_name: str\n    app_name: str\n    rules: Optional[List[PolicyRule]] = None\n    namespace: Optional[str] = None\n    labels: Optional[Dict[str, str]] = None\n    def _create(self) -> ClusterRole:\n        \"\"\"Creates the ClusterRole resource\"\"\"\n        cr_name = self.cr_name\n        # logger.debug(f\"Init ClusterRole resource: {cr_name}\")",
        "detail": "phidata.phi.k8s.create.rbac_authorization_k8s_io.v1.cluster_role",
        "documentation": {}
    },
    {
        "label": "CreateStorageClass",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.storage_k8s_io.v1.storage_class",
        "description": "phidata.phi.k8s.create.storage_k8s_io.v1.storage_class",
        "peekOfCode": "class CreateStorageClass(CreateK8sResource):\n    storage_class_name: str\n    app_name: str\n    storage_class_type: Optional[StorageClassType] = None\n    parameters: Optional[Dict[str, str]] = None\n    provisioner: Optional[str] = None\n    allow_volume_expansion: Optional[str] = None\n    mount_options: Optional[List[str]] = None\n    reclaim_policy: Optional[str] = None\n    volume_binding_mode: Optional[str] = None",
        "detail": "phidata.phi.k8s.create.storage_k8s_io.v1.storage_class",
        "documentation": {}
    },
    {
        "label": "CreateK8sObject",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.base",
        "description": "phidata.phi.k8s.create.base",
        "peekOfCode": "class CreateK8sObject(PhiBase):\n    def _create(self) -> K8sObject:\n        raise NotImplementedError\n    def create(self) -> K8sObject:\n        _resource = self._create()\n        if _resource is None:\n            raise ValueError(f\"Failed to create resource: {self.__class__.__name__}\")\n        resource_fields = _resource.model_dump(exclude_defaults=True)\n        base_fields = self.model_dump(exclude_defaults=True)\n        # Get fields that are set for the base class but not the resource class",
        "detail": "phidata.phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "CreateK8sResource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.create.base",
        "description": "phidata.phi.k8s.create.base",
        "peekOfCode": "class CreateK8sResource(PhiBase):\n    def _create(self) -> K8sResource:\n        raise NotImplementedError\n    def create(self) -> K8sResource:\n        _resource = self._create()\n        # logger.debug(f\"Created resource: {self.__class__.__name__}\")\n        if _resource is None:\n            raise ValueError(f\"Failed to create resource: {self.__class__.__name__}\")\n        resource_fields = _resource.model_dump(exclude_defaults=True)\n        base_fields = self.model_dump(exclude_defaults=True)",
        "detail": "phidata.phi.k8s.create.base",
        "documentation": {}
    },
    {
        "label": "ApiGroup",
        "kind": 6,
        "importPath": "phidata.phi.k8s.enums.api_group",
        "description": "phidata.phi.k8s.enums.api_group",
        "peekOfCode": "class ApiGroup(str, ExtendedEnum):\n    CORE = \"\"\n    APPS = \"app\"\n    RBAC_AUTH = \"rbac.authorization.k8s.io\"\n    STORAGE = \"storage.k8s.io\"\n    APIEXTENSIONS = \"apiextensions.k8s.io\"",
        "detail": "phidata.phi.k8s.enums.api_group",
        "documentation": {}
    },
    {
        "label": "ApiVersion",
        "kind": 6,
        "importPath": "phidata.phi.k8s.enums.api_version",
        "description": "phidata.phi.k8s.enums.api_version",
        "peekOfCode": "class ApiVersion(str, ExtendedEnum):\n    CORE_V1 = \"v1\"\n    APPS_V1 = \"apps/v1\"\n    RBAC_AUTH_V1 = \"rbac.authorization.k8s.io/v1\"\n    STORAGE_V1 = \"storage.k8s.io/v1\"\n    APIEXTENSIONS_V1 = \"apiextensions.k8s.io/v1\"\n    NETWORKING_V1 = \"networking.k8s.io/v1\"\n    CLIENT_AUTHENTICATION_V1ALPHA1 = \"client.authentication.k8s.io/v1alpha1\"\n    CLIENT_AUTHENTICATION_V1BETA1 = \"client.authentication.k8s.io/v1beta1\"\n    # CRDs for Traefik",
        "detail": "phidata.phi.k8s.enums.api_version",
        "documentation": {}
    },
    {
        "label": "ImagePullPolicy",
        "kind": 6,
        "importPath": "phidata.phi.k8s.enums.image_pull_policy",
        "description": "phidata.phi.k8s.enums.image_pull_policy",
        "peekOfCode": "class ImagePullPolicy(str, ExtendedEnum):\n    ALWAYS = \"Always\"\n    IF_NOT_PRESENT = \"IfNotPresent\"\n    NEVER = \"Never\"",
        "detail": "phidata.phi.k8s.enums.image_pull_policy",
        "documentation": {}
    },
    {
        "label": "Kind",
        "kind": 6,
        "importPath": "phidata.phi.k8s.enums.kind",
        "description": "phidata.phi.k8s.enums.kind",
        "peekOfCode": "class Kind(str, ExtendedEnum):\n    CLUSTERROLE = \"ClusterRole\"\n    CLUSTERROLEBINDING = \"ClusterRoleBinding\"\n    CONFIG = \"Config\"\n    CONFIGMAP = \"ConfigMap\"\n    CONTAINER = \"Container\"\n    DEPLOYMENT = \"Deployment\"\n    POD = \"Pod\"\n    NAMESPACE = \"Namespace\"\n    SERVICE = \"Service\"",
        "detail": "phidata.phi.k8s.enums.kind",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "kind": 6,
        "importPath": "phidata.phi.k8s.enums.protocol",
        "description": "phidata.phi.k8s.enums.protocol",
        "peekOfCode": "class Protocol(str, ExtendedEnum):\n    UDP = \"UDP\"\n    TCP = \"TCP\"\n    SCTP = \"SCTP\"",
        "detail": "phidata.phi.k8s.enums.protocol",
        "documentation": {}
    },
    {
        "label": "PVAccessMode",
        "kind": 6,
        "importPath": "phidata.phi.k8s.enums.pv",
        "description": "phidata.phi.k8s.enums.pv",
        "peekOfCode": "class PVAccessMode(str, ExtendedEnum):\n    # the volume can be mounted as read-write by a single node.\n    # ReadWriteOnce access mode still can allow multiple pods to access the volume\n    # when the pods are running on the same node.\n    READ_WRITE_ONCE = \"ReadWriteOnce\"\n    # the volume can be mounted as read-only by many nodes.\n    READ_ONLY_MANY = \"ReadOnlyMany\"\n    # the volume can be mounted as read-write by many nodes.\n    READ_WRITE_MANY = \"ReadWriteMany\"\n    # the volume can be mounted as read-write by a single Pod. Use ReadWriteOncePod access mode if",
        "detail": "phidata.phi.k8s.enums.pv",
        "documentation": {}
    },
    {
        "label": "RestartPolicy",
        "kind": 6,
        "importPath": "phidata.phi.k8s.enums.restart_policy",
        "description": "phidata.phi.k8s.enums.restart_policy",
        "peekOfCode": "class RestartPolicy(str, ExtendedEnum):\n    ALWAYS = \"Always\"\n    ON_FAILURE = \"OnFailure\"\n    NEVER = \"Never\"",
        "detail": "phidata.phi.k8s.enums.restart_policy",
        "documentation": {}
    },
    {
        "label": "ServiceType",
        "kind": 6,
        "importPath": "phidata.phi.k8s.enums.service_type",
        "description": "phidata.phi.k8s.enums.service_type",
        "peekOfCode": "class ServiceType(str, ExtendedEnum):\n    CLUSTER_IP = \"ClusterIP\"\n    NODE_PORT = \"NodePort\"\n    LOAD_BALANCER = \"LoadBalancer\"\n    EXTERNAL_NAME = \"ExternalName\"",
        "detail": "phidata.phi.k8s.enums.service_type",
        "documentation": {}
    },
    {
        "label": "StorageClassType",
        "kind": 6,
        "importPath": "phidata.phi.k8s.enums.storage_class",
        "description": "phidata.phi.k8s.enums.storage_class",
        "peekOfCode": "class StorageClassType(str, ExtendedEnum):\n    GCE_SSD = \"GCE_SSD\"\n    GCE_STANDARD = \"GCE_STANDARD\"",
        "detail": "phidata.phi.k8s.enums.storage_class",
        "documentation": {}
    },
    {
        "label": "VolumeType",
        "kind": 6,
        "importPath": "phidata.phi.k8s.enums.volume_type",
        "description": "phidata.phi.k8s.enums.volume_type",
        "peekOfCode": "class VolumeType(str, ExtendedEnum):\n    AWS_EBS = \"AWS_EBS\"\n    EMPTY_DIR = \"EMPTY_DIR\"\n    PERSISTENT_VOLUME_CLAIM = \"PERSISTENT_VOLUME_CLAIM\"\n    CONFIG_MAP = \"CONFIG_MAP\"\n    SECRET = \"SECRET\"\n    GCE_PERSISTENT_DISK = \"GCE_PERSISTENT_DISK\"\n    GIT_REPO = \"GIT_REPO\"\n    HOST_PATH = \"HOST_PATH\"\n    LOCAL = \"LOCAL\"",
        "detail": "phidata.phi.k8s.enums.volume_type",
        "documentation": {}
    },
    {
        "label": "HelmChart",
        "kind": 6,
        "importPath": "phidata.phi.k8s.helm.chart",
        "description": "phidata.phi.k8s.helm.chart",
        "peekOfCode": "class HelmChart(ResourceBase):\n    chart: str\n    set: Optional[Dict[str, Any]] = None\n    values: Optional[Union[FilePath, List[FilePath]]] = None\n    flags: Optional[List[str]] = None\n    namespace: Optional[str] = None\n    create_namespace: bool = True\n    repo: Optional[str] = None\n    update_repo_before_install: bool = True\n    k8s_client: Optional[K8sApiClient] = None",
        "detail": "phidata.phi.k8s.helm.chart",
        "documentation": {}
    },
    {
        "label": "run_shell_command",
        "kind": 2,
        "importPath": "phidata.phi.k8s.helm.cli",
        "description": "phidata.phi.k8s.helm.cli",
        "peekOfCode": "def run_shell_command(args: List[str], display_result: bool = True, display_error: bool = True) -> CompletedProcess:\n    logger.debug(f\"Running command: {args}\")\n    result = run(args, capture_output=True, text=True)\n    if result.returncode != 0:\n        raise Exception(result.stderr)\n    if result.stdout and display_result:\n        print_info(result.stdout)\n    if result.stderr and display_error:\n        print_info(result.stderr)\n    return result",
        "detail": "phidata.phi.k8s.helm.cli",
        "documentation": {}
    },
    {
        "label": "CustomObject",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_object",
        "description": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_object",
        "peekOfCode": "class CustomObject(K8sResource):\n    \"\"\"\n    The CustomResourceDefinition must be created before creating this object.\n    When creating a CustomObject, provide the spec and generate the object body using\n        get_k8s_object()\n    References:\n        * https://github.com/kubernetes-client/python/blob/master/kubernetes/docs/CustomObjectsApi.md\n        * https://github.com/kubernetes-client/python/blob/master/examples/custom_object.py\n    \"\"\"\n    resource_type: str = \"CustomObject\"",
        "detail": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_object",
        "documentation": {}
    },
    {
        "label": "CustomResourceDefinitionNames",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "peekOfCode": "class CustomResourceDefinitionNames(K8sObject):\n    \"\"\"\n    Reference:\n    - https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_custom_resource_definition_names.py\n    \"\"\"\n    resource_type: str = \"CustomResourceDefinitionNames\"\n    # categories is a list of grouped resources this custom resource belongs to (e.g. 'all').\n    # This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.\n    categories: Optional[List[str]] = None\n    # kind is the serialized kind of the resource. It is normally CamelCase and singular.",
        "detail": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "CustomResourceDefinitionVersion",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "peekOfCode": "class CustomResourceDefinitionVersion(K8sObject):\n    \"\"\"\n    Reference:\n    - https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_custom_resource_definition_version.py\n    \"\"\"\n    resource_type: str = \"CustomResourceDefinitionVersion\"\n    # name is the version name, e.g. “v1”, “v2beta1”, etc.\n    # The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.\n    name: str\n    # served is a flag enabling/disabling this version from being served via REST APIs",
        "detail": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "CustomResourceDefinitionSpec",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "peekOfCode": "class CustomResourceDefinitionSpec(K8sObject):\n    \"\"\"\n    Reference:\n    - https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_custom_resource_definition_spec.py\n    \"\"\"\n    resource_type: str = \"CustomResourceDefinitionSpec\"\n    group: str\n    names: CustomResourceDefinitionNames\n    preserve_unknown_fields: Optional[bool] = Field(None, alias=\"preserveUnknownFields\")\n    # scope indicates whether the defined custom resource is cluster- or namespace-scoped.",
        "detail": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "CustomResourceDefinition",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "description": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "peekOfCode": "class CustomResourceDefinition(K8sResource):\n    \"\"\"\n    References:\n    - Doc: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#customresourcedefinition-v1-apiextensions-k8s-io\n    - Type: https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_custom_resource_definition.py\n    \"\"\"\n    resource_type: str = \"CustomResourceDefinition\"\n    spec: CustomResourceDefinitionSpec\n    # List of fields to include in the K8s manifest\n    fields_for_k8s_manifest: List[str] = [\"spec\"]",
        "detail": "phidata.phi.k8s.resource.apiextensions_k8s_io.v1.custom_resource_definition",
        "documentation": {}
    },
    {
        "label": "DeploymentSpec",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.apps.v1.deployment",
        "description": "phidata.phi.k8s.resource.apps.v1.deployment",
        "peekOfCode": "class DeploymentSpec(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#deploymentspec-v1-apps\n    \"\"\"\n    resource_type: str = \"DeploymentSpec\"\n    # Minimum number of seconds for which a newly created pod should be ready\n    # without any of its container crashing, for it to be considered available.\n    # Defaults to 0 (pod will be considered available as soon as it is ready)\n    min_ready_seconds: Optional[int] = Field(None, alias=\"minReadySeconds\")",
        "detail": "phidata.phi.k8s.resource.apps.v1.deployment",
        "documentation": {}
    },
    {
        "label": "Deployment",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.apps.v1.deployment",
        "description": "phidata.phi.k8s.resource.apps.v1.deployment",
        "peekOfCode": "class Deployment(K8sResource):\n    \"\"\"\n    Deployments are used to run containers.\n    Containers are run in Pods or ReplicaSets, and Deployments manages those Pods or ReplicaSets.\n    A Deployment provides declarative updates for Pods and ReplicaSets.\n    References:\n    - Docs:\n        https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#deployment-v1-apps\n        https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\n    - Type: https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_deployment.py",
        "detail": "phidata.phi.k8s.resource.apps.v1.deployment",
        "documentation": {}
    },
    {
        "label": "RollingUpdateDeployment",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.apps.v1.deployment_strategy",
        "description": "phidata.phi.k8s.resource.apps.v1.deployment_strategy",
        "peekOfCode": "class RollingUpdateDeployment(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#rollingupdatedeployment-v1-apps\n    \"\"\"\n    resource_type: str = \"RollingUpdateDeployment\"\n    max_surge: Optional[Union[int, str]] = Field(None, alias=\"maxSurge\")\n    max_unavailable: Optional[Union[int, str]] = Field(None, alias=\"maxUnavailable\")\n    def get_k8s_object(self) -> V1RollingUpdateDeployment:\n        # Return a V1RollingUpdateDeployment object",
        "detail": "phidata.phi.k8s.resource.apps.v1.deployment_strategy",
        "documentation": {}
    },
    {
        "label": "DeploymentStrategy",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.apps.v1.deployment_strategy",
        "description": "phidata.phi.k8s.resource.apps.v1.deployment_strategy",
        "peekOfCode": "class DeploymentStrategy(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#deploymentstrategy-v1-apps\n    \"\"\"\n    resource_type: str = \"DeploymentStrategy\"\n    rolling_update: RollingUpdateDeployment = Field(RollingUpdateDeployment(), alias=\"rollingUpdate\")\n    type: Literal[\"Recreate\", \"RollingUpdate\"] = \"RollingUpdate\"\n    def get_k8s_object(self) -> V1DeploymentStrategy:\n        # Return a V1DeploymentStrategy object",
        "detail": "phidata.phi.k8s.resource.apps.v1.deployment_strategy",
        "documentation": {}
    },
    {
        "label": "ConfigMap",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.config_map",
        "description": "phidata.phi.k8s.resource.core.v1.config_map",
        "peekOfCode": "class ConfigMap(K8sResource):\n    \"\"\"\n    ConfigMaps allow you to decouple configuration from image content to keep containerized applications portable.\n    In short, they store configs. For config variables which contain sensitive info, use Secrets.\n    References:\n        * Docs:\n            https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#configmap-v1-core\n            https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/\n        * Type: https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_config_map.py\n    \"\"\"",
        "detail": "phidata.phi.k8s.resource.core.v1.config_map",
        "documentation": {}
    },
    {
        "label": "Probe",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.container",
        "description": "phidata.phi.k8s.resource.core.v1.container",
        "peekOfCode": "class Probe(K8sObject):\n    \"\"\"\n    Probe describes a health check to be performed against a container to determine whether it is ready for traffic.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#probe-v1-core\n    \"\"\"\n    resource_type: str = \"Probe\"\n    # Minimum consecutive failures for the probe to be considered failed after having succeeded.\n    # Defaults to 3. Minimum value is 1.\n    failure_threshold: Optional[int] = Field(None, alias=\"failureThreshold\")\n    # GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling",
        "detail": "phidata.phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "ResourceFieldSelector",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.container",
        "description": "phidata.phi.k8s.resource.core.v1.container",
        "peekOfCode": "class ResourceFieldSelector(K8sObject):\n    \"\"\"\n    ResourceFieldSelector represents container resources (cpu, memory) and their output format\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcefieldselector-v1-core\n    \"\"\"\n    resource_type: str = \"ResourceFieldSelector\"\n    container_name: str = Field(..., alias=\"containerName\")\n    divisor: str\n    resource: str\n    def get_k8s_object(self) -> V1ResourceFieldSelector:",
        "detail": "phidata.phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "ObjectFieldSelector",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.container",
        "description": "phidata.phi.k8s.resource.core.v1.container",
        "peekOfCode": "class ObjectFieldSelector(K8sObject):\n    \"\"\"\n    ObjectFieldSelector selects an APIVersioned field of an object.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#objectfieldselector-v1-core\n    \"\"\"\n    resource_type: str = \"ObjectFieldSelector\"\n    api_version: str = Field(..., alias=\"apiVersion\")\n    field_path: str = Field(..., alias=\"fieldPath\")\n    def get_k8s_object(self) -> V1ObjectFieldSelector:\n        # Return a V1ObjectFieldSelector object",
        "detail": "phidata.phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "SecretKeySelector",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.container",
        "description": "phidata.phi.k8s.resource.core.v1.container",
        "peekOfCode": "class SecretKeySelector(K8sObject):\n    \"\"\"\n    SecretKeySelector selects a key of a Secret.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#secretkeyselector-v1-core\n    \"\"\"\n    resource_type: str = \"SecretKeySelector\"\n    key: str\n    name: str\n    optional: Optional[bool] = None\n    def get_k8s_object(self) -> V1SecretKeySelector:",
        "detail": "phidata.phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "ConfigMapKeySelector",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.container",
        "description": "phidata.phi.k8s.resource.core.v1.container",
        "peekOfCode": "class ConfigMapKeySelector(K8sObject):\n    \"\"\"\n    Selects a key from a ConfigMap.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#configmapkeyselector-v1-core\n    \"\"\"\n    resource_type: str = \"ConfigMapKeySelector\"\n    key: str\n    name: str\n    optional: Optional[bool] = None\n    def get_k8s_object(self) -> V1ConfigMapKeySelector:",
        "detail": "phidata.phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "EnvVarSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.container",
        "description": "phidata.phi.k8s.resource.core.v1.container",
        "peekOfCode": "class EnvVarSource(K8sObject):\n    \"\"\"\n    EnvVarSource represents a source for the value of an EnvVar.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#envvarsource-v1-core\n    \"\"\"\n    resource_type: str = \"EnvVarSource\"\n    config_map_key_ref: Optional[ConfigMapKeySelector] = Field(None, alias=\"configMapKeyRef\")\n    field_ref: Optional[ObjectFieldSelector] = Field(None, alias=\"fieldRef\")\n    resource_field_ref: Optional[ResourceFieldSelector] = Field(None, alias=\"resourceFieldRef\")\n    secret_key_ref: Optional[SecretKeySelector] = Field(None, alias=\"secretKeyRef\")",
        "detail": "phidata.phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "EnvVar",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.container",
        "description": "phidata.phi.k8s.resource.core.v1.container",
        "peekOfCode": "class EnvVar(K8sObject):\n    \"\"\"\n    EnvVar represents an environment variable present in a Container.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#envvar-v1-core\n    \"\"\"\n    resource_type: str = \"EnvVar\"\n    name: str\n    value: Optional[str] = None\n    value_from: Optional[EnvVarSource] = Field(None, alias=\"valueFrom\")\n    def get_k8s_object(self) -> V1EnvVar:",
        "detail": "phidata.phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "ConfigMapEnvSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.container",
        "description": "phidata.phi.k8s.resource.core.v1.container",
        "peekOfCode": "class ConfigMapEnvSource(K8sObject):\n    \"\"\"\n    ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n    The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#configmapenvsource-v1-core\n    \"\"\"\n    resource_type: str = \"ConfigMapEnvSource\"\n    name: str\n    optional: Optional[bool] = None\n    def get_k8s_object(self) -> V1ConfigMapEnvSource:",
        "detail": "phidata.phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "SecretEnvSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.container",
        "description": "phidata.phi.k8s.resource.core.v1.container",
        "peekOfCode": "class SecretEnvSource(K8sObject):\n    \"\"\"\n    SecretEnvSource selects a Secret to populate the environment variables with.\n    The contents of the target Secret's Data field will represent the key-value pairs as environment variables.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#secretenvsource-v1-core\n    \"\"\"\n    resource_type: str = \"SecretEnvSource\"\n    name: str\n    optional: Optional[bool] = None\n    def get_k8s_object(self) -> V1SecretEnvSource:",
        "detail": "phidata.phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "EnvFromSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.container",
        "description": "phidata.phi.k8s.resource.core.v1.container",
        "peekOfCode": "class EnvFromSource(K8sObject):\n    \"\"\"\n    EnvFromSource represents the source of a set of ConfigMaps\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#envfromsource-v1-core\n    \"\"\"\n    resource_type: str = \"EnvFromSource\"\n    config_map_ref: Optional[ConfigMapEnvSource] = Field(None, alias=\"configMapRef\")\n    prefix: Optional[str] = None\n    secret_ref: Optional[SecretEnvSource] = Field(None, alias=\"secretRef\")\n    def get_k8s_object(self) -> V1EnvFromSource:",
        "detail": "phidata.phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "ContainerPort",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.container",
        "description": "phidata.phi.k8s.resource.core.v1.container",
        "peekOfCode": "class ContainerPort(K8sObject):\n    \"\"\"\n    ContainerPort represents a network port in a single container.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#containerport-v1-core\n    \"\"\"\n    resource_type: str = \"ContainerPort\"\n    # If specified, this must be an IANA_SVC_NAME and unique within the pod.\n    # Each named port in a pod must have a unique name.\n    # Name for the port that can be referred to by services.\n    name: Optional[str] = None",
        "detail": "phidata.phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "VolumeMount",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.container",
        "description": "phidata.phi.k8s.resource.core.v1.container",
        "peekOfCode": "class VolumeMount(K8sObject):\n    \"\"\"\n    VolumeMount describes a mounting of a Volume within a container.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#volumemount-v1-core\n    \"\"\"\n    resource_type: str = \"VolumeMount\"\n    # Path within the container at which the volume should be mounted. Must not contain ':'\n    mount_path: str = Field(..., alias=\"mountPath\")\n    # mountPropagation determines how mounts are propagated from the host to container and the other way around.\n    # When not set, MountPropagationNone is used. This field is beta in 1.10.",
        "detail": "phidata.phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "Container",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.container",
        "description": "phidata.phi.k8s.resource.core.v1.container",
        "peekOfCode": "class Container(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core\n    \"\"\"\n    resource_type: str = \"Container\"\n    # Arguments to the entrypoint. The docker image's CMD is used if this is not provided.\n    args: Optional[List[str]] = None\n    # Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.\n    command: Optional[List[str]] = None",
        "detail": "phidata.phi.k8s.resource.core.v1.container",
        "documentation": {}
    },
    {
        "label": "LocalObjectReference",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.local_object_reference",
        "description": "phidata.phi.k8s.resource.core.v1.local_object_reference",
        "peekOfCode": "class LocalObjectReference(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#localobjectreference-v1-core\n    \"\"\"\n    resource_type: str = \"LocalObjectReference\"\n    # Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n    name: str\n    def get_k8s_object(self) -> V1LocalObjectReference:\n        # Return a V1LocalObjectReference object",
        "detail": "phidata.phi.k8s.resource.core.v1.local_object_reference",
        "documentation": {}
    },
    {
        "label": "NamespaceSpec",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.namespace",
        "description": "phidata.phi.k8s.resource.core.v1.namespace",
        "peekOfCode": "class NamespaceSpec(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#namespacespec-v1-core\n    \"\"\"\n    resource_type: str = \"NamespaceSpec\"\n    # Finalizers is an opaque list of values that must be empty to permanently remove object from storage.\n    # More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/\n    finalizers: Optional[List[str]] = None\n    def get_k8s_object(self) -> V1NamespaceSpec:",
        "detail": "phidata.phi.k8s.resource.core.v1.namespace",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.namespace",
        "description": "phidata.phi.k8s.resource.core.v1.namespace",
        "peekOfCode": "class Namespace(K8sResource):\n    \"\"\"\n    Kubernetes supports multiple virtual clusters backed by the same physical cluster.\n    These virtual clusters are called namespaces.\n    References:\n        * Docs:\n            https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#namespace-v1-core\n            https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n        * Type: https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_namespace.py\n    \"\"\"",
        "detail": "phidata.phi.k8s.resource.core.v1.namespace",
        "documentation": {}
    },
    {
        "label": "NodeSelectorRequirement",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.node_selector",
        "description": "phidata.phi.k8s.resource.core.v1.node_selector",
        "peekOfCode": "class NodeSelectorRequirement(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#nodeselectorrequirement-v1-core\n    \"\"\"\n    resource_type: str = \"NodeSelectorRequirement\"\n    # The label key that the selector applies to.\n    key: str\n    # Represents a key's relationship to a set of values.\n    # Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
        "detail": "phidata.phi.k8s.resource.core.v1.node_selector",
        "documentation": {}
    },
    {
        "label": "NodeSelectorTerm",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.node_selector",
        "description": "phidata.phi.k8s.resource.core.v1.node_selector",
        "peekOfCode": "class NodeSelectorTerm(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#nodeselectorterm-v1-core\n    \"\"\"\n    resource_type: str = \"NodeSelectorTerm\"\n    # A list of node selector requirements by node's labels.\n    match_expressions: Optional[List[NodeSelectorRequirement]] = Field(..., alias=\"matchExpressions\")\n    # A list of node selector requirements by node's fields.\n    match_fields: Optional[List[NodeSelectorRequirement]] = Field(..., alias=\"matchFields\")",
        "detail": "phidata.phi.k8s.resource.core.v1.node_selector",
        "documentation": {}
    },
    {
        "label": "NodeSelector",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.node_selector",
        "description": "phidata.phi.k8s.resource.core.v1.node_selector",
        "peekOfCode": "class NodeSelector(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#nodeselector-v1-core\n    \"\"\"\n    resource_type: str = \"NodeSelector\"\n    # A node selector represents the union of the results of one or more label queries over a set of nodes;\n    # that is, it represents the OR of the selectors represented by the node selector terms.\n    node_selector_terms: List[NodeSelectorTerm] = Field(..., alias=\"nodeSelectorTerms\")\n    def get_k8s_object(",
        "detail": "phidata.phi.k8s.resource.core.v1.node_selector",
        "documentation": {}
    },
    {
        "label": "ObjectReference",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.object_reference",
        "description": "phidata.phi.k8s.resource.core.v1.object_reference",
        "peekOfCode": "class ObjectReference(K8sResource):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/objectreference-v1-core\n    \"\"\"\n    resource_type: str = \"ObjectReference\"\n    # Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n    name: str\n    # Namespace of the referent.\n    # More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
        "detail": "phidata.phi.k8s.resource.core.v1.object_reference",
        "documentation": {}
    },
    {
        "label": "PersistentVolumeSpec",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.persistent_volume",
        "description": "phidata.phi.k8s.resource.core.v1.persistent_volume",
        "peekOfCode": "class PersistentVolumeSpec(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#persistentvolumeclaim-v1-core\n    \"\"\"\n    resource_type: str = \"PersistentVolumeSpec\"\n    # AccessModes contains all ways the volume can be mounted.\n    # More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes\n    access_modes: List[PVAccessMode] = Field(..., alias=\"accessModes\")\n    # A description of the persistent volume's resources and capacity.",
        "detail": "phidata.phi.k8s.resource.core.v1.persistent_volume",
        "documentation": {}
    },
    {
        "label": "PersistentVolume",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.persistent_volume",
        "description": "phidata.phi.k8s.resource.core.v1.persistent_volume",
        "peekOfCode": "class PersistentVolume(K8sResource):\n    \"\"\"\n    A PersistentVolume (PV) is a piece of storage in the cluster that has been provisioned by an administrator\n    or dynamically provisioned using Storage Classes.\n    In Kubernetes, each container can read and write to its own, isolated filesystem.\n    But, data on that filesystem will be destroyed when the container is restarted.\n    To solve this, Kubernetes has volumes.\n    Volumes let your pod write to a filesystem that exists as long as the pod exists.\n    Volumes also let you share data between containers in the same pod.\n    But, data in that volume will be destroyed when the pod is restarted.",
        "detail": "phidata.phi.k8s.resource.core.v1.persistent_volume",
        "documentation": {}
    },
    {
        "label": "PersistentVolumeClaimSpec",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.persistent_volume_claim",
        "description": "phidata.phi.k8s.resource.core.v1.persistent_volume_claim",
        "peekOfCode": "class PersistentVolumeClaimSpec(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#persistentvolumeclaim-v1-core\n    \"\"\"\n    resource_type: str = \"PersistentVolumeClaimSpec\"\n    access_modes: List[PVAccessMode] = Field(..., alias=\"accessModes\")\n    resources: ResourceRequirements\n    storage_class_name: str = Field(..., alias=\"storageClassName\")\n    @field_serializer(\"access_modes\")",
        "detail": "phidata.phi.k8s.resource.core.v1.persistent_volume_claim",
        "documentation": {}
    },
    {
        "label": "PersistentVolumeClaim",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.persistent_volume_claim",
        "description": "phidata.phi.k8s.resource.core.v1.persistent_volume_claim",
        "peekOfCode": "class PersistentVolumeClaim(K8sResource):\n    \"\"\"\n    A PersistentVolumeClaim (PVC) is a request for storage by a user.\n    It is similar to a Pod. Pods consume node resources and PVCs consume PV resources.\n    A PersistentVolume (PV) is a piece of storage in the cluster that has been provisioned\n    by an administrator or dynamically provisioned using Storage Classes.\n    With Pak8, we prefer to use Storage Classes, read more about Dynamic provisioning here: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#dynamic\n    References:\n        * Docs:\n            https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#persistentvolumeclaim-v1-core",
        "detail": "phidata.phi.k8s.resource.core.v1.persistent_volume_claim",
        "documentation": {}
    },
    {
        "label": "Pod",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.pod",
        "description": "phidata.phi.k8s.resource.core.v1.pod",
        "peekOfCode": "class Pod(K8sResource):\n    \"\"\"\n    There are no attributes in the Pod model because we don't create Pods manually.\n    This class exists only to read from the K8s cluster.\n    References:\n        * Doc: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#pod-v1-core\n        * Type: https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_pod.py\n    \"\"\"\n    resource_type: str = \"Pod\"\n    @staticmethod",
        "detail": "phidata.phi.k8s.resource.core.v1.pod",
        "documentation": {}
    },
    {
        "label": "PodSpec",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.pod_spec",
        "description": "phidata.phi.k8s.resource.core.v1.pod_spec",
        "peekOfCode": "class PodSpec(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#podspec-v1-core\n    \"\"\"\n    resource_type: str = \"PodSpec\"\n    # Optional duration in seconds the pod may be active on the node relative to StartTime before\n    # the system will actively try to mark it failed and kill associated containers.\n    # Value must be a positive integer.\n    active_deadline_seconds: Optional[int] = Field(None, alias=\"activeDeadlineSeconds\")",
        "detail": "phidata.phi.k8s.resource.core.v1.pod_spec",
        "documentation": {}
    },
    {
        "label": "PodTemplateSpec",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.pod_template_spec",
        "description": "phidata.phi.k8s.resource.core.v1.pod_template_spec",
        "peekOfCode": "class PodTemplateSpec(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#podtemplatespec-v1-core\n    \"\"\"\n    resource_type: str = \"PodTemplateSpec\"\n    metadata: ObjectMeta\n    spec: PodSpec\n    def get_k8s_object(self) -> V1PodTemplateSpec:\n        # Return a V1PodTemplateSpec object",
        "detail": "phidata.phi.k8s.resource.core.v1.pod_template_spec",
        "documentation": {}
    },
    {
        "label": "ResourceRequirements",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.resource_requirements",
        "description": "phidata.phi.k8s.resource.core.v1.resource_requirements",
        "peekOfCode": "class ResourceRequirements(K8sObject):\n    \"\"\"\n    ResourceRequirements describes the compute resource requirements.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core\n    \"\"\"\n    resource_type: str = \"ResourceRequirements\"\n    # Limits describes the maximum amount of compute resources allowed\n    limits: Optional[Dict[str, str]] = None\n    # Requests describes the minimum amount of compute resources required.\n    # If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,",
        "detail": "phidata.phi.k8s.resource.core.v1.resource_requirements",
        "documentation": {}
    },
    {
        "label": "Secret",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.secret",
        "description": "phidata.phi.k8s.resource.core.v1.secret",
        "peekOfCode": "class Secret(K8sResource):\n    \"\"\"\n    References:\n    - Doc: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#secret-v1-core\n    - Type: https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_secret.py\n    \"\"\"\n    resource_type: str = \"Secret\"\n    type: str\n    data: Optional[Dict[str, str]] = None\n    string_data: Optional[Dict[str, str]] = Field(None, alias=\"stringData\")",
        "detail": "phidata.phi.k8s.resource.core.v1.secret",
        "documentation": {}
    },
    {
        "label": "ServicePort",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.service",
        "description": "phidata.phi.k8s.resource.core.v1.service",
        "peekOfCode": "class ServicePort(K8sObject):\n    \"\"\"\n    Reference:\n    - Docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#serviceport-v1-core\n    - Type: https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_service_port.py\n    \"\"\"\n    resource_type: str = \"ServicePort\"\n    # The name of this port within the service. This must be a DNS_LABEL.\n    # All ports within a ServiceSpec must have unique names.\n    # When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort.",
        "detail": "phidata.phi.k8s.resource.core.v1.service",
        "documentation": {}
    },
    {
        "label": "ServiceSpec",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.service",
        "description": "phidata.phi.k8s.resource.core.v1.service",
        "peekOfCode": "class ServiceSpec(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#servicespec-v1-core\n    \"\"\"\n    resource_type: str = \"ServiceSpec\"\n    # type determines how the Service is exposed.\n    # Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer.\n    # \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints.\n    #   Endpoints are determined by the selector or if that is not specified,",
        "detail": "phidata.phi.k8s.resource.core.v1.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.service",
        "description": "phidata.phi.k8s.resource.core.v1.service",
        "peekOfCode": "class Service(K8sResource):\n    \"\"\"A service resource exposes an application running on a set of Pods\n    as a network service.\n    References:\n    - Docs:\n        https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#service-v1-core\n        https://kubernetes.io/docs/concepts/services-networking/service/\n    - Type: https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_service.py\n    Notes:\n        * The name of a Service object must be a valid DNS label name.",
        "detail": "phidata.phi.k8s.resource.core.v1.service",
        "documentation": {}
    },
    {
        "label": "ServiceAccount",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.service_account",
        "description": "phidata.phi.k8s.resource.core.v1.service_account",
        "peekOfCode": "class ServiceAccount(K8sResource):\n    \"\"\"A service account provides an identity for processes that run in a Pod.\n    When you create a pod, if you do not specify a service account, it is automatically assigned the default\n    service account in the same namespace.\n    References:\n    - Docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#serviceaccount-v1-core\n    - Type: https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_service_account.py\n    \"\"\"\n    resource_type: str = \"ServiceAccount\"\n    # AutomountServiceAccountToken indicates whether pods running as this service account",
        "detail": "phidata.phi.k8s.resource.core.v1.service_account",
        "documentation": {}
    },
    {
        "label": "Toleration",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.toleration",
        "description": "phidata.phi.k8s.resource.core.v1.toleration",
        "peekOfCode": "class Toleration(K8sObject):\n    \"\"\"\n    The pod this Toleration is attached to tolerates any taint that matches\n    the triple <key,value,effect> using the matching operator <operator>.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#toleration-v1-core\n    \"\"\"\n    resource_type: str = \"Toleration\"\n    # Effect indicates the taint effect to match.\n    # Empty means match all taint effects.\n    # When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
        "detail": "phidata.phi.k8s.resource.core.v1.toleration",
        "documentation": {}
    },
    {
        "label": "TopologySpreadConstraint",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.topology_spread_constraints",
        "description": "phidata.phi.k8s.resource.core.v1.topology_spread_constraints",
        "peekOfCode": "class TopologySpreadConstraint(K8sObject):\n    \"\"\"\n    TopologySpreadConstraint specifies how to spread matching pods among the given topology.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#topologyspreadconstraint-v1-core\n    \"\"\"\n    resource_type: str = \"TopologySpreadConstraint\"\n    # LabelSelector is used to find matching pods. Pods that match this label selector are counted\n    # to determine the number of pods in their corresponding topology domain.\n    label_selector: Optional[LabelSelector] = Field(None, alias=\"labelSelector\")\n    # MaxSkew describes the degree to which pods may be unevenly distributed.",
        "detail": "phidata.phi.k8s.resource.core.v1.topology_spread_constraints",
        "documentation": {}
    },
    {
        "label": "Volume",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume",
        "description": "phidata.phi.k8s.resource.core.v1.volume",
        "peekOfCode": "class Volume(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#volume-v1-core\n    \"\"\"\n    resource_type: str = \"Volume\"\n    # Volume's name. Must be a DNS_LABEL and unique within the pod.\n    # More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n    name: str\n    ## Volume Sources",
        "detail": "phidata.phi.k8s.resource.core.v1.volume",
        "documentation": {}
    },
    {
        "label": "VolumeNodeAffinity",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_node_affinity",
        "description": "phidata.phi.k8s.resource.core.v1.volume_node_affinity",
        "peekOfCode": "class VolumeNodeAffinity(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#volumenodeaffinity-v1-core\n    \"\"\"\n    resource_type: str = \"VolumeNodeAffinity\"\n    # Required specifies hard node constraints that must be met.\n    required: NodeSelector\n    def get_k8s_object(\n        self,",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_node_affinity",
        "documentation": {}
    },
    {
        "label": "KeyToPath",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_source",
        "description": "phidata.phi.k8s.resource.core.v1.volume_source",
        "peekOfCode": "class KeyToPath(K8sObject):\n    resource_type: str = \"KeyToPath\"\n    key: str\n    mode: int\n    path: str\nclass AwsElasticBlockStoreVolumeSource(K8sObject):\n    \"\"\"\n    Reference:\n    - https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_aws_elastic_block_store_volume_source.py\n    \"\"\"",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "AwsElasticBlockStoreVolumeSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_source",
        "description": "phidata.phi.k8s.resource.core.v1.volume_source",
        "peekOfCode": "class AwsElasticBlockStoreVolumeSource(K8sObject):\n    \"\"\"\n    Reference:\n    - https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_aws_elastic_block_store_volume_source.py\n    \"\"\"\n    resource_type: str = \"AwsElasticBlockStoreVolumeSource\"\n    # Filesystem type of the volume that you want to mount.\n    # Tip: Ensure that the filesystem type is supported by the host operating system.\n    # Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n    # More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "LocalVolumeSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_source",
        "description": "phidata.phi.k8s.resource.core.v1.volume_source",
        "peekOfCode": "class LocalVolumeSource(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#localvolumesource-v1-core\n    \"\"\"\n    resource_type: str = \"LocalVolumeSource\"\n    # The full path to the volume on the node.\n    # It can be either a directory or block device (disk, partition, ...).\n    path: str\n    # Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "HostPathVolumeSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_source",
        "description": "phidata.phi.k8s.resource.core.v1.volume_source",
        "peekOfCode": "class HostPathVolumeSource(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#hostpathvolumesource-v1-core\n    \"\"\"\n    resource_type: str = \"HostPathVolumeSource\"\n    # Path of the directory on the host. If the path is a symlink, it will follow the link to the real path.\n    # More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n    path: str\n    # Type for HostPath Volume Defaults to \"\"",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "SecretVolumeSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_source",
        "description": "phidata.phi.k8s.resource.core.v1.volume_source",
        "peekOfCode": "class SecretVolumeSource(K8sObject):\n    \"\"\"\n    Reference:\n    - https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_secret_volume_source.py\n    \"\"\"\n    resource_type: str = \"SecretVolumeSource\"\n    secret_name: str = Field(..., alias=\"secretName\")\n    default_mode: Optional[int] = Field(None, alias=\"defaultMode\")\n    items: Optional[List[KeyToPath]] = None\n    optional: Optional[bool] = None",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "ConfigMapVolumeSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_source",
        "description": "phidata.phi.k8s.resource.core.v1.volume_source",
        "peekOfCode": "class ConfigMapVolumeSource(K8sObject):\n    \"\"\"\n    Reference:\n    - https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_config_map_volume_source.py\n    \"\"\"\n    resource_type: str = \"ConfigMapVolumeSource\"\n    name: str\n    default_mode: Optional[int] = Field(None, alias=\"defaultMode\")\n    items: Optional[List[KeyToPath]] = None\n    optional: Optional[bool] = None",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "EmptyDirVolumeSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_source",
        "description": "phidata.phi.k8s.resource.core.v1.volume_source",
        "peekOfCode": "class EmptyDirVolumeSource(K8sObject):\n    \"\"\"\n    Reference:\n    - https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_empty_dir_volume_source.py\n    \"\"\"\n    resource_type: str = \"EmptyDirVolumeSource\"\n    medium: Optional[str] = None\n    size_limit: Optional[str] = Field(None, alias=\"sizeLimit\")\n    def get_k8s_object(self) -> V1EmptyDirVolumeSource:\n        # Return a V1EmptyDirVolumeSource object",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "GcePersistentDiskVolumeSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_source",
        "description": "phidata.phi.k8s.resource.core.v1.volume_source",
        "peekOfCode": "class GcePersistentDiskVolumeSource(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#gcepersistentdiskvolumesource-v1-core\n    \"\"\"\n    resource_type: str = \"GcePersistentDiskVolumeSource\"\n    fs_type: str = Field(..., alias=\"fsType\")\n    partition: int\n    pd_name: str\n    read_only: Optional[bool] = Field(None, alias=\"readOnly\")",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "GitRepoVolumeSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_source",
        "description": "phidata.phi.k8s.resource.core.v1.volume_source",
        "peekOfCode": "class GitRepoVolumeSource(K8sObject):\n    \"\"\"\n    Reference:\n    - https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_git_repo_volume_source.py\n    \"\"\"\n    resource_type: str = \"GitRepoVolumeSource\"\n    directory: str\n    repository: str\n    revision: str\n    def get_k8s_object(self) -> V1GitRepoVolumeSource:",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "PersistentVolumeClaimVolumeSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_source",
        "description": "phidata.phi.k8s.resource.core.v1.volume_source",
        "peekOfCode": "class PersistentVolumeClaimVolumeSource(K8sObject):\n    \"\"\"\n    Reference:\n    - https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_persistent_volume_claim_volume_source.py\n    \"\"\"\n    resource_type: str = \"PersistentVolumeClaimVolumeSource\"\n    claim_name: str = Field(..., alias=\"claimName\")\n    read_only: Optional[bool] = Field(None, alias=\"readOnly\")\n    def get_k8s_object(\n        self,",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "NFSVolumeSource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_source",
        "description": "phidata.phi.k8s.resource.core.v1.volume_source",
        "peekOfCode": "class NFSVolumeSource(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#nfsvolumesource-v1-core\n    \"\"\"\n    resource_type: str = \"NFSVolumeSource\"\n    # Path that is exported by the NFS server.\n    # More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n    path: str\n    # ReadOnly here will force the NFS export to be mounted with read-only permissions.",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "ClaimRef",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_source",
        "description": "phidata.phi.k8s.resource.core.v1.volume_source",
        "peekOfCode": "class ClaimRef(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#persistentvolumespec-v1-core\n    \"\"\"\n    resource_type: str = \"ClaimRef\"\n    # Name of the referent.\n    # More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n    name: Optional[str] = None\n    # Namespace of the referent.",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "VolumeSourceType",
        "kind": 5,
        "importPath": "phidata.phi.k8s.resource.core.v1.volume_source",
        "description": "phidata.phi.k8s.resource.core.v1.volume_source",
        "peekOfCode": "VolumeSourceType = Union[\n    AwsElasticBlockStoreVolumeSource,\n    ConfigMapVolumeSource,\n    EmptyDirVolumeSource,\n    GcePersistentDiskVolumeSource,\n    GitRepoVolumeSource,\n    PersistentVolumeClaimVolumeSource,\n    SecretVolumeSource,\n    NFSVolumeSource,\n]",
        "detail": "phidata.phi.k8s.resource.core.v1.volume_source",
        "documentation": {}
    },
    {
        "label": "LabelSelector",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.meta.v1.label_selector",
        "description": "phidata.phi.k8s.resource.meta.v1.label_selector",
        "peekOfCode": "class LabelSelector(K8sObject):\n    \"\"\"\n    A label selector is a label query over a set of resources.\n    The result of matchLabels and matchExpressions are ANDed.\n    An empty label selector matches all objects.\n    A null label selector matches no objects.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#labelselector-v1-meta\n    \"\"\"\n    resource_type: str = \"LabelSelector\"\n    # matchLabels is a map of {key,value} pairs.",
        "detail": "phidata.phi.k8s.resource.meta.v1.label_selector",
        "documentation": {}
    },
    {
        "label": "ObjectMeta",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.meta.v1.object_meta",
        "description": "phidata.phi.k8s.resource.meta.v1.object_meta",
        "peekOfCode": "class ObjectMeta(BaseModel):\n    \"\"\"\n    ObjectMeta is metadata that all persisted resources must have,\n    which includes all objects users must create.\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#objectmeta-v1-meta\n    \"\"\"\n    resource_type: str = \"ObjectMeta\"\n    # Name must be unique within a namespace. Is required when creating resources,\n    # although some resources may allow a client to request the generation of an appropriate name automatically.\n    # Name is primarily intended for creation idempotence and configuration definition.",
        "detail": "phidata.phi.k8s.resource.meta.v1.object_meta",
        "documentation": {}
    },
    {
        "label": "ServiceBackendPort",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "description": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "peekOfCode": "class ServiceBackendPort(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#servicebackendport-v1-networking-k8s-io\n    \"\"\"\n    resource_type: str = \"ServiceBackendPort\"\n    number: int\n    name: Optional[str] = None\nclass IngressServiceBackend(K8sObject):\n    \"\"\"",
        "detail": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "IngressServiceBackend",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "description": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "peekOfCode": "class IngressServiceBackend(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#ingressbackend-v1-networking-k8s-io\n    \"\"\"\n    resource_type: str = \"IngressServiceBackend\"\n    service_name: str\n    service_port: Union[int, str]\nclass IngressBackend(K8sObject):\n    \"\"\"",
        "detail": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "IngressBackend",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "description": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "peekOfCode": "class IngressBackend(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#ingressbackend-v1-networking-k8s-io\n    \"\"\"\n    resource_type: str = \"IngressBackend\"\n    service: Optional[V1IngressBackend] = None\n    resource: Optional[Any] = None\nclass HTTPIngressPath(K8sObject):\n    \"\"\"",
        "detail": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "HTTPIngressPath",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "description": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "peekOfCode": "class HTTPIngressPath(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#httpingresspath-v1-networking-k8s-io\n    \"\"\"\n    resource_type: str = \"HTTPIngressPath\"\n    path: Optional[str] = None\n    path_type: Optional[str] = None\n    backend: IngressBackend\nclass HTTPIngressRuleValue(K8sObject):",
        "detail": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "HTTPIngressRuleValue",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "description": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "peekOfCode": "class HTTPIngressRuleValue(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#httpingressrulevalue-v1-networking-k8s-io\n    \"\"\"\n    resource_type: str = \"HTTPIngressRuleValue\"\n    paths: List[HTTPIngressPath]\nclass IngressRule(K8sObject):\n    \"\"\"\n    Reference:",
        "detail": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "IngressRule",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "description": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "peekOfCode": "class IngressRule(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#ingressrule-v1-networking-k8s-io\n    \"\"\"\n    resource_type: str = \"IngressRule\"\n    host: Optional[str] = None\n    http: Optional[HTTPIngressRuleValue] = None\nclass IngressSpec(K8sObject):\n    \"\"\"",
        "detail": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "IngressSpec",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "description": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "peekOfCode": "class IngressSpec(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#ingressspec-v1-core\n    \"\"\"\n    resource_type: str = \"IngressSpec\"\n    # DefaultBackend is the backend that should handle requests that don't match any rule.\n    # If Rules are not specified, DefaultBackend must be specified.\n    # If DefaultBackend is not set, the handling of requests that do not match any of\n    # the rules will be up to the Ingress controller.",
        "detail": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "Ingress",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "description": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "peekOfCode": "class Ingress(K8sResource):\n    \"\"\"\n    References:\n    - Docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#ingress-v1-networking-k8s-io\n    - Type: https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_ingress.py\n    \"\"\"\n    resource_type: str = \"Ingress\"\n    spec: IngressSpec\n    # List of attributes to include in the K8s manifest\n    fields_for_k8s_manifest: List[str] = [\"spec\"]",
        "detail": "phidata.phi.k8s.resource.networking_k8s_io.v1.ingress",
        "documentation": {}
    },
    {
        "label": "Subject",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "description": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "peekOfCode": "class Subject(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#subject-v1-rbac-authorization-k8s-io\n    \"\"\"\n    resource_type: str = \"Subject\"\n    # Name of the object being referenced.\n    name: str\n    # Kind of object being referenced.\n    # Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\".",
        "detail": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "documentation": {}
    },
    {
        "label": "RoleRef",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "description": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "peekOfCode": "class RoleRef(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#roleref-v1-rbac-authorization-k8s-io\n    \"\"\"\n    resource_type: str = \"RoleRef\"\n    # APIGroup is the group for the resource being referenced\n    api_group: ApiGroup = Field(..., alias=\"apiGroup\")\n    # Kind is the type of resource being referenced\n    kind: Kind",
        "detail": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "documentation": {}
    },
    {
        "label": "ClusterRoleBinding",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "description": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "peekOfCode": "class ClusterRoleBinding(K8sResource):\n    \"\"\"\n    References:\n    - Doc: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#clusterrolebinding-v1-rbac-authorization-k8s-io\n    - Type: https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_cluster_role_binding_binding.py\n    \"\"\"\n    resource_type: str = \"ClusterRoleBinding\"\n    role_ref: RoleRef = Field(..., alias=\"roleRef\")\n    subjects: List[Subject]\n    # List of attributes to include in the K8s manifest",
        "detail": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluste_role_binding",
        "documentation": {}
    },
    {
        "label": "PolicyRule",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "description": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "peekOfCode": "class PolicyRule(K8sObject):\n    \"\"\"\n    Reference:\n    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#policyrule-v1-rbac-authorization-k8s-io\n    \"\"\"\n    resource_type: str = \"PolicyRule\"\n    api_groups: List[str] = Field(..., alias=\"apiGroups\")\n    resources: List[str]\n    verbs: List[str]\n    def get_k8s_object(self) -> V1PolicyRule:",
        "detail": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "documentation": {}
    },
    {
        "label": "ClusterRole",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "description": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "peekOfCode": "class ClusterRole(K8sResource):\n    \"\"\"\n    References:\n    - Doc: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#clusterrole-v1-rbac-authorization-k8s-io\n    - Type: https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_cluster_role.py\n    \"\"\"\n    resource_type: str = \"ClusterRole\"\n    # Rules holds all the PolicyRules for this ClusterRole\n    rules: List[PolicyRule]\n    # List of attributes to include in the K8s manifest",
        "detail": "phidata.phi.k8s.resource.rbac_authorization_k8s_io.v1.cluster_role",
        "documentation": {}
    },
    {
        "label": "StorageClass",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.storage_k8s_io.v1.storage_class",
        "description": "phidata.phi.k8s.resource.storage_k8s_io.v1.storage_class",
        "peekOfCode": "class StorageClass(K8sResource):\n    \"\"\"\n    References:\n    - Doc: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#storageclass-v1-storage-k8s-io\n    - Type: https://github.com/kubernetes-client/python/blob/master/kubernetes/client/models/v1_storage_class.py\n    \"\"\"\n    resource_type: str = \"StorageClass\"\n    # AllowVolumeExpansion shows whether the storage class allow volume expand\n    allow_volume_expansion: Optional[str] = Field(None, alias=\"allowVolumeExpansion\")\n    # Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions,",
        "detail": "phidata.phi.k8s.resource.storage_k8s_io.v1.storage_class",
        "documentation": {}
    },
    {
        "label": "K8sObject",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.base",
        "description": "phidata.phi.k8s.resource.base",
        "peekOfCode": "class K8sObject(BaseModel):\n    def get_k8s_object(self) -> Any:\n        \"\"\"Creates a K8sObject for this resource.\n        Eg:\n            * For a Deployment resource, it will return the V1Deployment object.\n        \"\"\"\n        logger.error(\"@get_k8s_object method not defined\")\n    model_config = ConfigDict(arbitrary_types_allowed=True, populate_by_name=True)\nclass K8sResource(ResourceBase, K8sObject):\n    \"\"\"Base class for K8s Resources\"\"\"",
        "detail": "phidata.phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "K8sResource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.base",
        "description": "phidata.phi.k8s.resource.base",
        "peekOfCode": "class K8sResource(ResourceBase, K8sObject):\n    \"\"\"Base class for K8s Resources\"\"\"\n    # Common fields for all K8s Resources\n    # Which version of the Kubernetes API you're using to create this object\n    # Note: we use an alias \"apiVersion\" so that the K8s manifest generated by this resource\n    #       has the correct key\n    api_version: ApiVersion = Field(..., alias=\"apiVersion\")\n    # What kind of object you want to create\n    kind: Kind\n    # Data that helps uniquely identify the object, including a name string, UID, and optional namespace",
        "detail": "phidata.phi.k8s.resource.base",
        "documentation": {}
    },
    {
        "label": "KubeconfigClusterConfig",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.kubeconfig",
        "description": "phidata.phi.k8s.resource.kubeconfig",
        "peekOfCode": "class KubeconfigClusterConfig(BaseModel):\n    server: str\n    certificate_authority_data: str = Field(..., alias=\"certificate-authority-data\")\n    model_config = ConfigDict(arbitrary_types_allowed=True, populate_by_name=True)\nclass KubeconfigCluster(BaseModel):\n    name: str\n    cluster: KubeconfigClusterConfig\nclass KubeconfigUser(BaseModel):\n    name: str\n    user: Dict[str, Any]",
        "detail": "phidata.phi.k8s.resource.kubeconfig",
        "documentation": {}
    },
    {
        "label": "KubeconfigCluster",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.kubeconfig",
        "description": "phidata.phi.k8s.resource.kubeconfig",
        "peekOfCode": "class KubeconfigCluster(BaseModel):\n    name: str\n    cluster: KubeconfigClusterConfig\nclass KubeconfigUser(BaseModel):\n    name: str\n    user: Dict[str, Any]\nclass KubeconfigContextSpec(BaseModel):\n    \"\"\"Each Kubeconfig context is made of (cluster, user, namespace).\n    It should be read as:\n        Use the credentials of the \"user\"",
        "detail": "phidata.phi.k8s.resource.kubeconfig",
        "documentation": {}
    },
    {
        "label": "KubeconfigUser",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.kubeconfig",
        "description": "phidata.phi.k8s.resource.kubeconfig",
        "peekOfCode": "class KubeconfigUser(BaseModel):\n    name: str\n    user: Dict[str, Any]\nclass KubeconfigContextSpec(BaseModel):\n    \"\"\"Each Kubeconfig context is made of (cluster, user, namespace).\n    It should be read as:\n        Use the credentials of the \"user\"\n        to access the \"namespace\"\n        of the \"cluster\"\n    \"\"\"",
        "detail": "phidata.phi.k8s.resource.kubeconfig",
        "documentation": {}
    },
    {
        "label": "KubeconfigContextSpec",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.kubeconfig",
        "description": "phidata.phi.k8s.resource.kubeconfig",
        "peekOfCode": "class KubeconfigContextSpec(BaseModel):\n    \"\"\"Each Kubeconfig context is made of (cluster, user, namespace).\n    It should be read as:\n        Use the credentials of the \"user\"\n        to access the \"namespace\"\n        of the \"cluster\"\n    \"\"\"\n    cluster: Optional[str]\n    user: Optional[str]\n    namespace: Optional[str] = None",
        "detail": "phidata.phi.k8s.resource.kubeconfig",
        "documentation": {}
    },
    {
        "label": "KubeconfigContext",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.kubeconfig",
        "description": "phidata.phi.k8s.resource.kubeconfig",
        "peekOfCode": "class KubeconfigContext(BaseModel):\n    \"\"\"A context element in a kubeconfig file is used to group access parameters under a\n    convenient name. Each context has three parameters: cluster, namespace, and user.\n    By default, the kubectl command-line tool uses parameters from the current context\n    to communicate with the cluster.\n    \"\"\"\n    name: str\n    context: KubeconfigContextSpec\nclass Kubeconfig(BaseModel):\n    \"\"\"",
        "detail": "phidata.phi.k8s.resource.kubeconfig",
        "documentation": {}
    },
    {
        "label": "Kubeconfig",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.kubeconfig",
        "description": "phidata.phi.k8s.resource.kubeconfig",
        "peekOfCode": "class Kubeconfig(BaseModel):\n    \"\"\"\n    We configure access to K8s clusters using a Kubeconfig.\n    This configuration can be stored in a file or an object.\n    A Kubeconfig stores information about clusters, users, namespaces, and authentication mechanisms,\n    Locally the kubeconfig file is usually stored at ~/.kube/config\n    View your local kubeconfig using `kubectl config view`\n    References:\n        * Docs:\n            https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/",
        "detail": "phidata.phi.k8s.resource.kubeconfig",
        "documentation": {}
    },
    {
        "label": "K8sResourceType",
        "kind": 5,
        "importPath": "phidata.phi.k8s.resource.types",
        "description": "phidata.phi.k8s.resource.types",
        "peekOfCode": "K8sResourceType = Union[\n    Namespace,\n    Secret,\n    ConfigMap,\n    StorageClass,\n    PersistentVolume,\n    PersistentVolumeClaim,\n    ServiceAccount,\n    ClusterRole,\n    ClusterRoleBinding,",
        "detail": "phidata.phi.k8s.resource.types",
        "documentation": {}
    },
    {
        "label": "YamlResource",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resource.yaml",
        "description": "phidata.phi.k8s.resource.yaml",
        "peekOfCode": "class YamlResource(K8sResource):\n    resource_type: str = \"Yaml\"\n    api_version: ApiVersion = ApiVersion.NA\n    kind: Kind = Kind.YAML\n    metadata: ObjectMeta = ObjectMeta()\n    file: Optional[Path] = None\n    dir: Optional[Path] = None\n    url: Optional[str] = None\n    @staticmethod\n    def get_from_cluster(k8s_client: K8sApiClient, namespace: Optional[str] = None, **kwargs) -> None:",
        "detail": "phidata.phi.k8s.resource.yaml",
        "documentation": {}
    },
    {
        "label": "K8sApiClient",
        "kind": 6,
        "importPath": "phidata.phi.k8s.api_client",
        "description": "phidata.phi.k8s.api_client",
        "peekOfCode": "class K8sApiClient:\n    def __init__(self, context: Optional[str] = None, kubeconfig_path: Optional[str] = None):\n        super().__init__()\n        self.context: Optional[str] = context\n        self.kubeconfig_path: Optional[str] = kubeconfig_path\n        self.configuration: Optional[kubernetes.client.Configuration] = None\n        # kubernetes API clients\n        self._api_client: Optional[kubernetes.client.ApiClient] = None\n        self._apps_v1_api: Optional[kubernetes.client.AppsV1Api] = None\n        self._core_v1_api: Optional[kubernetes.client.CoreV1Api] = None",
        "detail": "phidata.phi.k8s.api_client",
        "documentation": {}
    },
    {
        "label": "DEFAULT_K8S_NAMESPACE",
        "kind": 5,
        "importPath": "phidata.phi.k8s.constants",
        "description": "phidata.phi.k8s.constants",
        "peekOfCode": "DEFAULT_K8S_NAMESPACE = \"default\"\nDEFAULT_K8S_SERVICE_ACCOUNT = \"default\"\nNAMESPACE_RESOURCE_GROUP_KEY = \"ns\"\nRBAC_RESOURCE_GROUP_KEY = \"rbac\"",
        "detail": "phidata.phi.k8s.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_K8S_SERVICE_ACCOUNT",
        "kind": 5,
        "importPath": "phidata.phi.k8s.constants",
        "description": "phidata.phi.k8s.constants",
        "peekOfCode": "DEFAULT_K8S_SERVICE_ACCOUNT = \"default\"\nNAMESPACE_RESOURCE_GROUP_KEY = \"ns\"\nRBAC_RESOURCE_GROUP_KEY = \"rbac\"",
        "detail": "phidata.phi.k8s.constants",
        "documentation": {}
    },
    {
        "label": "NAMESPACE_RESOURCE_GROUP_KEY",
        "kind": 5,
        "importPath": "phidata.phi.k8s.constants",
        "description": "phidata.phi.k8s.constants",
        "peekOfCode": "NAMESPACE_RESOURCE_GROUP_KEY = \"ns\"\nRBAC_RESOURCE_GROUP_KEY = \"rbac\"",
        "detail": "phidata.phi.k8s.constants",
        "documentation": {}
    },
    {
        "label": "RBAC_RESOURCE_GROUP_KEY",
        "kind": 5,
        "importPath": "phidata.phi.k8s.constants",
        "description": "phidata.phi.k8s.constants",
        "peekOfCode": "RBAC_RESOURCE_GROUP_KEY = \"rbac\"",
        "detail": "phidata.phi.k8s.constants",
        "documentation": {}
    },
    {
        "label": "save_resources",
        "kind": 2,
        "importPath": "phidata.phi.k8s.operator",
        "description": "phidata.phi.k8s.operator",
        "peekOfCode": "def save_resources(\n    phi_config: PhiCliConfig,\n    ws_config: WorkspaceConfig,\n    target_env: Optional[str] = None,\n    target_group: Optional[str] = None,\n    target_name: Optional[str] = None,\n    target_type: Optional[str] = None,\n) -> None:\n    \"\"\"Saves the K8s resources\"\"\"\n    if ws_config is None:",
        "detail": "phidata.phi.k8s.operator",
        "documentation": {}
    },
    {
        "label": "K8sResources",
        "kind": 6,
        "importPath": "phidata.phi.k8s.resources",
        "description": "phidata.phi.k8s.resources",
        "peekOfCode": "class K8sResources(InfraResources):\n    apps: Optional[List[Union[K8sApp, AppGroup]]] = None\n    resources: Optional[List[Union[K8sResource, CreateK8sResource, ResourceGroup]]] = None\n    charts: Optional[List[HelmChart]] = None\n    # K8s namespace to use\n    namespace: str = \"default\"\n    # K8s context to use\n    context: Optional[str] = Field(None, validate_default=True)\n    # Service account to use\n    service_account_name: Optional[str] = None",
        "detail": "phidata.phi.k8s.resources",
        "documentation": {}
    },
    {
        "label": "S3KnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.s3.base",
        "description": "phidata.phi.knowledge.s3.base",
        "peekOfCode": "class S3KnowledgeBase(AssistantKnowledge):\n    # Provide either bucket or bucket_name\n    bucket: Optional[S3Bucket] = None\n    bucket_name: Optional[str] = None\n    # Provide either object or key\n    key: Optional[str] = None\n    object: Optional[S3Object] = None\n    # Filter objects by prefix\n    # Ignored if object or key is provided\n    prefix: Optional[str] = None",
        "detail": "phidata.phi.knowledge.s3.base",
        "documentation": {}
    },
    {
        "label": "S3PDFKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.s3.pdf",
        "description": "phidata.phi.knowledge.s3.pdf",
        "peekOfCode": "class S3PDFKnowledgeBase(S3KnowledgeBase):\n    reader: S3PDFReader = S3PDFReader()\n    @property\n    def document_lists(self) -> Iterator[List[Document]]:\n        \"\"\"Iterate over PDFs in a s3 bucket and yield lists of documents.\n        Each object yielded by the iterator is a list of documents.\n        Returns:\n            Iterator[List[Document]]: Iterator yielding list of documents\n        \"\"\"\n        for s3_object in self.s3_objects:",
        "detail": "phidata.phi.knowledge.s3.pdf",
        "documentation": {}
    },
    {
        "label": "S3TextKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.s3.text",
        "description": "phidata.phi.knowledge.s3.text",
        "peekOfCode": "class S3TextKnowledgeBase(S3KnowledgeBase):\n    formats: List[str] = [\".doc\", \".docx\"]\n    reader: S3TextReader = S3TextReader()\n    @property\n    def document_lists(self) -> Iterator[List[Document]]:\n        \"\"\"Iterate over text files in a s3 bucket and yield lists of documents.\n        Each object yielded by the iterator is a list of documents.\n        Returns:\n            Iterator[List[Document]]: Iterator yielding list of documents\n        \"\"\"",
        "detail": "phidata.phi.knowledge.s3.text",
        "documentation": {}
    },
    {
        "label": "ArxivKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.arxiv",
        "description": "phidata.phi.knowledge.arxiv",
        "peekOfCode": "class ArxivKnowledgeBase(AssistantKnowledge):\n    queries: List[str] = []\n    reader: ArxivReader = ArxivReader()\n    @property\n    def document_lists(self) -> Iterator[List[Document]]:\n        \"\"\"Iterate over urls and yield lists of documents.\n        Each object yielded by the iterator is a list of documents.\n        Returns:\n            Iterator[List[Document]]: Iterator yielding list of documents\n        \"\"\"",
        "detail": "phidata.phi.knowledge.arxiv",
        "documentation": {}
    },
    {
        "label": "AssistantKnowledge",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.base",
        "description": "phidata.phi.knowledge.base",
        "peekOfCode": "class AssistantKnowledge(BaseModel):\n    \"\"\"Base class for LLM knowledge base\"\"\"\n    # Reader to read the documents\n    reader: Optional[Reader] = None\n    # Vector db to store the knowledge base\n    vector_db: Optional[VectorDb] = None\n    # Number of relevant documents to return on search\n    num_documents: int = 2\n    # Number of documents to optimize the vector db on\n    optimize_on: Optional[int] = 1000",
        "detail": "phidata.phi.knowledge.base",
        "documentation": {}
    },
    {
        "label": "CombinedKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.combined",
        "description": "phidata.phi.knowledge.combined",
        "peekOfCode": "class CombinedKnowledgeBase(AssistantKnowledge):\n    sources: List[AssistantKnowledge] = []\n    @property\n    def document_lists(self) -> Iterator[List[Document]]:\n        \"\"\"Iterate over knowledge bases and yield lists of documents.\n        Each object yielded by the iterator is a list of documents.\n        Returns:\n            Iterator[List[Document]]: Iterator yielding list of documents\n        \"\"\"\n        for kb in self.sources:",
        "detail": "phidata.phi.knowledge.combined",
        "documentation": {}
    },
    {
        "label": "DocumentKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.document",
        "description": "phidata.phi.knowledge.document",
        "peekOfCode": "class DocumentKnowledgeBase(AssistantKnowledge):\n    documents: List[Document]\n    @property\n    def document_lists(self) -> Iterator[List[Document]]:\n        \"\"\"Iterate over documents and yield lists of documents.\n        Each object yielded by the iterator is a list of documents.\n        Returns:\n            Iterator[List[Document]]: Iterator yielding list of documents\n        \"\"\"\n        for _document in self.documents:",
        "detail": "phidata.phi.knowledge.document",
        "documentation": {}
    },
    {
        "label": "DocxKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.docx",
        "description": "phidata.phi.knowledge.docx",
        "peekOfCode": "class DocxKnowledgeBase(AssistantKnowledge):\n    path: Union[str, Path]\n    formats: List[str] = [\".doc\", \".docx\"]\n    reader: DocxReader = DocxReader()\n    @property\n    def document_lists(self) -> Iterator[List[Document]]:\n        \"\"\"Iterate over doc/docx files and yield lists of documents.\n        Each object yielded by the iterator is a list of documents.\n        Returns:\n            Iterator[List[Document]]: Iterator yielding list of documents",
        "detail": "phidata.phi.knowledge.docx",
        "documentation": {}
    },
    {
        "label": "JSONKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.json",
        "description": "phidata.phi.knowledge.json",
        "peekOfCode": "class JSONKnowledgeBase(AssistantKnowledge):\n    path: Union[str, Path]\n    reader: JSONReader = JSONReader()\n    @property\n    def document_lists(self) -> Iterator[List[Document]]:\n        \"\"\"Iterate over Json files and yield lists of documents.\n        Each object yielded by the iterator is a list of documents.\n        Returns:\n            Iterator[List[Document]]: Iterator yielding list of documents\n        \"\"\"",
        "detail": "phidata.phi.knowledge.json",
        "documentation": {}
    },
    {
        "label": "LangChainKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.langchain",
        "description": "phidata.phi.knowledge.langchain",
        "peekOfCode": "class LangChainKnowledgeBase(AssistantKnowledge):\n    loader: Optional[Callable] = None\n    vectorstore: Optional[Any] = None\n    search_kwargs: Optional[dict] = None\n    retriever: Optional[Any] = None\n    def search(self, query: str, num_documents: Optional[int] = None) -> List[Document]:\n        \"\"\"Returns relevant documents matching the query\"\"\"\n        try:\n            from langchain_core.vectorstores import VectorStoreRetriever\n            from langchain_core.documents import Document as LangChainDocument",
        "detail": "phidata.phi.knowledge.langchain",
        "documentation": {}
    },
    {
        "label": "LlamaIndexKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.llamaindex",
        "description": "phidata.phi.knowledge.llamaindex",
        "peekOfCode": "class LlamaIndexKnowledgeBase(AssistantKnowledge):\n    retriever: BaseRetriever\n    loader: Optional[Callable] = None\n    def search(self, query: str, num_documents: Optional[int] = None) -> List[Document]:\n        \"\"\"\n        Returns relevant documents matching the query.\n        Args:\n            query (str): The query string to search for.\n            num_documents (Optional[int]): The maximum number of documents to return. Defaults to None.\n        Returns:",
        "detail": "phidata.phi.knowledge.llamaindex",
        "documentation": {}
    },
    {
        "label": "PDFKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.pdf",
        "description": "phidata.phi.knowledge.pdf",
        "peekOfCode": "class PDFKnowledgeBase(AssistantKnowledge):\n    path: Union[str, Path]\n    reader: Union[PDFReader, PDFImageReader] = PDFReader()\n    @property\n    def document_lists(self) -> Iterator[List[Document]]:\n        \"\"\"Iterate over PDFs and yield lists of documents.\n        Each object yielded by the iterator is a list of documents.\n        Returns:\n            Iterator[List[Document]]: Iterator yielding list of documents\n        \"\"\"",
        "detail": "phidata.phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "PDFUrlKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.pdf",
        "description": "phidata.phi.knowledge.pdf",
        "peekOfCode": "class PDFUrlKnowledgeBase(AssistantKnowledge):\n    urls: List[str] = []\n    reader: Union[PDFUrlReader, PDFUrlImageReader] = PDFUrlReader()\n    @property\n    def document_lists(self) -> Iterator[List[Document]]:\n        \"\"\"Iterate over PDF urls and yield lists of documents.\n        Each object yielded by the iterator is a list of documents.\n        Returns:\n            Iterator[List[Document]]: Iterator yielding list of documents\n        \"\"\"",
        "detail": "phidata.phi.knowledge.pdf",
        "documentation": {}
    },
    {
        "label": "TextKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.text",
        "description": "phidata.phi.knowledge.text",
        "peekOfCode": "class TextKnowledgeBase(AssistantKnowledge):\n    path: Union[str, Path]\n    formats: List[str] = [\".txt\"]\n    reader: TextReader = TextReader()\n    @property\n    def document_lists(self) -> Iterator[List[Document]]:\n        \"\"\"Iterate over text files and yield lists of documents.\n        Each object yielded by the iterator is a list of documents.\n        Returns:\n            Iterator[List[Document]]: Iterator yielding list of documents",
        "detail": "phidata.phi.knowledge.text",
        "documentation": {}
    },
    {
        "label": "WebsiteKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.website",
        "description": "phidata.phi.knowledge.website",
        "peekOfCode": "class WebsiteKnowledgeBase(AssistantKnowledge):\n    urls: List[str] = []\n    reader: Optional[WebsiteReader] = None\n    # WebsiteReader parameters\n    max_depth: int = 3\n    max_links: int = 10\n    @model_validator(mode=\"after\")  # type: ignore\n    def set_reader(self) -> \"WebsiteKnowledgeBase\":\n        if self.reader is None:\n            self.reader = WebsiteReader(max_depth=self.max_depth, max_links=self.max_links)",
        "detail": "phidata.phi.knowledge.website",
        "documentation": {}
    },
    {
        "label": "WikipediaKnowledgeBase",
        "kind": 6,
        "importPath": "phidata.phi.knowledge.wikipedia",
        "description": "phidata.phi.knowledge.wikipedia",
        "peekOfCode": "class WikipediaKnowledgeBase(AssistantKnowledge):\n    topics: List[str] = []\n    @property\n    def document_lists(self) -> Iterator[List[Document]]:\n        \"\"\"Iterate over urls and yield lists of documents.\n        Each object yielded by the iterator is a list of documents.\n        Returns:\n            Iterator[List[Document]]: Iterator yielding list of documents\n        \"\"\"\n        for topic in self.topics:",
        "detail": "phidata.phi.knowledge.wikipedia",
        "documentation": {}
    },
    {
        "label": "Claude",
        "kind": 6,
        "importPath": "phidata.phi.llm.anthropic.claude",
        "description": "phidata.phi.llm.anthropic.claude",
        "peekOfCode": "class Claude(LLM):\n    name: str = \"claude\"\n    model: str = \"claude-3-opus-20240229\"\n    # -*- Request parameters\n    max_tokens: Optional[int] = 1024\n    temperature: Optional[float] = None\n    stop_sequences: Optional[List[str]] = None\n    top_p: Optional[float] = None\n    top_k: Optional[int] = None\n    request_params: Optional[Dict[str, Any]] = None",
        "detail": "phidata.phi.llm.anthropic.claude",
        "documentation": {}
    },
    {
        "label": "Anyscale",
        "kind": 6,
        "importPath": "phidata.phi.llm.anyscale.anyscale",
        "description": "phidata.phi.llm.anyscale.anyscale",
        "peekOfCode": "class Anyscale(OpenAILike):\n    name: str = \"Anyscale\"\n    model: str = \"mistralai/Mixtral-8x7B-Instruct-v0.1\"\n    api_key: Optional[str] = getenv(\"ANYSCALE_API_KEY\")\n    base_url: str = \"https://api.endpoints.anyscale.com/v1\"",
        "detail": "phidata.phi.llm.anyscale.anyscale",
        "documentation": {}
    },
    {
        "label": "AwsBedrock",
        "kind": 6,
        "importPath": "phidata.phi.llm.aws.bedrock",
        "description": "phidata.phi.llm.aws.bedrock",
        "peekOfCode": "class AwsBedrock(LLM):\n    name: str = \"AwsBedrock\"\n    model: str\n    aws_region: Optional[str] = None\n    aws_profile: Optional[str] = None\n    aws_client: Optional[AwsApiClient] = None\n    # -*- Request parameters\n    request_params: Optional[Dict[str, Any]] = None\n    _bedrock_client: Optional[Any] = None\n    _bedrock_runtime_client: Optional[Any] = None",
        "detail": "phidata.phi.llm.aws.bedrock",
        "documentation": {}
    },
    {
        "label": "Claude",
        "kind": 6,
        "importPath": "phidata.phi.llm.aws.claude",
        "description": "phidata.phi.llm.aws.claude",
        "peekOfCode": "class Claude(AwsBedrock):\n    name: str = \"AwsBedrockAnthropicClaude\"\n    model: str = \"anthropic.claude-3-sonnet-20240229-v1:0\"\n    # -*- Request parameters\n    max_tokens: int = 8192\n    temperature: Optional[float] = None\n    top_p: Optional[float] = None\n    top_k: Optional[int] = None\n    stop_sequences: Optional[List[str]] = None\n    anthropic_version: str = \"bedrock-2023-05-31\"",
        "detail": "phidata.phi.llm.aws.claude",
        "documentation": {}
    },
    {
        "label": "AzureOpenAIChat",
        "kind": 6,
        "importPath": "phidata.phi.llm.azure.openai_chat",
        "description": "phidata.phi.llm.azure.openai_chat",
        "peekOfCode": "class AzureOpenAIChat(OpenAILike):\n    name: str = \"AzureOpenAIChat\"\n    model: str\n    api_key: Optional[str] = getenv(\"AZURE_OPENAI_API_KEY\")\n    api_version: str = getenv(\"AZURE_OPENAI_API_VERSION\", \"2024-02-01\")\n    azure_endpoint: Optional[str] = getenv(\"AZURE_OPENAI_ENDPOINT\")\n    azure_deployment: Optional[str] = getenv(\"AZURE_DEPLOYMENT\")\n    base_url: Optional[str] = None\n    azure_ad_token: Optional[str] = None\n    azure_ad_token_provider: Optional[Any] = None",
        "detail": "phidata.phi.llm.azure.openai_chat",
        "documentation": {}
    },
    {
        "label": "CohereChat",
        "kind": 6,
        "importPath": "phidata.phi.llm.cohere.chat",
        "description": "phidata.phi.llm.cohere.chat",
        "peekOfCode": "class CohereChat(LLM):\n    name: str = \"cohere\"\n    model: str = \"command-r\"\n    # -*- Request parameters\n    temperature: Optional[float] = None\n    max_tokens: Optional[int] = None\n    top_k: Optional[int] = None\n    top_p: Optional[float] = None\n    frequency_penalty: Optional[float] = None\n    presence_penalty: Optional[float] = None",
        "detail": "phidata.phi.llm.cohere.chat",
        "documentation": {}
    },
    {
        "label": "Fireworks",
        "kind": 6,
        "importPath": "phidata.phi.llm.fireworks.fireworks",
        "description": "phidata.phi.llm.fireworks.fireworks",
        "peekOfCode": "class Fireworks(OpenAILike):\n    name: str = \"Fireworks\"\n    model: str = \"accounts/fireworks/models/firefunction-v1\"\n    api_key: Optional[str] = getenv(\"FIREWORKS_API_KEY\")\n    base_url: str = \"https://api.fireworks.ai/inference/v1\"",
        "detail": "phidata.phi.llm.fireworks.fireworks",
        "documentation": {}
    },
    {
        "label": "Gemini",
        "kind": 6,
        "importPath": "phidata.phi.llm.gemini.gemini",
        "description": "phidata.phi.llm.gemini.gemini",
        "peekOfCode": "class Gemini(LLM):\n    name: str = \"Gemini\"\n    model: str = \"gemini-1.0-pro-vision\"\n    generation_config: Optional[Any] = None\n    safety_settings: Optional[Any] = None\n    function_declarations: Optional[List[FunctionDeclaration]] = None\n    generative_model_kwargs: Optional[Dict[str, Any]] = None\n    generative_model: Optional[GenerativeModel] = None\n    def conform_function_to_gemini(self, params: Dict[str, Any]) -> Dict[str, Any]:\n        fixed_parameters = {}",
        "detail": "phidata.phi.llm.gemini.gemini",
        "documentation": {}
    },
    {
        "label": "Groq",
        "kind": 6,
        "importPath": "phidata.phi.llm.groq.groq",
        "description": "phidata.phi.llm.groq.groq",
        "peekOfCode": "class Groq(LLM):\n    name: str = \"Groq\"\n    model: str = \"llama3-70b-8192\"\n    # -*- Request parameters\n    frequency_penalty: Optional[float] = None\n    logit_bias: Optional[Any] = None\n    logprobs: Optional[bool] = None\n    max_tokens: Optional[int] = None\n    presence_penalty: Optional[float] = None\n    response_format: Optional[Dict[str, Any]] = None",
        "detail": "phidata.phi.llm.groq.groq",
        "documentation": {}
    },
    {
        "label": "Mistral",
        "kind": 6,
        "importPath": "phidata.phi.llm.mistral.mistral",
        "description": "phidata.phi.llm.mistral.mistral",
        "peekOfCode": "class Mistral(LLM):\n    name: str = \"Mistral\"\n    model: str = \"mistral-large-latest\"\n    # -*- Request parameters\n    temperature: Optional[float] = None\n    max_tokens: Optional[int] = None\n    top_p: Optional[float] = None\n    random_seed: Optional[int] = None\n    safe_mode: bool = False\n    safe_prompt: bool = False",
        "detail": "phidata.phi.llm.mistral.mistral",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "kind": 6,
        "importPath": "phidata.phi.llm.ollama.chat",
        "description": "phidata.phi.llm.ollama.chat",
        "peekOfCode": "class Ollama(LLM):\n    name: str = \"Ollama\"\n    model: str = \"openhermes\"\n    host: Optional[str] = None\n    timeout: Optional[Any] = None\n    format: Optional[str] = None\n    options: Optional[Any] = None\n    keep_alive: Optional[Union[float, str]] = None\n    client_kwargs: Optional[Dict[str, Any]] = None\n    ollama_client: Optional[OllamaClient] = None",
        "detail": "phidata.phi.llm.ollama.chat",
        "documentation": {}
    },
    {
        "label": "Hermes",
        "kind": 6,
        "importPath": "phidata.phi.llm.ollama.hermes",
        "description": "phidata.phi.llm.ollama.hermes",
        "peekOfCode": "class Hermes(LLM):\n    name: str = \"Hermes2Pro\"\n    model: str = \"adrienbrault/nous-hermes2pro:Q8_0\"\n    host: Optional[str] = None\n    timeout: Optional[Any] = None\n    format: Optional[str] = None\n    options: Optional[Any] = None\n    keep_alive: Optional[Union[float, str]] = None\n    client_kwargs: Optional[Dict[str, Any]] = None\n    ollama_client: Optional[OllamaClient] = None",
        "detail": "phidata.phi.llm.ollama.hermes",
        "documentation": {}
    },
    {
        "label": "OllamaOpenAI",
        "kind": 6,
        "importPath": "phidata.phi.llm.ollama.openai",
        "description": "phidata.phi.llm.ollama.openai",
        "peekOfCode": "class OllamaOpenAI(OpenAILike):\n    name: str = \"Ollama\"\n    model: str = \"openhermes\"\n    api_key: str = \"ollama\"\n    base_url: str = \"http://localhost:11434/v1\"",
        "detail": "phidata.phi.llm.ollama.openai",
        "documentation": {}
    },
    {
        "label": "OllamaTools",
        "kind": 6,
        "importPath": "phidata.phi.llm.ollama.tools",
        "description": "phidata.phi.llm.ollama.tools",
        "peekOfCode": "class OllamaTools(LLM):\n    name: str = \"OllamaTools\"\n    model: str = \"llama3\"\n    host: Optional[str] = None\n    timeout: Optional[Any] = None\n    format: Optional[str] = None\n    options: Optional[Any] = None\n    keep_alive: Optional[Union[float, str]] = None\n    client_kwargs: Optional[Dict[str, Any]] = None\n    ollama_client: Optional[OllamaClient] = None",
        "detail": "phidata.phi.llm.ollama.tools",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "kind": 6,
        "importPath": "phidata.phi.llm.openai.chat",
        "description": "phidata.phi.llm.openai.chat",
        "peekOfCode": "class OpenAIChat(LLM):\n    name: str = \"OpenAIChat\"\n    model: str = \"gpt-4o\"\n    # -*- Request parameters\n    frequency_penalty: Optional[float] = None\n    logit_bias: Optional[Any] = None\n    logprobs: Optional[bool] = None\n    max_tokens: Optional[int] = None\n    presence_penalty: Optional[float] = None\n    response_format: Optional[Dict[str, Any]] = None",
        "detail": "phidata.phi.llm.openai.chat",
        "documentation": {}
    },
    {
        "label": "OpenAILike",
        "kind": 6,
        "importPath": "phidata.phi.llm.openai.like",
        "description": "phidata.phi.llm.openai.like",
        "peekOfCode": "class OpenAILike(OpenAIChat):\n    name: str = \"OpenAILike\"\n    model: str = \"not-provided\"\n    api_key: Optional[str] = \"not-provided\"",
        "detail": "phidata.phi.llm.openai.like",
        "documentation": {}
    },
    {
        "label": "OpenRouter",
        "kind": 6,
        "importPath": "phidata.phi.llm.openrouter.openrouter",
        "description": "phidata.phi.llm.openrouter.openrouter",
        "peekOfCode": "class OpenRouter(OpenAILike):\n    name: str = \"OpenRouter\"\n    model: str = \"mistralai/mistral-7b-instruct:free\"\n    api_key: Optional[str] = getenv(\"OPENROUTER_API_KEY\")\n    base_url: str = \"https://openrouter.ai/api/v1\"",
        "detail": "phidata.phi.llm.openrouter.openrouter",
        "documentation": {}
    },
    {
        "label": "Together",
        "kind": 6,
        "importPath": "phidata.phi.llm.together.together",
        "description": "phidata.phi.llm.together.together",
        "peekOfCode": "class Together(OpenAILike):\n    name: str = \"Together\"\n    model: str = \"mistralai/Mixtral-8x7B-Instruct-v0.1\"\n    api_key: Optional[str] = getenv(\"TOGETHER_API_KEY\")\n    base_url: str = \"https://api.together.xyz/v1\"\n    monkey_patch: bool = False\n    def response_stream(self, messages: List[Message]) -> Iterator[str]:\n        if not self.monkey_patch:\n            yield from super().response_stream(messages)\n            return",
        "detail": "phidata.phi.llm.together.together",
        "documentation": {}
    },
    {
        "label": "LLM",
        "kind": 6,
        "importPath": "phidata.phi.llm.base",
        "description": "phidata.phi.llm.base",
        "peekOfCode": "class LLM(BaseModel):\n    # ID of the model to use.\n    model: str\n    # Name for this LLM. Note: This is not sent to the LLM API.\n    name: Optional[str] = None\n    # Metrics collected for this LLM. Note: This is not sent to the LLM API.\n    metrics: Dict[str, Any] = {}\n    response_format: Optional[Any] = None\n    # A list of tools provided to the LLM.\n    # Tools are functions the model may generate JSON inputs for.",
        "detail": "phidata.phi.llm.base",
        "documentation": {}
    },
    {
        "label": "InvalidToolCallException",
        "kind": 6,
        "importPath": "phidata.phi.llm.exceptions",
        "description": "phidata.phi.llm.exceptions",
        "peekOfCode": "class InvalidToolCallException(Exception):\n    pass",
        "detail": "phidata.phi.llm.exceptions",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "phidata.phi.llm.message",
        "description": "phidata.phi.llm.message",
        "peekOfCode": "class Message(BaseModel):\n    \"\"\"Model for LLM messages\"\"\"\n    # The role of the message author.\n    # One of system, user, assistant, or function.\n    role: str\n    # The contents of the message. content is required for all messages,\n    # and may be null for assistant messages with function calls.\n    content: Optional[Union[List[Dict], str]] = None\n    # An optional name for the participant.\n    # Provides the model information to differentiate between participants of the same role.",
        "detail": "phidata.phi.llm.message",
        "documentation": {}
    },
    {
        "label": "References",
        "kind": 6,
        "importPath": "phidata.phi.llm.references",
        "description": "phidata.phi.llm.references",
        "peekOfCode": "class References(BaseModel):\n    \"\"\"Model for LLM references\"\"\"\n    # The question asked by the user.\n    query: str\n    # The references from the vector database.\n    references: Optional[str] = None\n    # Performance in seconds.\n    time: Optional[float] = None",
        "detail": "phidata.phi.llm.references",
        "documentation": {}
    },
    {
        "label": "MemoryDb",
        "kind": 6,
        "importPath": "phidata.phi.memory.db.base",
        "description": "phidata.phi.memory.db.base",
        "peekOfCode": "class MemoryDb(ABC):\n    \"\"\"Base class for the Memory Database.\"\"\"\n    @abstractmethod\n    def create_table(self) -> None:\n        raise NotImplementedError\n    @abstractmethod\n    def memory_exists(self, memory: MemoryRow) -> bool:\n        raise NotImplementedError\n    @abstractmethod\n    def read_memories(",
        "detail": "phidata.phi.memory.db.base",
        "documentation": {}
    },
    {
        "label": "PgMemoryDb",
        "kind": 6,
        "importPath": "phidata.phi.memory.db.postgres",
        "description": "phidata.phi.memory.db.postgres",
        "peekOfCode": "class PgMemoryDb(MemoryDb):\n    def __init__(\n        self,\n        table_name: str,\n        schema: Optional[str] = \"ai\",\n        db_url: Optional[str] = None,\n        db_engine: Optional[Engine] = None,\n    ):\n        \"\"\"\n        This class provides a memory store backed by a postgres table.",
        "detail": "phidata.phi.memory.db.postgres",
        "documentation": {}
    },
    {
        "label": "MemoryRetrieval",
        "kind": 6,
        "importPath": "phidata.phi.memory.assistant",
        "description": "phidata.phi.memory.assistant",
        "peekOfCode": "class MemoryRetrieval(str, Enum):\n    last_n = \"last_n\"\n    first_n = \"first_n\"\n    semantic = \"semantic\"\nclass AssistantMemory(BaseModel):\n    # Messages between the user and the Assistant.\n    # Note: the llm prompts are stored in the llm_messages\n    chat_history: List[Message] = []\n    # Prompts sent to the LLM and the LLM responses.\n    llm_messages: List[Message] = []",
        "detail": "phidata.phi.memory.assistant",
        "documentation": {}
    },
    {
        "label": "AssistantMemory",
        "kind": 6,
        "importPath": "phidata.phi.memory.assistant",
        "description": "phidata.phi.memory.assistant",
        "peekOfCode": "class AssistantMemory(BaseModel):\n    # Messages between the user and the Assistant.\n    # Note: the llm prompts are stored in the llm_messages\n    chat_history: List[Message] = []\n    # Prompts sent to the LLM and the LLM responses.\n    llm_messages: List[Message] = []\n    # References from the vector database.\n    references: List[References] = []\n    # Create personalized memories for this user\n    db: Optional[MemoryDb] = None",
        "detail": "phidata.phi.memory.assistant",
        "documentation": {}
    },
    {
        "label": "MemoryClassifier",
        "kind": 6,
        "importPath": "phidata.phi.memory.classifier",
        "description": "phidata.phi.memory.classifier",
        "peekOfCode": "class MemoryClassifier(BaseModel):\n    llm: Optional[LLM] = None\n    # Provide the system prompt for the classifier as a string\n    system_prompt: Optional[str] = None\n    # Existing Memories\n    existing_memories: Optional[List[Memory]] = None\n    def update_llm(self) -> None:\n        if self.llm is None:\n            try:\n                from phi.llm.openai import OpenAIChat",
        "detail": "phidata.phi.memory.classifier",
        "documentation": {}
    },
    {
        "label": "MemoryManager",
        "kind": 6,
        "importPath": "phidata.phi.memory.manager",
        "description": "phidata.phi.memory.manager",
        "peekOfCode": "class MemoryManager(BaseModel):\n    llm: Optional[LLM] = None\n    user_id: Optional[str] = None\n    # Provide the system prompt for the manager as a string\n    system_prompt: Optional[str] = None\n    # Memory Database\n    db: Optional[MemoryDb] = None\n    # Do not set the input message here, it will be set by the run method\n    input_message: Optional[str] = None\n    model_config = ConfigDict(arbitrary_types_allowed=True)",
        "detail": "phidata.phi.memory.manager",
        "documentation": {}
    },
    {
        "label": "Memory",
        "kind": 6,
        "importPath": "phidata.phi.memory.memory",
        "description": "phidata.phi.memory.memory",
        "peekOfCode": "class Memory(BaseModel):\n    \"\"\"Model for LLM memories\"\"\"\n    memory: str\n    id: Optional[str] = None\n    topic: Optional[str] = None\n    input: Optional[str] = None\n    def to_dict(self) -> Dict[str, Any]:\n        return self.model_dump(exclude_none=True)",
        "detail": "phidata.phi.memory.memory",
        "documentation": {}
    },
    {
        "label": "MemoryRow",
        "kind": 6,
        "importPath": "phidata.phi.memory.row",
        "description": "phidata.phi.memory.row",
        "peekOfCode": "class MemoryRow(BaseModel):\n    \"\"\"Memory Row that is stored in the database\"\"\"\n    memory: Dict[str, Any]\n    user_id: Optional[str] = None\n    created_at: Optional[datetime] = None\n    updated_at: Optional[datetime] = None\n    # id for this memory, auto-generated from the memory\n    id: Optional[str] = None\n    model_config = ConfigDict(from_attributes=True, arbitrary_types_allowed=True)\n    def serializable_dict(self) -> Dict[str, Any]:",
        "detail": "phidata.phi.memory.row",
        "documentation": {}
    },
    {
        "label": "PromptUpdateException",
        "kind": 6,
        "importPath": "phidata.phi.prompt.exceptions",
        "description": "phidata.phi.prompt.exceptions",
        "peekOfCode": "class PromptUpdateException(Exception):\n    pass\nclass PromptNotFoundException(Exception):\n    pass",
        "detail": "phidata.phi.prompt.exceptions",
        "documentation": {}
    },
    {
        "label": "PromptNotFoundException",
        "kind": 6,
        "importPath": "phidata.phi.prompt.exceptions",
        "description": "phidata.phi.prompt.exceptions",
        "peekOfCode": "class PromptNotFoundException(Exception):\n    pass",
        "detail": "phidata.phi.prompt.exceptions",
        "documentation": {}
    },
    {
        "label": "PromptRegistry",
        "kind": 6,
        "importPath": "phidata.phi.prompt.registry",
        "description": "phidata.phi.prompt.registry",
        "peekOfCode": "class PromptRegistry:\n    def __init__(self, name: str, prompts: Optional[List[PromptTemplate]] = None, sync: bool = True):\n        if name is None:\n            raise ValueError(\"PromptRegistry must have a name.\")\n        self.name: str = name\n        # Prompts initialized with the registry\n        # NOTE: These prompts cannot be updated\n        self.prompts: Dict[str, PromptTemplate] = {}\n        # Add prompts to prompts\n        if prompts:",
        "detail": "phidata.phi.prompt.registry",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "kind": 6,
        "importPath": "phidata.phi.prompt.template",
        "description": "phidata.phi.prompt.template",
        "peekOfCode": "class PromptTemplate(BaseModel):\n    id: Optional[str] = None\n    template: str\n    default_params: Optional[Dict[str, Any]] = None\n    ignore_missing_keys: bool = False\n    default_factory: Optional[Any] = None\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n    def get_prompt(self, **kwargs) -> str:\n        template_params = (self.default_factory or defaultdict(str)) if self.ignore_missing_keys else {}\n        if self.default_params:",
        "detail": "phidata.phi.prompt.template",
        "documentation": {}
    },
    {
        "label": "ResourceBase",
        "kind": 6,
        "importPath": "phidata.phi.resource.base",
        "description": "phidata.phi.resource.base",
        "peekOfCode": "class ResourceBase(PhiBase):\n    # Resource name is required\n    name: str\n    # Resource type\n    resource_type: Optional[str] = None\n    # List of resource types to match against for filtering\n    resource_type_list: Optional[List[str]] = None\n    # -*- Cached Data\n    active_resource: Optional[Any] = None\n    resource_created: bool = False",
        "detail": "phidata.phi.resource.base",
        "documentation": {}
    },
    {
        "label": "ResourceGroup",
        "kind": 6,
        "importPath": "phidata.phi.resource.group",
        "description": "phidata.phi.resource.group",
        "peekOfCode": "class ResourceGroup(BaseModel):\n    \"\"\"ResourceGroup is a collection of Resources\"\"\"\n    name: Optional[str] = None\n    enabled: bool = True\n    resources: Optional[List[ResourceBase]] = None\n    class Config:\n        arbitrary_types_allowed = True\n    def get_resources(self) -> List[ResourceBase]:\n        if self.enabled and self.resources is not None:\n            for resource in self.resources:",
        "detail": "phidata.phi.resource.group",
        "documentation": {}
    },
    {
        "label": "AssistantStorage",
        "kind": 6,
        "importPath": "phidata.phi.storage.assistant.base",
        "description": "phidata.phi.storage.assistant.base",
        "peekOfCode": "class AssistantStorage(ABC):\n    @abstractmethod\n    def create(self) -> None:\n        raise NotImplementedError\n    @abstractmethod\n    def read(self, run_id: str) -> Optional[AssistantRun]:\n        raise NotImplementedError\n    @abstractmethod\n    def get_all_run_ids(self, user_id: Optional[str] = None) -> List[str]:\n        raise NotImplementedError",
        "detail": "phidata.phi.storage.assistant.base",
        "documentation": {}
    },
    {
        "label": "PgAssistantStorage",
        "kind": 6,
        "importPath": "phidata.phi.storage.assistant.postgres",
        "description": "phidata.phi.storage.assistant.postgres",
        "peekOfCode": "class PgAssistantStorage(AssistantStorage):\n    def __init__(\n        self,\n        table_name: str,\n        schema: Optional[str] = \"ai\",\n        db_url: Optional[str] = None,\n        db_engine: Optional[Engine] = None,\n    ):\n        \"\"\"\n        This class provides assistant storage using a postgres table.",
        "detail": "phidata.phi.storage.assistant.postgres",
        "documentation": {}
    },
    {
        "label": "S2AssistantStorage",
        "kind": 6,
        "importPath": "phidata.phi.storage.assistant.singlestore",
        "description": "phidata.phi.storage.assistant.singlestore",
        "peekOfCode": "class S2AssistantStorage(AssistantStorage):\n    def __init__(\n        self,\n        table_name: str,\n        schema: Optional[str] = \"ai\",\n        db_url: Optional[str] = None,\n        db_engine: Optional[Engine] = None,\n    ):\n        \"\"\"\n        This class provides assistant storage using a singlestore table.",
        "detail": "phidata.phi.storage.assistant.singlestore",
        "documentation": {}
    },
    {
        "label": "SqlAssistantStorage",
        "kind": 6,
        "importPath": "phidata.phi.storage.assistant.sqllite",
        "description": "phidata.phi.storage.assistant.sqllite",
        "peekOfCode": "class SqlAssistantStorage(AssistantStorage):\n    def __init__(\n        self,\n        table_name: str,\n        db_url: Optional[str] = None,\n        db_file: Optional[str] = None,\n        db_engine: Optional[Engine] = None,\n    ):\n        \"\"\"\n        This class provides assistant storage using a sqlite database.",
        "detail": "phidata.phi.storage.assistant.sqllite",
        "documentation": {}
    },
    {
        "label": "BaseTable",
        "kind": 6,
        "importPath": "phidata.phi.table.sql.base",
        "description": "phidata.phi.table.sql.base",
        "peekOfCode": "class BaseTable(DeclarativeBase):\n    \"\"\"\n    Base class for SQLAlchemy model definitions.\n    https://docs.sqlalchemy.org/en/20/orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase\n    https://fastapi.tiangolo.com/tutorial/sql-databases/#create-a-base-class\n    \"\"\"\n    pass",
        "detail": "phidata.phi.table.sql.base",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "phidata.phi.task.task",
        "description": "phidata.phi.task.task",
        "peekOfCode": "class Task(BaseModel):\n    # -*- Task settings\n    # Task name\n    name: Optional[str] = None\n    # Task UUID (autogenerated if not set)\n    task_id: Optional[str] = Field(None, validate_default=True)\n    # Task description\n    description: Optional[str] = None\n    # Assistant to run this task\n    assistant: Optional[Assistant] = None",
        "detail": "phidata.phi.task.task",
        "documentation": {}
    },
    {
        "label": "get_username_sidebar",
        "kind": 2,
        "importPath": "phidata.phi.tools.streamlit.components",
        "description": "phidata.phi.tools.streamlit.components",
        "peekOfCode": "def get_username_sidebar() -> Optional[str]:\n    \"\"\"Sidebar component to get username\"\"\"\n    # Get username from user if not in session state\n    if \"username\" not in st.session_state:\n        username_input_container = st.sidebar.empty()\n        username = username_input_container.text_input(\":technologist: Enter username\")\n        if username != \"\":\n            st.session_state[\"username\"] = username\n            username_input_container.empty()\n    # Get username from session state",
        "detail": "phidata.phi.tools.streamlit.components",
        "documentation": {}
    },
    {
        "label": "reload_button_sidebar",
        "kind": 2,
        "importPath": "phidata.phi.tools.streamlit.components",
        "description": "phidata.phi.tools.streamlit.components",
        "peekOfCode": "def reload_button_sidebar(text: str = \"Reload Session\", **kwargs) -> None:\n    \"\"\"Sidebar component to show reload button\"\"\"\n    if st.sidebar.button(text, **kwargs):\n        st.session_state.clear()\n        st.rerun()\ndef check_password(password_env_var: str = \"APP_PASSWORD\") -> bool:\n    \"\"\"Component to check if a password entered by the user is correct.\n    To use this component, set the environment variable `APP_PASSWORD`.\n    Args:\n        password_env_var (str, optional): The environment variable to use for the password. Defaults to \"APP_PASSWORD\".",
        "detail": "phidata.phi.tools.streamlit.components",
        "documentation": {}
    },
    {
        "label": "check_password",
        "kind": 2,
        "importPath": "phidata.phi.tools.streamlit.components",
        "description": "phidata.phi.tools.streamlit.components",
        "peekOfCode": "def check_password(password_env_var: str = \"APP_PASSWORD\") -> bool:\n    \"\"\"Component to check if a password entered by the user is correct.\n    To use this component, set the environment variable `APP_PASSWORD`.\n    Args:\n        password_env_var (str, optional): The environment variable to use for the password. Defaults to \"APP_PASSWORD\".\n    Returns:\n        bool: `True` if the user had the correct password.\n    \"\"\"\n    app_password = getenv(password_env_var)\n    if app_password is None:",
        "detail": "phidata.phi.tools.streamlit.components",
        "documentation": {}
    },
    {
        "label": "get_openai_key_sidebar",
        "kind": 2,
        "importPath": "phidata.phi.tools.streamlit.components",
        "description": "phidata.phi.tools.streamlit.components",
        "peekOfCode": "def get_openai_key_sidebar() -> Optional[str]:\n    \"\"\"Sidebar component to get OpenAI API key\"\"\"\n    # Get OpenAI API key from environment variable\n    openai_key: Optional[str] = getenv(\"OPENAI_API_KEY\")\n    # If not found, get it from user input\n    if openai_key is None or openai_key == \"\" or openai_key == \"sk-***\":\n        api_key = st.sidebar.text_input(\"OpenAI API key\", placeholder=\"sk-***\", key=\"api_key\")\n        if api_key != \"sk-***\" or api_key != \"\" or api_key is not None:\n            openai_key = api_key\n    # Store it in session state and environment variable",
        "detail": "phidata.phi.tools.streamlit.components",
        "documentation": {}
    },
    {
        "label": "AirflowToolkit",
        "kind": 6,
        "importPath": "phidata.phi.tools.airflow",
        "description": "phidata.phi.tools.airflow",
        "peekOfCode": "class AirflowToolkit(Toolkit):\n    def __init__(self, dags_dir: Optional[Union[Path, str]] = None, save_dag: bool = True, read_dag: bool = True):\n        super().__init__(name=\"AirflowTools\")\n        _dags_dir: Optional[Path] = None\n        if dags_dir is not None:\n            if isinstance(dags_dir, str):\n                _dags_dir = Path.cwd().joinpath(dags_dir)\n            else:\n                _dags_dir = dags_dir\n        self.dags_dir: Path = _dags_dir or Path.cwd()",
        "detail": "phidata.phi.tools.airflow",
        "documentation": {}
    },
    {
        "label": "ApifyTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.apify",
        "description": "phidata.phi.tools.apify",
        "peekOfCode": "class ApifyTools(Toolkit):\n    def __init__(\n        self,\n        api_key: Optional[str] = None,\n        website_content_crawler: bool = True,\n        web_scraper: bool = False,\n    ):\n        super().__init__(name=\"apify_tools\")\n        self.api_key = api_key or getenv(\"MY_APIFY_TOKEN\")\n        if not self.api_key:",
        "detail": "phidata.phi.tools.apify",
        "documentation": {}
    },
    {
        "label": "ArxivToolkit",
        "kind": 6,
        "importPath": "phidata.phi.tools.arxiv_toolkit",
        "description": "phidata.phi.tools.arxiv_toolkit",
        "peekOfCode": "class ArxivToolkit(Toolkit):\n    def __init__(self, search_arxiv: bool = True, read_arxiv_papers: bool = True, download_dir: Optional[Path] = None):\n        super().__init__(name=\"arxiv_tools\")\n        self.client: arxiv.Client = arxiv.Client()\n        self.download_dir: Path = download_dir or Path(__file__).parent.joinpath(\"arxiv_pdfs\")\n        if search_arxiv:\n            self.register(self.search_arxiv_and_return_articles)\n        if read_arxiv_papers:\n            self.register(self.read_arxiv_papers)\n    def search_arxiv_and_return_articles(self, query: str, num_articles: int = 10) -> str:",
        "detail": "phidata.phi.tools.arxiv_toolkit",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "kind": 6,
        "importPath": "phidata.phi.tools.calculator",
        "description": "phidata.phi.tools.calculator",
        "peekOfCode": "class Calculator(Toolkit):\n    def __init__(\n        self,\n        add: bool = True,\n        subtract: bool = True,\n        multiply: bool = True,\n        divide: bool = True,\n        exponentiate: bool = False,\n        factorial: bool = False,\n        is_prime: bool = False,",
        "detail": "phidata.phi.tools.calculator",
        "documentation": {}
    },
    {
        "label": "CsvTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.csv_tools",
        "description": "phidata.phi.tools.csv_tools",
        "peekOfCode": "class CsvTools(Toolkit):\n    def __init__(\n        self,\n        csvs: Optional[List[Union[str, Path]]] = None,\n        row_limit: Optional[int] = None,\n        read_csvs: bool = True,\n        list_csvs: bool = True,\n        query_csvs: bool = True,\n        read_column_names: bool = True,\n        duckdb_connection: Optional[Any] = None,",
        "detail": "phidata.phi.tools.csv_tools",
        "documentation": {}
    },
    {
        "label": "DuckDbTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.duckdb",
        "description": "phidata.phi.tools.duckdb",
        "peekOfCode": "class DuckDbTools(Toolkit):\n    def __init__(\n        self,\n        db_path: Optional[str] = None,\n        connection: Optional[duckdb.DuckDBPyConnection] = None,\n        init_commands: Optional[List] = None,\n        read_only: bool = False,\n        config: Optional[dict] = None,\n        run_queries: bool = True,\n        inspect_queries: bool = False,",
        "detail": "phidata.phi.tools.duckdb",
        "documentation": {}
    },
    {
        "label": "DuckDuckGo",
        "kind": 6,
        "importPath": "phidata.phi.tools.duckduckgo",
        "description": "phidata.phi.tools.duckduckgo",
        "peekOfCode": "class DuckDuckGo(Toolkit):\n    def __init__(\n        self,\n        search: bool = True,\n        news: bool = True,\n        fixed_max_results: Optional[int] = None,\n        headers: Optional[Any] = None,\n        proxy: Optional[str] = None,\n        proxies: Optional[Any] = None,\n        timeout: Optional[int] = 10,",
        "detail": "phidata.phi.tools.duckduckgo",
        "documentation": {}
    },
    {
        "label": "EmailTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.email",
        "description": "phidata.phi.tools.email",
        "peekOfCode": "class EmailTools(Toolkit):\n    def __init__(\n        self,\n        receiver_email: Optional[str] = None,\n        sender_name: Optional[str] = None,\n        sender_email: Optional[str] = None,\n        sender_passkey: Optional[str] = None,\n    ):\n        super().__init__(name=\"email_tools\")\n        self.receiver_email: Optional[str] = receiver_email",
        "detail": "phidata.phi.tools.email",
        "documentation": {}
    },
    {
        "label": "ExaTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.exa",
        "description": "phidata.phi.tools.exa",
        "peekOfCode": "class ExaTools(Toolkit):\n    def __init__(\n        self,\n        text: bool = True,\n        text_length_limit: int = 1000,\n        highlights: bool = True,\n        api_key: Optional[str] = None,\n        num_results: Optional[int] = None,\n        start_crawl_date: Optional[str] = None,\n        end_crawl_date: Optional[str] = None,",
        "detail": "phidata.phi.tools.exa",
        "documentation": {}
    },
    {
        "label": "FileTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.file",
        "description": "phidata.phi.tools.file",
        "peekOfCode": "class FileTools(Toolkit):\n    def __init__(\n        self,\n        base_dir: Optional[Path] = None,\n        save_files: bool = True,\n        read_files: bool = True,\n        list_files: bool = True,\n    ):\n        super().__init__(name=\"file_tools\")\n        self.base_dir: Path = base_dir or Path.cwd()",
        "detail": "phidata.phi.tools.file",
        "documentation": {}
    },
    {
        "label": "Function",
        "kind": 6,
        "importPath": "phidata.phi.tools.function",
        "description": "phidata.phi.tools.function",
        "peekOfCode": "class Function(BaseModel):\n    \"\"\"Model for Functions\"\"\"\n    # The name of the function to be called.\n    # Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.\n    name: str\n    # A description of what the function does, used by the model to choose when and how to call the function.\n    description: Optional[str] = None\n    # The parameters the functions accepts, described as a JSON Schema object.\n    # To describe a function that accepts no parameters, provide the value {\"type\": \"object\", \"properties\": {}}.\n    parameters: Dict[str, Any] = {\"type\": \"object\", \"properties\": {}}",
        "detail": "phidata.phi.tools.function",
        "documentation": {}
    },
    {
        "label": "FunctionCall",
        "kind": 6,
        "importPath": "phidata.phi.tools.function",
        "description": "phidata.phi.tools.function",
        "peekOfCode": "class FunctionCall(BaseModel):\n    \"\"\"Model for Function Calls\"\"\"\n    # The function to be called.\n    function: Function\n    # The arguments to call the function with.\n    arguments: Optional[Dict[str, Any]] = None\n    # The result of the function call.\n    result: Optional[Any] = None\n    # The ID of the function call.\n    call_id: Optional[str] = None",
        "detail": "phidata.phi.tools.function",
        "documentation": {}
    },
    {
        "label": "GoogleTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.google",
        "description": "phidata.phi.tools.google",
        "peekOfCode": "class GoogleTools(Toolkit):\n    def __init__(self):\n        super().__init__(name=\"google_tools\")\n        self.register(self.get_result_from_google)\n    def get_result_from_google(self, query: str) -> str:\n        \"\"\"Gets the result for a query from Google.\n        Use this function to find an answer when not available in the knowledge base.\n        :param query: The query to search for.\n        :return: The result from Google.\n        \"\"\"",
        "detail": "phidata.phi.tools.google",
        "documentation": {}
    },
    {
        "label": "HackerNews",
        "kind": 6,
        "importPath": "phidata.phi.tools.hackernews",
        "description": "phidata.phi.tools.hackernews",
        "peekOfCode": "class HackerNews(Toolkit):\n    def __init__(\n        self,\n        get_top_stories: bool = True,\n        get_user_details: bool = True,\n    ):\n        super().__init__(name=\"hackers_news\")\n        # Register functions in the toolkit\n        if get_top_stories:\n            self.register(self.get_top_hackernews_stories)",
        "detail": "phidata.phi.tools.hackernews",
        "documentation": {}
    },
    {
        "label": "Newspaper4k",
        "kind": 6,
        "importPath": "phidata.phi.tools.newspaper4k",
        "description": "phidata.phi.tools.newspaper4k",
        "peekOfCode": "class Newspaper4k(Toolkit):\n    def __init__(\n        self,\n        read_article: bool = True,\n        include_summary: bool = False,\n        article_length: Optional[int] = None,\n    ):\n        super().__init__(name=\"newspaper_tools\")\n        self.include_summary: bool = include_summary\n        self.article_length: Optional[int] = article_length",
        "detail": "phidata.phi.tools.newspaper4k",
        "documentation": {}
    },
    {
        "label": "NewspaperToolkit",
        "kind": 6,
        "importPath": "phidata.phi.tools.newspaper_toolkit",
        "description": "phidata.phi.tools.newspaper_toolkit",
        "peekOfCode": "class NewspaperToolkit(Toolkit):\n    def __init__(\n        self,\n        get_article_text: bool = True,\n    ):\n        super().__init__(name=\"newspaper_toolkit\")\n        if get_article_text:\n            self.register(self.get_article_text)\n    def get_article_text(self, url: str) -> str:\n        \"\"\"Get the text of an article from a URL.",
        "detail": "phidata.phi.tools.newspaper_toolkit",
        "documentation": {}
    },
    {
        "label": "OpenBBTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.openbb_tools",
        "description": "phidata.phi.tools.openbb_tools",
        "peekOfCode": "class OpenBBTools(Toolkit):\n    def __init__(\n        self,\n        obb: Optional[Any] = None,\n        openbb_pat: Optional[str] = None,\n        provider: Literal[\"benzinga\", \"fmp\", \"intrinio\", \"polygon\", \"tiingo\", \"tmx\", \"yfinance\"] = \"yfinance\",\n        stock_price: bool = True,\n        search_symbols: bool = False,\n        company_news: bool = False,\n        company_profile: bool = False,",
        "detail": "phidata.phi.tools.openbb_tools",
        "documentation": {}
    },
    {
        "label": "PandasTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.pandas",
        "description": "phidata.phi.tools.pandas",
        "peekOfCode": "class PandasTools(Toolkit):\n    def __init__(self):\n        super().__init__(name=\"pandas_tools\")\n        self.dataframes: Dict[str, pd.DataFrame] = {}\n        self.register(self.create_pandas_dataframe)\n        self.register(self.run_dataframe_operation)\n    def create_pandas_dataframe(\n        self, dataframe_name: str, create_using_function: str, function_parameters: Dict[str, Any]\n    ) -> str:\n        \"\"\"Creates a pandas dataframe named `dataframe_name` by running a function `create_using_function` with the parameters `function_parameters`.",
        "detail": "phidata.phi.tools.pandas",
        "documentation": {}
    },
    {
        "label": "PhiTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.phi",
        "description": "phidata.phi.tools.phi",
        "peekOfCode": "class PhiTools(Toolkit):\n    def __init__(self):\n        super().__init__(name=\"phi_tools\")\n        self.register(self.create_new_app)\n        self.register(self.start_user_workspace)\n        self.register(self.validate_phi_is_ready)\n    def validate_phi_is_ready(self) -> bool:\n        \"\"\"Validates that Phi is ready to run commands.\n        :return: True if Phi is ready, False otherwise.\n        \"\"\"",
        "detail": "phidata.phi.tools.phi",
        "documentation": {}
    },
    {
        "label": "PubmedTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.pubmed",
        "description": "phidata.phi.tools.pubmed",
        "peekOfCode": "class PubmedTools(Toolkit):\n    def __init__(\n        self,\n        email: str = \"your_email@example.com\",\n        max_results: Optional[int] = None,\n    ):\n        super().__init__(name=\"pubmed\")\n        self.max_results: Optional[int] = max_results\n        self.email: str = email\n        self.register(self.search_pubmed)",
        "detail": "phidata.phi.tools.pubmed",
        "documentation": {}
    },
    {
        "label": "PythonTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.python",
        "description": "phidata.phi.tools.python",
        "peekOfCode": "class PythonTools(Toolkit):\n    def __init__(\n        self,\n        base_dir: Optional[Path] = None,\n        save_and_run: bool = True,\n        pip_install: bool = False,\n        run_code: bool = False,\n        list_files: bool = False,\n        run_files: bool = False,\n        read_files: bool = False,",
        "detail": "phidata.phi.tools.python",
        "documentation": {}
    },
    {
        "label": "warn",
        "kind": 2,
        "importPath": "phidata.phi.tools.python",
        "description": "phidata.phi.tools.python",
        "peekOfCode": "def warn() -> None:\n    logger.warning(\"PythonTools can run arbitrary code, please provide human supervision.\")\nclass PythonTools(Toolkit):\n    def __init__(\n        self,\n        base_dir: Optional[Path] = None,\n        save_and_run: bool = True,\n        pip_install: bool = False,\n        run_code: bool = False,\n        list_files: bool = False,",
        "detail": "phidata.phi.tools.python",
        "documentation": {}
    },
    {
        "label": "ResendTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.resend_tools",
        "description": "phidata.phi.tools.resend_tools",
        "peekOfCode": "class ResendTools(Toolkit):\n    def __init__(\n        self,\n        api_key: Optional[str] = None,\n        from_email: Optional[str] = None,\n    ):\n        super().__init__(name=\"resend_tools\")\n        self.from_email = from_email\n        self.api_key = api_key or getenv(\"RESEND_API_KEY\")\n        if not self.api_key:",
        "detail": "phidata.phi.tools.resend_tools",
        "documentation": {}
    },
    {
        "label": "Searxng",
        "kind": 6,
        "importPath": "phidata.phi.tools.searxng",
        "description": "phidata.phi.tools.searxng",
        "peekOfCode": "class Searxng(Toolkit):\n    def __init__(\n        self,\n        host: str,\n        engines: List[str] = [],\n        fixed_max_results: Optional[int] = None,\n        images: bool = False,\n        it: bool = False,\n        map: bool = False,\n        music: bool = False,",
        "detail": "phidata.phi.tools.searxng",
        "documentation": {}
    },
    {
        "label": "SerpApiTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.serpapi_tools",
        "description": "phidata.phi.tools.serpapi_tools",
        "peekOfCode": "class SerpApiTools(Toolkit):\n    def __init__(\n        self,\n        api_key: Optional[str] = None,\n        search_youtube: bool = False,\n    ):\n        super().__init__(name=\"serpapi_tools\")\n        self.api_key = api_key or getenv(\"SERPAPI_API_KEY\")\n        if not self.api_key:\n            logger.warning(\"No Serpapi API key provided\")",
        "detail": "phidata.phi.tools.serpapi_tools",
        "documentation": {}
    },
    {
        "label": "ShellTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.shell",
        "description": "phidata.phi.tools.shell",
        "peekOfCode": "class ShellTools(Toolkit):\n    def __init__(self, base_dir: Optional[Union[Path, str]] = None):\n        super().__init__(name=\"shell_tools\")\n        self.base_dir: Optional[Path] = None\n        if base_dir is not None:\n            self.base_dir = Path(base_dir) if isinstance(base_dir, str) else base_dir\n        self.register(self.run_shell_command)\n    def run_shell_command(self, args: List[str], tail: int = 100) -> str:\n        \"\"\"Runs a shell command and returns the output or error.\n        Args:",
        "detail": "phidata.phi.tools.shell",
        "documentation": {}
    },
    {
        "label": "SQLTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.sql",
        "description": "phidata.phi.tools.sql",
        "peekOfCode": "class SQLTools(Toolkit):\n    def __init__(\n        self,\n        db_url: Optional[str] = None,\n        db_engine: Optional[Engine] = None,\n        user: Optional[str] = None,\n        password: Optional[str] = None,\n        host: Optional[str] = None,\n        port: Optional[int] = None,\n        schema: Optional[str] = None,",
        "detail": "phidata.phi.tools.sql",
        "documentation": {}
    },
    {
        "label": "TavilyTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.tavily",
        "description": "phidata.phi.tools.tavily",
        "peekOfCode": "class TavilyTools(Toolkit):\n    def __init__(\n        self,\n        api_key: Optional[str] = None,\n        search: bool = True,\n        max_tokens: int = 6000,\n        include_answer: bool = True,\n        search_depth: Literal[\"basic\", \"advanced\"] = \"advanced\",\n        format: Literal[\"json\", \"markdown\"] = \"markdown\",\n        use_search_context: bool = False,",
        "detail": "phidata.phi.tools.tavily",
        "documentation": {}
    },
    {
        "label": "Tool",
        "kind": 6,
        "importPath": "phidata.phi.tools.tool",
        "description": "phidata.phi.tools.tool",
        "peekOfCode": "class Tool(BaseModel):\n    \"\"\"Model for Tools\"\"\"\n    # The type of tool\n    type: str\n    # The function to be called if type = \"function\"\n    function: Optional[Dict[str, Any]] = None\n    def to_dict(self) -> Dict[str, Any]:\n        return self.model_dump(exclude_none=True)",
        "detail": "phidata.phi.tools.tool",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "kind": 6,
        "importPath": "phidata.phi.tools.toolkit",
        "description": "phidata.phi.tools.toolkit",
        "peekOfCode": "class Toolkit:\n    def __init__(self, name: str = \"toolkit\"):\n        self.name: str = name\n        self.functions: Dict[str, Function] = OrderedDict()\n    def register(self, function: Callable, sanitize_arguments: bool = True):\n        try:\n            f = Function.from_callable(function)\n            f.sanitize_arguments = sanitize_arguments\n            self.functions[f.name] = f\n            logger.debug(f\"Function: {f.name} registered with {self.name}\")",
        "detail": "phidata.phi.tools.toolkit",
        "documentation": {}
    },
    {
        "label": "WebsiteTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.website",
        "description": "phidata.phi.tools.website",
        "peekOfCode": "class WebsiteTools(Toolkit):\n    def __init__(self, knowledge_base: Optional[WebsiteKnowledgeBase] = None):\n        super().__init__(name=\"website_tools\")\n        self.knowledge_base: Optional[WebsiteKnowledgeBase] = knowledge_base\n        if self.knowledge_base is not None and isinstance(self.knowledge_base, WebsiteKnowledgeBase):\n            self.register(self.add_website_to_knowledge_base)\n        else:\n            self.register(self.read_url)\n    def add_website_to_knowledge_base(self, url: str) -> str:\n        \"\"\"This function adds a websites content to the knowledge base.",
        "detail": "phidata.phi.tools.website",
        "documentation": {}
    },
    {
        "label": "WikipediaTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.wikipedia",
        "description": "phidata.phi.tools.wikipedia",
        "peekOfCode": "class WikipediaTools(Toolkit):\n    def __init__(self, knowledge_base: Optional[WikipediaKnowledgeBase] = None):\n        super().__init__(name=\"wikipedia_tools\")\n        self.knowledge_base: Optional[WikipediaKnowledgeBase] = knowledge_base\n        if self.knowledge_base is not None and isinstance(self.knowledge_base, WikipediaKnowledgeBase):\n            self.register(self.search_wikipedia_and_update_knowledge_base)\n        else:\n            self.register(self.search_wikipedia)\n    def search_wikipedia_and_update_knowledge_base(self, topic: str) -> str:\n        \"\"\"This function searches wikipedia for a topic, adds the results to the knowledge base and returns them.",
        "detail": "phidata.phi.tools.wikipedia",
        "documentation": {}
    },
    {
        "label": "YFinanceTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.yfinance",
        "description": "phidata.phi.tools.yfinance",
        "peekOfCode": "class YFinanceTools(Toolkit):\n    def __init__(\n        self,\n        stock_price: bool = True,\n        company_info: bool = False,\n        stock_fundamentals: bool = False,\n        income_statements: bool = False,\n        key_financial_ratios: bool = False,\n        analyst_recommendations: bool = False,\n        company_news: bool = False,",
        "detail": "phidata.phi.tools.yfinance",
        "documentation": {}
    },
    {
        "label": "YouTubeTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.youtube_tools",
        "description": "phidata.phi.tools.youtube_tools",
        "peekOfCode": "class YouTubeTools(Toolkit):\n    def __init__(\n        self,\n        get_video_captions: bool = True,\n        get_video_data: bool = True,\n        languages: Optional[List[str]] = None,\n    ):\n        super().__init__(name=\"youtube_tools\")\n        self.languages: Optional[List[str]] = languages\n        if get_video_captions:",
        "detail": "phidata.phi.tools.youtube_tools",
        "documentation": {}
    },
    {
        "label": "ZendeskTools",
        "kind": 6,
        "importPath": "phidata.phi.tools.zendesk",
        "description": "phidata.phi.tools.zendesk",
        "peekOfCode": "class ZendeskTools(Toolkit):\n    \"\"\"\n    A toolkit class for interacting with the Zendesk API to search articles.\n    It requires authentication details and the company name to configure the API access.\n    \"\"\"\n    def __init__(\n        self,\n        username: Optional[str] = None,\n        password: Optional[str] = None,\n        company_name: Optional[str] = None,",
        "detail": "phidata.phi.tools.zendesk",
        "documentation": {}
    },
    {
        "label": "isinstanceany",
        "kind": 2,
        "importPath": "phidata.phi.utils.common",
        "description": "phidata.phi.utils.common",
        "peekOfCode": "def isinstanceany(obj: Any, class_list: List[Type]) -> bool:\n    \"\"\"Returns True if obj is an instance of the classes in class_list\"\"\"\n    for cls in class_list:\n        if isinstance(obj, cls):\n            return True\n    return False\ndef str_to_int(inp: Optional[str]) -> Optional[int]:\n    \"\"\"\n    Safely converts a string value to integer.\n    Args:",
        "detail": "phidata.phi.utils.common",
        "documentation": {}
    },
    {
        "label": "str_to_int",
        "kind": 2,
        "importPath": "phidata.phi.utils.common",
        "description": "phidata.phi.utils.common",
        "peekOfCode": "def str_to_int(inp: Optional[str]) -> Optional[int]:\n    \"\"\"\n    Safely converts a string value to integer.\n    Args:\n        inp: input string\n    Returns: input string as int if possible, None if not\n    \"\"\"\n    if inp is None:\n        return None\n    try:",
        "detail": "phidata.phi.utils.common",
        "documentation": {}
    },
    {
        "label": "is_empty",
        "kind": 2,
        "importPath": "phidata.phi.utils.common",
        "description": "phidata.phi.utils.common",
        "peekOfCode": "def is_empty(val: Any) -> bool:\n    \"\"\"Returns True if val is None or empty\"\"\"\n    if val is None or len(val) == 0 or val == \"\":\n        return True\n    return False\ndef get_image_str(repo: str, tag: str) -> str:\n    return f\"{repo}:{tag}\"",
        "detail": "phidata.phi.utils.common",
        "documentation": {}
    },
    {
        "label": "get_image_str",
        "kind": 2,
        "importPath": "phidata.phi.utils.common",
        "description": "phidata.phi.utils.common",
        "peekOfCode": "def get_image_str(repo: str, tag: str) -> str:\n    return f\"{repo}:{tag}\"",
        "detail": "phidata.phi.utils.common",
        "documentation": {}
    },
    {
        "label": "get_default_ns_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_ns_name(app_name: str) -> str:\n    return \"{}-ns\".format(app_name)\ndef get_default_ctx_name(app_name: str) -> str:\n    return \"{}-ctx\".format(app_name)\ndef get_default_sa_name(app_name: str) -> str:\n    return \"{}-sa\".format(app_name)\ndef get_default_cr_name(app_name: str) -> str:\n    return \"{}-cr\".format(app_name)\ndef get_default_crb_name(app_name: str) -> str:\n    return \"{}-crb\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_ctx_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_ctx_name(app_name: str) -> str:\n    return \"{}-ctx\".format(app_name)\ndef get_default_sa_name(app_name: str) -> str:\n    return \"{}-sa\".format(app_name)\ndef get_default_cr_name(app_name: str) -> str:\n    return \"{}-cr\".format(app_name)\ndef get_default_crb_name(app_name: str) -> str:\n    return \"{}-crb\".format(app_name)\ndef get_default_pod_name(app_name: str) -> str:\n    return \"{}-pod\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_sa_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_sa_name(app_name: str) -> str:\n    return \"{}-sa\".format(app_name)\ndef get_default_cr_name(app_name: str) -> str:\n    return \"{}-cr\".format(app_name)\ndef get_default_crb_name(app_name: str) -> str:\n    return \"{}-crb\".format(app_name)\ndef get_default_pod_name(app_name: str) -> str:\n    return \"{}-pod\".format(app_name)\ndef get_default_container_name(app_name: str) -> str:\n    return \"{}-container\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_cr_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_cr_name(app_name: str) -> str:\n    return \"{}-cr\".format(app_name)\ndef get_default_crb_name(app_name: str) -> str:\n    return \"{}-crb\".format(app_name)\ndef get_default_pod_name(app_name: str) -> str:\n    return \"{}-pod\".format(app_name)\ndef get_default_container_name(app_name: str) -> str:\n    return \"{}-container\".format(app_name)\ndef get_default_service_name(app_name: str) -> str:\n    return \"{}-svc\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_crb_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_crb_name(app_name: str) -> str:\n    return \"{}-crb\".format(app_name)\ndef get_default_pod_name(app_name: str) -> str:\n    return \"{}-pod\".format(app_name)\ndef get_default_container_name(app_name: str) -> str:\n    return \"{}-container\".format(app_name)\ndef get_default_service_name(app_name: str) -> str:\n    return \"{}-svc\".format(app_name)\ndef get_default_ingress_name(app_name: str) -> str:\n    return \"{}-ingress\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_pod_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_pod_name(app_name: str) -> str:\n    return \"{}-pod\".format(app_name)\ndef get_default_container_name(app_name: str) -> str:\n    return \"{}-container\".format(app_name)\ndef get_default_service_name(app_name: str) -> str:\n    return \"{}-svc\".format(app_name)\ndef get_default_ingress_name(app_name: str) -> str:\n    return \"{}-ingress\".format(app_name)\ndef get_default_deploy_name(app_name: str) -> str:\n    return \"{}-deploy\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_container_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_container_name(app_name: str) -> str:\n    return \"{}-container\".format(app_name)\ndef get_default_service_name(app_name: str) -> str:\n    return \"{}-svc\".format(app_name)\ndef get_default_ingress_name(app_name: str) -> str:\n    return \"{}-ingress\".format(app_name)\ndef get_default_deploy_name(app_name: str) -> str:\n    return \"{}-deploy\".format(app_name)\ndef get_default_configmap_name(app_name: str) -> str:\n    return \"{}-cm\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_service_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_service_name(app_name: str) -> str:\n    return \"{}-svc\".format(app_name)\ndef get_default_ingress_name(app_name: str) -> str:\n    return \"{}-ingress\".format(app_name)\ndef get_default_deploy_name(app_name: str) -> str:\n    return \"{}-deploy\".format(app_name)\ndef get_default_configmap_name(app_name: str) -> str:\n    return \"{}-cm\".format(app_name)\ndef get_default_secret_name(app_name: str) -> str:\n    return \"{}-secret\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_ingress_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_ingress_name(app_name: str) -> str:\n    return \"{}-ingress\".format(app_name)\ndef get_default_deploy_name(app_name: str) -> str:\n    return \"{}-deploy\".format(app_name)\ndef get_default_configmap_name(app_name: str) -> str:\n    return \"{}-cm\".format(app_name)\ndef get_default_secret_name(app_name: str) -> str:\n    return \"{}-secret\".format(app_name)\ndef get_default_volume_name(app_name: str) -> str:\n    return \"{}-volume\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_deploy_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_deploy_name(app_name: str) -> str:\n    return \"{}-deploy\".format(app_name)\ndef get_default_configmap_name(app_name: str) -> str:\n    return \"{}-cm\".format(app_name)\ndef get_default_secret_name(app_name: str) -> str:\n    return \"{}-secret\".format(app_name)\ndef get_default_volume_name(app_name: str) -> str:\n    return \"{}-volume\".format(app_name)\ndef get_default_pvc_name(app_name: str) -> str:\n    return \"{}-pvc\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_configmap_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_configmap_name(app_name: str) -> str:\n    return \"{}-cm\".format(app_name)\ndef get_default_secret_name(app_name: str) -> str:\n    return \"{}-secret\".format(app_name)\ndef get_default_volume_name(app_name: str) -> str:\n    return \"{}-volume\".format(app_name)\ndef get_default_pvc_name(app_name: str) -> str:\n    return \"{}-pvc\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_secret_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_secret_name(app_name: str) -> str:\n    return \"{}-secret\".format(app_name)\ndef get_default_volume_name(app_name: str) -> str:\n    return \"{}-volume\".format(app_name)\ndef get_default_pvc_name(app_name: str) -> str:\n    return \"{}-pvc\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_volume_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_volume_name(app_name: str) -> str:\n    return \"{}-volume\".format(app_name)\ndef get_default_pvc_name(app_name: str) -> str:\n    return \"{}-pvc\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "get_default_pvc_name",
        "kind": 2,
        "importPath": "phidata.phi.utils.defaults",
        "description": "phidata.phi.utils.defaults",
        "peekOfCode": "def get_default_pvc_name(app_name: str) -> str:\n    return \"{}-pvc\".format(app_name)",
        "detail": "phidata.phi.utils.defaults",
        "documentation": {}
    },
    {
        "label": "current_datetime",
        "kind": 2,
        "importPath": "phidata.phi.utils.dttm",
        "description": "phidata.phi.utils.dttm",
        "peekOfCode": "def current_datetime() -> datetime:\n    return datetime.now()\ndef current_datetime_utc() -> datetime:\n    return datetime.now(timezone.utc)\ndef current_datetime_utc_str() -> str:\n    return current_datetime_utc().strftime(\"%Y-%m-%dT%H:%M:%S\")",
        "detail": "phidata.phi.utils.dttm",
        "documentation": {}
    },
    {
        "label": "current_datetime_utc",
        "kind": 2,
        "importPath": "phidata.phi.utils.dttm",
        "description": "phidata.phi.utils.dttm",
        "peekOfCode": "def current_datetime_utc() -> datetime:\n    return datetime.now(timezone.utc)\ndef current_datetime_utc_str() -> str:\n    return current_datetime_utc().strftime(\"%Y-%m-%dT%H:%M:%S\")",
        "detail": "phidata.phi.utils.dttm",
        "documentation": {}
    },
    {
        "label": "current_datetime_utc_str",
        "kind": 2,
        "importPath": "phidata.phi.utils.dttm",
        "description": "phidata.phi.utils.dttm",
        "peekOfCode": "def current_datetime_utc_str() -> str:\n    return current_datetime_utc().strftime(\"%Y-%m-%dT%H:%M:%S\")",
        "detail": "phidata.phi.utils.dttm",
        "documentation": {}
    },
    {
        "label": "ExtendedEnum",
        "kind": 6,
        "importPath": "phidata.phi.utils.enum",
        "description": "phidata.phi.utils.enum",
        "peekOfCode": "class ExtendedEnum(Enum):\n    @classmethod\n    def values_list(cls: Any) -> List[Any]:\n        return list(map(lambda c: c.value, cls))\n    @classmethod\n    def from_str(cls: Any, str_to_convert_to_enum: Optional[str]) -> Optional[Any]:\n        \"\"\"Convert a string value to an enum object. Case Sensitive\"\"\"\n        if str_to_convert_to_enum is None:\n            return None\n        if str_to_convert_to_enum in cls._value2member_map_:",
        "detail": "phidata.phi.utils.enum",
        "documentation": {}
    },
    {
        "label": "get_from_env",
        "kind": 2,
        "importPath": "phidata.phi.utils.env",
        "description": "phidata.phi.utils.env",
        "peekOfCode": "def get_from_env(key: str, default: Optional[str] = None, required: bool = False) -> Optional[str]:\n    \"\"\"Get the value for an environment variable. Use default if not found, or raise an error if required is True.\"\"\"\n    value = getenv(key, default)\n    if value is None and required:\n        raise ValueError(f\"Environment variable {key} is required but not found\")\n    return value",
        "detail": "phidata.phi.utils.env",
        "documentation": {}
    },
    {
        "label": "rmdir_recursive",
        "kind": 2,
        "importPath": "phidata.phi.utils.filesystem",
        "description": "phidata.phi.utils.filesystem",
        "peekOfCode": "def rmdir_recursive(dir_path: Path) -> bool:\n    \"\"\"Deletes dir_path recursively, including all files and dirs in that directory\n    Returns True if dir deleted successfully.\n    \"\"\"\n    if not dir_path.exists():\n        return True\n    if dir_path.is_dir():\n        from shutil import rmtree\n        rmtree(path=dir_path, ignore_errors=True)\n    elif dir_path.is_file():",
        "detail": "phidata.phi.utils.filesystem",
        "documentation": {}
    },
    {
        "label": "delete_files_in_dir",
        "kind": 2,
        "importPath": "phidata.phi.utils.filesystem",
        "description": "phidata.phi.utils.filesystem",
        "peekOfCode": "def delete_files_in_dir(dir: Path) -> None:\n    \"\"\"Deletes all files in a directory, but doesn't delete the directory\"\"\"\n    for item in dir.iterdir():\n        if item.is_dir():\n            rmdir_recursive(item)\n        else:\n            item.unlink()\ndef delete_from_fs(path_to_del: Path) -> bool:\n    if not path_to_del.exists():\n        return True",
        "detail": "phidata.phi.utils.filesystem",
        "documentation": {}
    },
    {
        "label": "delete_from_fs",
        "kind": 2,
        "importPath": "phidata.phi.utils.filesystem",
        "description": "phidata.phi.utils.filesystem",
        "peekOfCode": "def delete_from_fs(path_to_del: Path) -> bool:\n    if not path_to_del.exists():\n        return True\n    if path_to_del.is_dir():\n        return rmdir_recursive(path_to_del)\n    else:\n        path_to_del.unlink()\n    return True if not path_to_del.exists() else False",
        "detail": "phidata.phi.utils.filesystem",
        "documentation": {}
    },
    {
        "label": "remove_indent",
        "kind": 2,
        "importPath": "phidata.phi.utils.format_str",
        "description": "phidata.phi.utils.format_str",
        "peekOfCode": "def remove_indent(s: Optional[str]) -> Optional[str]:\n    \"\"\"\n    Remove the indent from a string.\n    Args:\n        s (str): String to remove indent from\n    Returns:\n        str: String with indent removed\n    \"\"\"\n    if s is not None and isinstance(s, str):\n        return \"\\n\".join([line.strip() for line in s.split(\"\\n\")])",
        "detail": "phidata.phi.utils.format_str",
        "documentation": {}
    },
    {
        "label": "get_function_call",
        "kind": 2,
        "importPath": "phidata.phi.utils.functions",
        "description": "phidata.phi.utils.functions",
        "peekOfCode": "def get_function_call(\n    name: str,\n    arguments: Optional[str] = None,\n    call_id: Optional[str] = None,\n    functions: Optional[Dict[str, Function]] = None,\n) -> Optional[FunctionCall]:\n    logger.debug(f\"Getting function {name}\")\n    if functions is None:\n        return None\n    function_to_call: Optional[Function] = None",
        "detail": "phidata.phi.utils.functions",
        "documentation": {}
    },
    {
        "label": "GitCloneProgress",
        "kind": 6,
        "importPath": "phidata.phi.utils.git",
        "description": "phidata.phi.utils.git",
        "peekOfCode": "class GitCloneProgress(git.RemoteProgress):\n    # https://gitpython.readthedocs.io/en/stable/reference.html#module-git.remote\n    # def line_dropped(self, line):\n    #     print(\"line dropped: {}\".format(line))\n    def update(self, op_code, cur_count, max_count=None, message=\"\"):\n        if op_code == 5:\n            logger.debug(\"Starting copy\")\n        if op_code == 10:\n            logger.debug(\"Copy complete\")\n        # logger.debug(f\"op_code: {op_code}\")",
        "detail": "phidata.phi.utils.git",
        "documentation": {}
    },
    {
        "label": "get_remote_origin_for_dir",
        "kind": 2,
        "importPath": "phidata.phi.utils.git",
        "description": "phidata.phi.utils.git",
        "peekOfCode": "def get_remote_origin_for_dir(\n    ws_root_path: Optional[Path],\n) -> Optional[str]:\n    \"\"\"Returns the remote origin for a directory\"\"\"\n    if ws_root_path is None or not ws_root_path.exists() or not ws_root_path.is_dir():\n        return None\n    _remote_origin: Optional[git.Remote] = None\n    try:\n        _git_repo: git.Repo = git.Repo(path=ws_root_path)\n        _remote_origin = _git_repo.remote(\"origin\")",
        "detail": "phidata.phi.utils.git",
        "documentation": {}
    },
    {
        "label": "CustomJSONEncoder",
        "kind": 6,
        "importPath": "phidata.phi.utils.json_io",
        "description": "phidata.phi.utils.json_io",
        "peekOfCode": "class CustomJSONEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, datetime) or isinstance(o, date):\n            return o.isoformat()\n        if isinstance(o, Path):\n            return str(o)\n        return json.JSONEncoder.default(self, o)\ndef read_json_file(file_path: Optional[Path]) -> Optional[Union[Dict, List]]:\n    if file_path is not None and file_path.exists() and file_path.is_file():\n        logger.debug(f\"Reading {file_path}\")",
        "detail": "phidata.phi.utils.json_io",
        "documentation": {}
    },
    {
        "label": "read_json_file",
        "kind": 2,
        "importPath": "phidata.phi.utils.json_io",
        "description": "phidata.phi.utils.json_io",
        "peekOfCode": "def read_json_file(file_path: Optional[Path]) -> Optional[Union[Dict, List]]:\n    if file_path is not None and file_path.exists() and file_path.is_file():\n        logger.debug(f\"Reading {file_path}\")\n        return json.loads(file_path.read_text())\n    return None\ndef write_json_file(file_path: Optional[Path], data: Optional[Union[Dict, List]], **kwargs) -> None:\n    if file_path is not None and data is not None:\n        logger.debug(f\"Writing {file_path}\")\n        file_path.write_text(json.dumps(data, cls=CustomJSONEncoder, indent=4, **kwargs))",
        "detail": "phidata.phi.utils.json_io",
        "documentation": {}
    },
    {
        "label": "write_json_file",
        "kind": 2,
        "importPath": "phidata.phi.utils.json_io",
        "description": "phidata.phi.utils.json_io",
        "peekOfCode": "def write_json_file(file_path: Optional[Path], data: Optional[Union[Dict, List]], **kwargs) -> None:\n    if file_path is not None and data is not None:\n        logger.debug(f\"Writing {file_path}\")\n        file_path.write_text(json.dumps(data, cls=CustomJSONEncoder, indent=4, **kwargs))",
        "detail": "phidata.phi.utils.json_io",
        "documentation": {}
    },
    {
        "label": "get_json_type_for_py_type",
        "kind": 2,
        "importPath": "phidata.phi.utils.json_schema",
        "description": "phidata.phi.utils.json_schema",
        "peekOfCode": "def get_json_type_for_py_type(arg: str) -> str:\n    \"\"\"\n    Get the JSON schema type for a given type.\n    :param arg: The type to get the JSON schema type for.\n    :return: The JSON schema type.\n    See: https://json-schema.org/understanding-json-schema/reference/type.html#type-specific-keywords\n    \"\"\"\n    # logger.info(f\"Getting JSON type for: {arg}\")\n    if arg in (\"int\", \"float\"):\n        return \"number\"",
        "detail": "phidata.phi.utils.json_schema",
        "documentation": {}
    },
    {
        "label": "get_json_schema_for_arg",
        "kind": 2,
        "importPath": "phidata.phi.utils.json_schema",
        "description": "phidata.phi.utils.json_schema",
        "peekOfCode": "def get_json_schema_for_arg(t: Any) -> Optional[Any]:\n    # logger.info(f\"Getting JSON schema for arg: {t}\")\n    json_schema = None\n    type_args = get_args(t)\n    # logger.info(f\"Type args: {type_args}\")\n    type_origin = get_origin(t)\n    # logger.info(f\"Type origin: {type_origin}\")\n    if type_origin is not None:\n        if type_origin == list:\n            json_schema_for_items = get_json_schema_for_arg(type_args[0])",
        "detail": "phidata.phi.utils.json_schema",
        "documentation": {}
    },
    {
        "label": "get_json_schema",
        "kind": 2,
        "importPath": "phidata.phi.utils.json_schema",
        "description": "phidata.phi.utils.json_schema",
        "peekOfCode": "def get_json_schema(type_hints: Dict[str, Any]) -> Dict[str, Any]:\n    json_schema: Dict[str, Any] = {\"type\": \"object\", \"properties\": {}}\n    for k, v in type_hints.items():\n        # logger.info(f\"Parsing arg: {k} | {v}\")\n        if k == \"return\":\n            continue\n        arg_json_schema = get_json_schema_for_arg(v)\n        if arg_json_schema is not None:\n            # logger.info(f\"json_schema: {arg_json_schema}\")\n            json_schema[\"properties\"][k] = arg_json_schema",
        "detail": "phidata.phi.utils.json_schema",
        "documentation": {}
    },
    {
        "label": "load_env",
        "kind": 2,
        "importPath": "phidata.phi.utils.load_env",
        "description": "phidata.phi.utils.load_env",
        "peekOfCode": "def load_env(env: Optional[Dict[str, str]] = None, dotenv_dir: Optional[Path] = None) -> None:\n    from os import environ\n    if dotenv_dir is not None:\n        dotenv_file = dotenv_dir.joinpath(\".env\")\n        if dotenv_file is not None and dotenv_file.exists() and dotenv_file.is_file():\n            from dotenv.main import dotenv_values\n            dotenv_dict: Dict[str, Optional[str]] = dotenv_values(dotenv_file)\n            for key, value in dotenv_dict.items():\n                if value is not None:\n                    environ[key] = value",
        "detail": "phidata.phi.utils.load_env",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "kind": 2,
        "importPath": "phidata.phi.utils.log",
        "description": "phidata.phi.utils.log",
        "peekOfCode": "def get_logger(logger_name: str) -> logging.Logger:\n    # https://rich.readthedocs.io/en/latest/reference/logging.html#rich.logging.RichHandler\n    # https://rich.readthedocs.io/en/latest/logging.html#handle-exceptions\n    rich_handler = RichHandler(\n        show_time=False,\n        rich_tracebacks=False,\n        show_path=True if phi_cli_settings.api_runtime == \"dev\" else False,\n        tracebacks_show_locals=False,\n    )\n    rich_handler.setFormatter(",
        "detail": "phidata.phi.utils.log",
        "documentation": {}
    },
    {
        "label": "set_log_level_to_debug",
        "kind": 2,
        "importPath": "phidata.phi.utils.log",
        "description": "phidata.phi.utils.log",
        "peekOfCode": "def set_log_level_to_debug():\n    _logger = logging.getLogger(LOGGER_NAME)\n    _logger.setLevel(logging.DEBUG)",
        "detail": "phidata.phi.utils.log",
        "documentation": {}
    },
    {
        "label": "LOGGER_NAME",
        "kind": 5,
        "importPath": "phidata.phi.utils.log",
        "description": "phidata.phi.utils.log",
        "peekOfCode": "LOGGER_NAME = \"phi\"\ndef get_logger(logger_name: str) -> logging.Logger:\n    # https://rich.readthedocs.io/en/latest/reference/logging.html#rich.logging.RichHandler\n    # https://rich.readthedocs.io/en/latest/logging.html#handle-exceptions\n    rich_handler = RichHandler(\n        show_time=False,\n        rich_tracebacks=False,\n        show_path=True if phi_cli_settings.api_runtime == \"dev\" else False,\n        tracebacks_show_locals=False,\n    )",
        "detail": "phidata.phi.utils.log",
        "documentation": {}
    },
    {
        "label": "merge_dictionaries",
        "kind": 2,
        "importPath": "phidata.phi.utils.merge_dict",
        "description": "phidata.phi.utils.merge_dict",
        "peekOfCode": "def merge_dictionaries(a: Dict[str, Any], b: Dict[str, Any]) -> None:\n    \"\"\"\n    Recursively merges two dictionaries.\n    If there are conflicting keys, values from 'b' will take precedence.\n    @params:\n    a (Dict[str, Any]): The first dictionary to be merged.\n    b (Dict[str, Any]): The second dictionary, whose values will take precedence.\n    Returns:\n    None: The function modifies the first dictionary in place.\n    \"\"\"",
        "detail": "phidata.phi.utils.merge_dict",
        "documentation": {}
    },
    {
        "label": "get_text_from_message",
        "kind": 2,
        "importPath": "phidata.phi.utils.message",
        "description": "phidata.phi.utils.message",
        "peekOfCode": "def get_text_from_message(message: Union[List, Dict, str]) -> str:\n    \"\"\"Return the user texts from the message\"\"\"\n    if isinstance(message, str):\n        return message\n    if isinstance(message, list):\n        text_messages = []\n        if len(message) == 0:\n            return \"\"\n        if \"type\" in message[0]:\n            for m in message:",
        "detail": "phidata.phi.utils.message",
        "documentation": {}
    },
    {
        "label": "pickle_object_to_file",
        "kind": 2,
        "importPath": "phidata.phi.utils.pickle",
        "description": "phidata.phi.utils.pickle",
        "peekOfCode": "def pickle_object_to_file(obj: Any, file_path: Path) -> Any:\n    \"\"\"Pickles and saves object to file_path\"\"\"\n    import pickle\n    _obj_parent = file_path.parent\n    if not _obj_parent.exists():\n        _obj_parent.mkdir(parents=True, exist_ok=True)\n    pickle.dump(obj, file_path.open(\"wb\"))\ndef unpickle_object_from_file(file_path: Path, verify_class: Optional[Any] = None) -> Any:\n    \"\"\"Reads the contents of file_path and unpickles the binary content into an object.\n    If verify_class is provided, checks if the object is an instance of that class.",
        "detail": "phidata.phi.utils.pickle",
        "documentation": {}
    },
    {
        "label": "unpickle_object_from_file",
        "kind": 2,
        "importPath": "phidata.phi.utils.pickle",
        "description": "phidata.phi.utils.pickle",
        "peekOfCode": "def unpickle_object_from_file(file_path: Path, verify_class: Optional[Any] = None) -> Any:\n    \"\"\"Reads the contents of file_path and unpickles the binary content into an object.\n    If verify_class is provided, checks if the object is an instance of that class.\n    \"\"\"\n    import pickle\n    _obj = None\n    # logger.debug(f\"Reading {file_path}\")\n    if file_path.exists() and file_path.is_file():\n        _obj = pickle.load(file_path.open(\"rb\"))\n    if _obj and verify_class and not isinstance(_obj, verify_class):",
        "detail": "phidata.phi.utils.pickle",
        "documentation": {}
    },
    {
        "label": "get_python_objects_from_module",
        "kind": 2,
        "importPath": "phidata.phi.utils.py_io",
        "description": "phidata.phi.utils.py_io",
        "peekOfCode": "def get_python_objects_from_module(module_path: Path) -> Dict:\n    \"\"\"Returns a dictionary of python objects from a module\"\"\"\n    import importlib.util\n    from importlib.machinery import ModuleSpec\n    # https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly\n    # Create a ModuleSpec\n    module_spec: Optional[ModuleSpec] = importlib.util.spec_from_file_location(\"module\", module_path)\n    # Using the ModuleSpec create a module\n    if module_spec:\n        module = importlib.util.module_from_spec(module_spec)",
        "detail": "phidata.phi.utils.py_io",
        "documentation": {}
    },
    {
        "label": "read_pyproject_phidata",
        "kind": 2,
        "importPath": "phidata.phi.utils.pyproject",
        "description": "phidata.phi.utils.pyproject",
        "peekOfCode": "def read_pyproject_phidata(pyproject_file: Path) -> Optional[Dict]:\n    logger.debug(f\"Reading {pyproject_file}\")\n    try:\n        import tomli\n        pyproject_dict = tomli.loads(pyproject_file.read_text())\n        phidata_conf = pyproject_dict.get(\"tool\", {}).get(\"phidata\", None)\n        if phidata_conf is not None and isinstance(phidata_conf, dict):\n            return phidata_conf\n    except Exception as e:\n        logger.error(f\"Could not read {pyproject_file}: {e}\")",
        "detail": "phidata.phi.utils.pyproject",
        "documentation": {}
    },
    {
        "label": "parse_resource_filter",
        "kind": 2,
        "importPath": "phidata.phi.utils.resource_filter",
        "description": "phidata.phi.utils.resource_filter",
        "peekOfCode": "def parse_resource_filter(\n    resource_filter: str,\n) -> Tuple[Optional[str], Optional[str], Optional[str], Optional[str], Optional[str]]:\n    target_env: Optional[str] = None\n    target_infra: Optional[str] = None\n    target_group: Optional[str] = None\n    target_name: Optional[str] = None\n    target_type: Optional[str] = None\n    filters = resource_filter.split(\":\")\n    num_filters = len(filters)",
        "detail": "phidata.phi.utils.resource_filter",
        "documentation": {}
    },
    {
        "label": "parse_k8s_resource_filter",
        "kind": 2,
        "importPath": "phidata.phi.utils.resource_filter",
        "description": "phidata.phi.utils.resource_filter",
        "peekOfCode": "def parse_k8s_resource_filter(\n    resource_filter: str,\n) -> Tuple[Optional[str], Optional[str], Optional[str], Optional[str]]:\n    target_env: Optional[str] = None\n    target_group: Optional[str] = None\n    target_name: Optional[str] = None\n    target_type: Optional[str] = None\n    filters = resource_filter.split(\":\")\n    num_filters = len(filters)\n    if num_filters >= 1:",
        "detail": "phidata.phi.utils.resource_filter",
        "documentation": {}
    },
    {
        "label": "ResponseIterator",
        "kind": 6,
        "importPath": "phidata.phi.utils.response_iterator",
        "description": "phidata.phi.utils.response_iterator",
        "peekOfCode": "class ResponseIterator:\n    def __init__(self):\n        self.items = []\n        self.index = 0\n    def add(self, item):\n        self.items.append(item)\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.index >= len(self.items):",
        "detail": "phidata.phi.utils.response_iterator",
        "documentation": {}
    },
    {
        "label": "run_shell_command",
        "kind": 2,
        "importPath": "phidata.phi.utils.shell",
        "description": "phidata.phi.utils.shell",
        "peekOfCode": "def run_shell_command(args: List[str], tail: int = 100) -> str:\n    logger.info(f\"Running shell command: {args}\")\n    import subprocess\n    try:\n        result = subprocess.run(args, capture_output=True, text=True)\n        logger.debug(f\"Result: {result}\")\n        logger.debug(f\"Return code: {result.returncode}\")\n        if result.returncode != 0:\n            return f\"Error: {result.stderr}\"\n        # return only the last n lines of the output",
        "detail": "phidata.phi.utils.shell",
        "documentation": {}
    },
    {
        "label": "Timer",
        "kind": 6,
        "importPath": "phidata.phi.utils.timer",
        "description": "phidata.phi.utils.timer",
        "peekOfCode": "class Timer:\n    \"\"\"Timer class for timing code execution\"\"\"\n    def __init__(self):\n        self.start_time: Optional[float] = None\n        self.end_time: Optional[float] = None\n        self.elapsed_time: Optional[float] = None\n    @property\n    def elapsed(self) -> float:\n        return self.elapsed_time or (perf_counter() - self.start_time) if self.start_time else 0.0\n    def start(self) -> float:",
        "detail": "phidata.phi.utils.timer",
        "documentation": {}
    },
    {
        "label": "get_function_call_for_tool_call",
        "kind": 2,
        "importPath": "phidata.phi.utils.tools",
        "description": "phidata.phi.utils.tools",
        "peekOfCode": "def get_function_call_for_tool_call(\n    tool_call: Dict[str, Any], functions: Optional[Dict[str, Function]] = None\n) -> Optional[FunctionCall]:\n    if tool_call.get(\"type\") == \"function\":\n        _tool_call_id = tool_call.get(\"id\")\n        _tool_call_function = tool_call.get(\"function\")\n        if _tool_call_function is not None:\n            _tool_call_function_name = _tool_call_function.get(\"name\")\n            _tool_call_function_arguments_str = _tool_call_function.get(\"arguments\")\n            if _tool_call_function_name is not None:",
        "detail": "phidata.phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "extract_tool_call_from_string",
        "kind": 2,
        "importPath": "phidata.phi.utils.tools",
        "description": "phidata.phi.utils.tools",
        "peekOfCode": "def extract_tool_call_from_string(text: str, start_tag: str = \"<tool_call>\", end_tag: str = \"</tool_call>\"):\n    start_index = text.find(start_tag) + len(start_tag)\n    end_index = text.find(end_tag)\n    # Extracting the content between the tags\n    return text[start_index:end_index].strip()\ndef remove_tool_calls_from_string(text: str, start_tag: str = \"<tool_call>\", end_tag: str = \"</tool_call>\"):\n    \"\"\"Remove multiple tool calls from a string.\"\"\"\n    while start_tag in text and end_tag in text:\n        start_index = text.find(start_tag)\n        end_index = text.find(end_tag) + len(end_tag)",
        "detail": "phidata.phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "remove_tool_calls_from_string",
        "kind": 2,
        "importPath": "phidata.phi.utils.tools",
        "description": "phidata.phi.utils.tools",
        "peekOfCode": "def remove_tool_calls_from_string(text: str, start_tag: str = \"<tool_call>\", end_tag: str = \"</tool_call>\"):\n    \"\"\"Remove multiple tool calls from a string.\"\"\"\n    while start_tag in text and end_tag in text:\n        start_index = text.find(start_tag)\n        end_index = text.find(end_tag) + len(end_tag)\n        text = text[:start_index] + text[end_index:]\n    return text\ndef extract_tool_from_xml(xml_str):\n    # Find tool_name\n    tool_name_start = xml_str.find(\"<tool_name>\") + len(\"<tool_name>\")",
        "detail": "phidata.phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "extract_tool_from_xml",
        "kind": 2,
        "importPath": "phidata.phi.utils.tools",
        "description": "phidata.phi.utils.tools",
        "peekOfCode": "def extract_tool_from_xml(xml_str):\n    # Find tool_name\n    tool_name_start = xml_str.find(\"<tool_name>\") + len(\"<tool_name>\")\n    tool_name_end = xml_str.find(\"</tool_name>\")\n    tool_name = xml_str[tool_name_start:tool_name_end].strip()\n    # Find and process parameters block\n    params_start = xml_str.find(\"<parameters>\") + len(\"<parameters>\")\n    params_end = xml_str.find(\"</parameters>\")\n    parameters_block = xml_str[params_start:params_end].strip()\n    # Extract individual parameters",
        "detail": "phidata.phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "remove_function_calls_from_string",
        "kind": 2,
        "importPath": "phidata.phi.utils.tools",
        "description": "phidata.phi.utils.tools",
        "peekOfCode": "def remove_function_calls_from_string(\n    text: str, start_tag: str = \"<function_calls>\", end_tag: str = \"</function_calls>\"\n):\n    \"\"\"Remove multiple function calls from a string.\"\"\"\n    while start_tag in text and end_tag in text:\n        start_index = text.find(start_tag)\n        end_index = text.find(end_tag) + len(end_tag)\n        text = text[:start_index] + text[end_index:]\n    return text",
        "detail": "phidata.phi.utils.tools",
        "documentation": {}
    },
    {
        "label": "read_yaml_file",
        "kind": 2,
        "importPath": "phidata.phi.utils.yaml_io",
        "description": "phidata.phi.utils.yaml_io",
        "peekOfCode": "def read_yaml_file(file_path: Optional[Path]) -> Optional[Dict[str, Any]]:\n    if file_path is not None and file_path.exists() and file_path.is_file():\n        import yaml\n        logger.debug(f\"Reading {file_path}\")\n        data_from_file = yaml.safe_load(file_path.read_text())\n        if data_from_file is not None and isinstance(data_from_file, dict):\n            return data_from_file\n        else:\n            logger.error(f\"Invalid file: {file_path}\")\n    return None",
        "detail": "phidata.phi.utils.yaml_io",
        "documentation": {}
    },
    {
        "label": "write_yaml_file",
        "kind": 2,
        "importPath": "phidata.phi.utils.yaml_io",
        "description": "phidata.phi.utils.yaml_io",
        "peekOfCode": "def write_yaml_file(file_path: Optional[Path], data: Optional[Dict[str, Any]], **kwargs) -> None:\n    if file_path is not None and data is not None:\n        import yaml\n        logger.debug(f\"Writing {file_path}\")\n        file_path.write_text(yaml.safe_dump(data, **kwargs))",
        "detail": "phidata.phi.utils.yaml_io",
        "documentation": {}
    },
    {
        "label": "LanceDb",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.lancedb.lancedb",
        "description": "phidata.phi.vectordb.lancedb.lancedb",
        "peekOfCode": "class LanceDb(VectorDb):\n    def __init__(\n        self,\n        embedder: Embedder = OpenAIEmbedder(),\n        distance: Distance = Distance.cosine,\n        connection: Optional[lancedb.db.LanceTable] = None,\n        uri: Optional[str] = \"/tmp/lancedb\",\n        table_name: Optional[str] = \"phi\",\n        nprobes: Optional[int] = 20,\n        **kwargs,",
        "detail": "phidata.phi.vectordb.lancedb.lancedb",
        "documentation": {}
    },
    {
        "label": "Ivfflat",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.pgvector.index",
        "description": "phidata.phi.vectordb.pgvector.index",
        "peekOfCode": "class Ivfflat(BaseModel):\n    name: Optional[str] = None\n    lists: int = 100\n    probes: int = 10\n    dynamic_lists: bool = True\n    configuration: Dict[str, Any] = {\n        \"maintenance_work_mem\": \"2GB\",\n    }\nclass HNSW(BaseModel):\n    name: Optional[str] = None",
        "detail": "phidata.phi.vectordb.pgvector.index",
        "documentation": {}
    },
    {
        "label": "HNSW",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.pgvector.index",
        "description": "phidata.phi.vectordb.pgvector.index",
        "peekOfCode": "class HNSW(BaseModel):\n    name: Optional[str] = None\n    m: int = 16\n    ef_search: int = 5\n    ef_construction: int = 200\n    configuration: Dict[str, Any] = {\n        \"maintenance_work_mem\": \"2GB\",\n    }",
        "detail": "phidata.phi.vectordb.pgvector.index",
        "documentation": {}
    },
    {
        "label": "PgVector",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.pgvector.pgvector",
        "description": "phidata.phi.vectordb.pgvector.pgvector",
        "peekOfCode": "class PgVector(VectorDb):\n    def __init__(\n        self,\n        collection: str,\n        schema: Optional[str] = \"ai\",\n        db_url: Optional[str] = None,\n        db_engine: Optional[Engine] = None,\n        embedder: Optional[Embedder] = None,\n        distance: Distance = Distance.cosine,\n        index: Optional[Union[Ivfflat, HNSW]] = HNSW(),",
        "detail": "phidata.phi.vectordb.pgvector.pgvector",
        "documentation": {}
    },
    {
        "label": "PgVector2",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.pgvector.pgvector2",
        "description": "phidata.phi.vectordb.pgvector.pgvector2",
        "peekOfCode": "class PgVector2(VectorDb):\n    def __init__(\n        self,\n        collection: str,\n        schema: Optional[str] = \"ai\",\n        db_url: Optional[str] = None,\n        db_engine: Optional[Engine] = None,\n        embedder: Optional[Embedder] = None,\n        distance: Distance = Distance.cosine,\n        index: Optional[Union[Ivfflat, HNSW]] = HNSW(),",
        "detail": "phidata.phi.vectordb.pgvector.pgvector2",
        "documentation": {}
    },
    {
        "label": "PineconeDB",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.pineconedb.pineconedb",
        "description": "phidata.phi.vectordb.pineconedb.pineconedb",
        "peekOfCode": "class PineconeDB(VectorDb):\n    \"\"\"A class representing a Pinecone database.\n    Args:\n        name (str): The name of the index.\n        dimension (int): The dimension of the embeddings.\n        spec (Union[Dict, ServerlessSpec, PodSpec]): The index spec.\n        metric (Optional[str], optional): The metric used for similarity search. Defaults to \"cosine\".\n        additional_headers (Optional[Dict[str, str]], optional): Additional headers to pass to the Pinecone client. Defaults to {}.\n        pool_threads (Optional[int], optional): The number of threads to use for the Pinecone client. Defaults to 1.\n        timeout (Optional[int], optional): The timeout for Pinecone operations. Defaults to None.",
        "detail": "phidata.phi.vectordb.pineconedb.pineconedb",
        "documentation": {}
    },
    {
        "label": "Qdrant",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.qdrant.qdrant",
        "description": "phidata.phi.vectordb.qdrant.qdrant",
        "peekOfCode": "class Qdrant(VectorDb):\n    def __init__(\n        self,\n        collection: str,\n        embedder: Embedder = OpenAIEmbedder(),\n        distance: Distance = Distance.cosine,\n        location: Optional[str] = None,\n        url: Optional[str] = None,\n        port: Optional[int] = 6333,\n        grpc_port: int = 6334,",
        "detail": "phidata.phi.vectordb.qdrant.qdrant",
        "documentation": {}
    },
    {
        "label": "Ivfflat",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.singlestore.index",
        "description": "phidata.phi.vectordb.singlestore.index",
        "peekOfCode": "class Ivfflat(BaseModel):\n    name: Optional[str] = None\n    nlist: int = 128  # Number of inverted lists\n    nprobe: int = 8  # Number of probes at query time\n    metric_type: str = \"EUCLIDEAN_DISTANCE\"  # Can be \"EUCLIDEAN_DISTANCE\" or \"DOT_PRODUCT\"\n    configuration: Dict[str, Any] = {}\nclass IvfPQ(BaseModel):\n    name: Optional[str] = None\n    nlist: int = 128  # Number of inverted lists\n    m: int = 32  # Number of subquantizers",
        "detail": "phidata.phi.vectordb.singlestore.index",
        "documentation": {}
    },
    {
        "label": "IvfPQ",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.singlestore.index",
        "description": "phidata.phi.vectordb.singlestore.index",
        "peekOfCode": "class IvfPQ(BaseModel):\n    name: Optional[str] = None\n    nlist: int = 128  # Number of inverted lists\n    m: int = 32  # Number of subquantizers\n    nbits: int = 8  # Number of bits per quantization index\n    nprobe: int = 8  # Number of probes at query time\n    metric_type: str = \"EUCLIDEAN_DISTANCE\"  # Can be \"EUCLIDEAN_DISTANCE\" or \"DOT_PRODUCT\"\n    configuration: Dict[str, Any] = {}\nclass HNSWFlat(BaseModel):\n    name: Optional[str] = None",
        "detail": "phidata.phi.vectordb.singlestore.index",
        "documentation": {}
    },
    {
        "label": "HNSWFlat",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.singlestore.index",
        "description": "phidata.phi.vectordb.singlestore.index",
        "peekOfCode": "class HNSWFlat(BaseModel):\n    name: Optional[str] = None\n    M: int = 30  # Number of neighbors\n    ef_construction: int = 200  # Expansion factor at construction time\n    ef_search: int = 200  # Expansion factor at search time\n    metric_type: str = \"EUCLIDEAN_DISTANCE\"  # Can be \"EUCLIDEAN_DISTANCE\" or \"DOT_PRODUCT\"\n    configuration: Dict[str, Any] = {}\nclass HNSWPQ(BaseModel):\n    name: Optional[str] = None\n    M: int = 30  # Number of neighbors",
        "detail": "phidata.phi.vectordb.singlestore.index",
        "documentation": {}
    },
    {
        "label": "HNSWPQ",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.singlestore.index",
        "description": "phidata.phi.vectordb.singlestore.index",
        "peekOfCode": "class HNSWPQ(BaseModel):\n    name: Optional[str] = None\n    M: int = 30  # Number of neighbors\n    ef_construction: int = 200  # Expansion factor at construction time\n    m: int = 4  # Number of sub-quantizers\n    nbits: int = 8  # Number of bits per quantization index\n    ef_search: int = 200  # Expansion factor at search time\n    metric_type: str = \"EUCLIDEAN_DISTANCE\"  # Can be \"EUCLIDEAN_DISTANCE\" or \"DOT_PRODUCT\"\n    configuration: Dict[str, Any] = {}",
        "detail": "phidata.phi.vectordb.singlestore.index",
        "documentation": {}
    },
    {
        "label": "S2VectorDb",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.singlestore.s2vectordb",
        "description": "phidata.phi.vectordb.singlestore.s2vectordb",
        "peekOfCode": "class S2VectorDb(VectorDb):\n    def __init__(\n        self,\n        collection: str,\n        schema: Optional[str] = \"ai\",\n        db_url: Optional[str] = None,\n        db_engine: Optional[Engine] = None,\n        embedder: Embedder = OpenAIEmbedder(),\n        distance: Distance = Distance.cosine,\n    ):",
        "detail": "phidata.phi.vectordb.singlestore.s2vectordb",
        "documentation": {}
    },
    {
        "label": "VectorDb",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.base",
        "description": "phidata.phi.vectordb.base",
        "peekOfCode": "class VectorDb(ABC):\n    \"\"\"Base class for managing Vector Databases\"\"\"\n    @abstractmethod\n    def create(self) -> None:\n        raise NotImplementedError\n    @abstractmethod\n    def doc_exists(self, document: Document) -> bool:\n        raise NotImplementedError\n    @abstractmethod\n    def name_exists(self, name: str) -> bool:",
        "detail": "phidata.phi.vectordb.base",
        "documentation": {}
    },
    {
        "label": "Distance",
        "kind": 6,
        "importPath": "phidata.phi.vectordb.distance",
        "description": "phidata.phi.vectordb.distance",
        "peekOfCode": "class Distance(str, Enum):\n    cosine = \"cosine\"\n    l2 = \"l2\"\n    max_inner_product = \"max_inner_product\"",
        "detail": "phidata.phi.vectordb.distance",
        "documentation": {}
    },
    {
        "label": "Workflow",
        "kind": 6,
        "importPath": "phidata.phi.workflow.workflow",
        "description": "phidata.phi.workflow.workflow",
        "peekOfCode": "class Workflow(BaseModel):\n    # -*- Workflow settings\n    # LLM to use for this Workflow\n    llm: Optional[LLM] = None\n    # Workflow name\n    name: Optional[str] = None\n    # -*- Run settings\n    # Run UUID (autogenerated if not set)\n    run_id: Optional[str] = Field(None, validate_default=True)\n    # Metadata associated with this run",
        "detail": "phidata.phi.workflow.workflow",
        "documentation": {}
    },
    {
        "label": "WorkspaceConfig",
        "kind": 6,
        "importPath": "phidata.phi.workspace.config",
        "description": "phidata.phi.workspace.config",
        "peekOfCode": "class WorkspaceConfig(BaseModel):\n    \"\"\"The WorkspaceConfig stores data for a phidata workspace.\"\"\"\n    # Root directory for the workspace.\n    ws_root_path: Path\n    # WorkspaceSchema: This field indicates that the workspace is synced with the api\n    ws_schema: Optional[WorkspaceSchema] = None\n    # Path to the \"workspace\" directory inside the workspace root\n    _workspace_dir_path: Optional[Path] = None\n    # WorkspaceSettings\n    _workspace_settings: Optional[WorkspaceSettings] = None",
        "detail": "phidata.phi.workspace.config",
        "documentation": {}
    },
    {
        "label": "get_workspace_objects_from_file",
        "kind": 2,
        "importPath": "phidata.phi.workspace.config",
        "description": "phidata.phi.workspace.config",
        "peekOfCode": "def get_workspace_objects_from_file(resource_file: Path) -> dict:\n    \"\"\"Returns workspace objects from the resource file\"\"\"\n    try:\n        python_objects = get_python_objects_from_module(resource_file)\n        # logger.debug(f\"python_objects: {python_objects}\")\n        workspace_objects = {}\n        docker_resources_available = False\n        create_default_docker_resources = False\n        k8s_resources_available = False\n        create_default_k8s_resources = False",
        "detail": "phidata.phi.workspace.config",
        "documentation": {}
    },
    {
        "label": "ignored_dirs",
        "kind": 5,
        "importPath": "phidata.phi.workspace.config",
        "description": "phidata.phi.workspace.config",
        "peekOfCode": "ignored_dirs = [\"ignore\", \"test\", \"tests\", \"config\"]\ndef get_workspace_objects_from_file(resource_file: Path) -> dict:\n    \"\"\"Returns workspace objects from the resource file\"\"\"\n    try:\n        python_objects = get_python_objects_from_module(resource_file)\n        # logger.debug(f\"python_objects: {python_objects}\")\n        workspace_objects = {}\n        docker_resources_available = False\n        create_default_docker_resources = False\n        k8s_resources_available = False",
        "detail": "phidata.phi.workspace.config",
        "documentation": {}
    },
    {
        "label": "WorkspaceStarterTemplate",
        "kind": 6,
        "importPath": "phidata.phi.workspace.enums",
        "description": "phidata.phi.workspace.enums",
        "peekOfCode": "class WorkspaceStarterTemplate(str, Enum):\n    ai_app = \"ai-app\"\n    ai_api = \"ai-api\"\n    django_app = \"django-app\"\n    streamlit_app = \"streamlit-app\"\n    junior_de = \"junior-de\"",
        "detail": "phidata.phi.workspace.enums",
        "documentation": {}
    },
    {
        "label": "get_workspace_dir_from_env",
        "kind": 2,
        "importPath": "phidata.phi.workspace.helpers",
        "description": "phidata.phi.workspace.helpers",
        "peekOfCode": "def get_workspace_dir_from_env() -> Optional[Path]:\n    from os import getenv\n    from phi.constants import WORKSPACE_DIR_ENV_VAR\n    logger.debug(f\"Reading {WORKSPACE_DIR_ENV_VAR} from environment variables\")\n    workspace_dir = getenv(WORKSPACE_DIR_ENV_VAR, None)\n    if workspace_dir is not None:\n        return Path(workspace_dir)\n    return None\ndef get_workspace_dir_path(ws_root_path: Path) -> Path:\n    \"\"\"",
        "detail": "phidata.phi.workspace.helpers",
        "documentation": {}
    },
    {
        "label": "get_workspace_dir_path",
        "kind": 2,
        "importPath": "phidata.phi.workspace.helpers",
        "description": "phidata.phi.workspace.helpers",
        "peekOfCode": "def get_workspace_dir_path(ws_root_path: Path) -> Path:\n    \"\"\"\n    Get the workspace directory path from the given workspace root path.\n    Phidata workspace dir can be found at:\n        1. subdirectory: workspace\n        2. In a folder defined by the pyproject.toml file\n    \"\"\"\n    from phi.utils.pyproject import read_pyproject_phidata\n    logger.debug(f\"Searching for a workspace directory in {ws_root_path}\")\n    # Case 1: Look for a subdirectory with name: workspace",
        "detail": "phidata.phi.workspace.helpers",
        "documentation": {}
    },
    {
        "label": "generate_workspace_name",
        "kind": 2,
        "importPath": "phidata.phi.workspace.helpers",
        "description": "phidata.phi.workspace.helpers",
        "peekOfCode": "def generate_workspace_name(ws_dir_name: str) -> str:\n    import uuid\n    formatted_ws_name = ws_dir_name.replace(\" \", \"-\").replace(\"_\", \"-\").lower()\n    random_suffix = str(uuid.uuid4())[:4]\n    return f\"{formatted_ws_name}-{random_suffix}\"",
        "detail": "phidata.phi.workspace.helpers",
        "documentation": {}
    },
    {
        "label": "create_workspace",
        "kind": 2,
        "importPath": "phidata.phi.workspace.operator",
        "description": "phidata.phi.workspace.operator",
        "peekOfCode": "def create_workspace(name: Optional[str] = None, template: Optional[str] = None, url: Optional[str] = None) -> bool:\n    \"\"\"Creates a new workspace.\n    This function clones a template or url on the users machine at the path:\n        cwd/name\n    \"\"\"\n    import git\n    from shutil import copytree\n    from rich.prompt import Prompt\n    from phi.cli.operator import initialize_phi\n    from phi.utils.common import str_to_int",
        "detail": "phidata.phi.workspace.operator",
        "documentation": {}
    },
    {
        "label": "setup_workspace",
        "kind": 2,
        "importPath": "phidata.phi.workspace.operator",
        "description": "phidata.phi.workspace.operator",
        "peekOfCode": "def setup_workspace(ws_root_path: Path) -> bool:\n    \"\"\"Setup a phi workspace at `ws_root_path`.\n    1. Validate pre-requisites\n    1.1 Check ws_root_path is available\n    1.2 Check PhiCliConfig is available\n    1.3 Validate WorkspaceConfig is available\n    1.4 Load workspace and set as active\n    1.5 Check if remote origin is available\n    1.6 Create anon user if not available\n    2. Create or Update WorkspaceSchema",
        "detail": "phidata.phi.workspace.operator",
        "documentation": {}
    },
    {
        "label": "start_workspace",
        "kind": 2,
        "importPath": "phidata.phi.workspace.operator",
        "description": "phidata.phi.workspace.operator",
        "peekOfCode": "def start_workspace(\n    phi_config: PhiCliConfig,\n    ws_config: WorkspaceConfig,\n    target_env: Optional[str] = None,\n    target_infra: Optional[InfraType] = None,\n    target_group: Optional[str] = None,\n    target_name: Optional[str] = None,\n    target_type: Optional[str] = None,\n    dry_run: Optional[bool] = False,\n    auto_confirm: Optional[bool] = False,",
        "detail": "phidata.phi.workspace.operator",
        "documentation": {}
    },
    {
        "label": "stop_workspace",
        "kind": 2,
        "importPath": "phidata.phi.workspace.operator",
        "description": "phidata.phi.workspace.operator",
        "peekOfCode": "def stop_workspace(\n    phi_config: PhiCliConfig,\n    ws_config: WorkspaceConfig,\n    target_env: Optional[str] = None,\n    target_infra: Optional[InfraType] = None,\n    target_group: Optional[str] = None,\n    target_name: Optional[str] = None,\n    target_type: Optional[str] = None,\n    dry_run: Optional[bool] = False,\n    auto_confirm: Optional[bool] = False,",
        "detail": "phidata.phi.workspace.operator",
        "documentation": {}
    },
    {
        "label": "update_workspace",
        "kind": 2,
        "importPath": "phidata.phi.workspace.operator",
        "description": "phidata.phi.workspace.operator",
        "peekOfCode": "def update_workspace(\n    phi_config: PhiCliConfig,\n    ws_config: WorkspaceConfig,\n    target_env: Optional[str] = None,\n    target_infra: Optional[InfraType] = None,\n    target_group: Optional[str] = None,\n    target_name: Optional[str] = None,\n    target_type: Optional[str] = None,\n    dry_run: Optional[bool] = False,\n    auto_confirm: Optional[bool] = False,",
        "detail": "phidata.phi.workspace.operator",
        "documentation": {}
    },
    {
        "label": "delete_workspace",
        "kind": 2,
        "importPath": "phidata.phi.workspace.operator",
        "description": "phidata.phi.workspace.operator",
        "peekOfCode": "def delete_workspace(phi_config: PhiCliConfig, ws_to_delete: Optional[List[Path]]) -> None:\n    if ws_to_delete is None or len(ws_to_delete) == 0:\n        print_heading(\"No workspaces to delete\")\n        return\n    for ws_root in ws_to_delete:\n        phi_config.delete_ws(ws_root_path=ws_root)\ndef set_workspace_as_active(ws_dir_name: Optional[str]) -> None:\n    from phi.cli.operator import initialize_phi\n    ######################################################\n    ## 1. Validate Pre-requisites",
        "detail": "phidata.phi.workspace.operator",
        "documentation": {}
    },
    {
        "label": "set_workspace_as_active",
        "kind": 2,
        "importPath": "phidata.phi.workspace.operator",
        "description": "phidata.phi.workspace.operator",
        "peekOfCode": "def set_workspace_as_active(ws_dir_name: Optional[str]) -> None:\n    from phi.cli.operator import initialize_phi\n    ######################################################\n    ## 1. Validate Pre-requisites\n    ######################################################\n    ######################################################\n    # 1.1 Check PhiConf is valid\n    ######################################################\n    phi_config: Optional[PhiCliConfig] = PhiCliConfig.from_saved_config()\n    if not phi_config:",
        "detail": "phidata.phi.workspace.operator",
        "documentation": {}
    },
    {
        "label": "WorkspaceSettings",
        "kind": 6,
        "importPath": "phidata.phi.workspace.settings",
        "description": "phidata.phi.workspace.settings",
        "peekOfCode": "class WorkspaceSettings(BaseSettings):\n    \"\"\"\n    -*- Workspace settings\n    Initialize workspace settings by:\n    1. Creating a WorkspaceSettings object\n    2. Using Environment variables\n    3. Using the .env file\n    \"\"\"\n    # Workspace name: used for naming cloud resources\n    ws_name: str",
        "detail": "phidata.phi.workspace.settings",
        "documentation": {}
    },
    {
        "label": "PhiBase",
        "kind": 6,
        "importPath": "phidata.phi.base",
        "description": "phidata.phi.base",
        "peekOfCode": "class PhiBase(BaseModel):\n    name: Optional[str] = None\n    group: Optional[str] = None\n    version: Optional[str] = None\n    env: Optional[str] = None\n    enabled: bool = True\n    #  -*- Resource Control\n    skip_create: bool = False\n    skip_read: bool = False\n    skip_update: bool = False",
        "detail": "phidata.phi.base",
        "documentation": {}
    },
    {
        "label": "test_placeholder",
        "kind": 2,
        "importPath": "phidata.tests.test_placeholder",
        "description": "phidata.tests.test_placeholder",
        "peekOfCode": "def test_placeholder():\n    assert True",
        "detail": "phidata.tests.test_placeholder",
        "documentation": {}
    },
    {
        "label": "return_val",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "return_val = LLMSelector(model_choices).run()\nconfigurator = ModelConfigurator(return_val).configure()\n#pdb.set_trace()\n# selector = LLMSelector(model_choices)\n# return_val = selector.run()\n# configurator = ModelConfigurator(return_val)\n# configurator.configure()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "configurator",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "configurator = ModelConfigurator(return_val).configure()\n#pdb.set_trace()\n# selector = LLMSelector(model_choices)\n# return_val = selector.run()\n# configurator = ModelConfigurator(return_val)\n# configurator.configure()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "abc",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "abc = []\nabc.append()",
        "detail": "test",
        "documentation": {}
    }
]